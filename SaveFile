{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":75,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":3038.750119239721,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.0926376290427293,\"hacking_speed\":1.1041946133362044,\"hacking_money\":1.0406072657549803,\"hacking_grow\":1.0406072657549803,\"hacking\":1.2275783762295065,\"strength\":1.2487287189059764,\"defense\":1.2487287189059764,\"dexterity\":1.442281670336403,\"agility\":1.0926376290427295,\"charisma\":1.3736015907965742,\"hacking_exp\":1.1446679923304783,\"strength_exp\":1.1446679923304783,\"defense_exp\":1.1446679923304783,\"dexterity_exp\":1.1446679923304783,\"agility_exp\":1.1446679923304783,\"charisma_exp\":1.1446679923304783,\"company_rep\":1.7376060123576664,\"faction_rep\":1.3163681911800502,\"crime_money\":1.0406072657549803,\"crime_success\":1.0406072657549803,\"hacknet_node_money\":2.624509081165225,\"hacknet_node_purchase_cost\":0.7351476634606986,\"hacknet_node_ram_cost\":0.9609773378571222,\"hacknet_node_core_cost\":0.9609773378571222,\"hacknet_node_level_cost\":0.8168307371785539,\"work_money\":1.1446679923304783,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"}],\"queuedAugmentations\":[],\"city\":\"Aevum\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":100,\"moneyGainRatePerSecond\":393.6763621747837,\"onlineTimeSeconds\":716.7999999999978,\"ram\":1,\"totalMoneyGenerated\":275297.0927160948,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":80,\"moneyGainRatePerSecond\":314.941089739827,\"onlineTimeSeconds\":716.3999999999977,\"ram\":1,\"totalMoneyGenerated\":219880.84591821078,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":80,\"moneyGainRatePerSecond\":314.941089739827,\"onlineTimeSeconds\":715.9999999999976,\"ram\":1,\"totalMoneyGenerated\":219422.60663263925,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":45,\"moneyGainRatePerSecond\":177.1543629786527,\"onlineTimeSeconds\":383.39999999999384,\"ram\":1,\"totalMoneyGenerated\":52355.80675834878,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":45,\"moneyGainRatePerSecond\":177.1543629786527,\"onlineTimeSeconds\":370.19999999999453,\"ram\":1,\"totalMoneyGenerated\":51557.43109585836,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":45,\"moneyGainRatePerSecond\":177.1543629786527,\"onlineTimeSeconds\":344.99999999999596,\"ram\":1,\"totalMoneyGenerated\":49646.52603386199,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":45,\"moneyGainRatePerSecond\":177.1543629786527,\"onlineTimeSeconds\":301.39999999999844,\"ram\":1,\"totalMoneyGenerated\":45239.71283567743,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":45,\"moneyGainRatePerSecond\":177.1543629786527,\"onlineTimeSeconds\":241.80000000000067,\"ram\":1,\"totalMoneyGenerated\":37416.57616654008,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":44,\"moneyGainRatePerSecond\":173.21759935690486,\"onlineTimeSeconds\":160.99999999999966,\"ram\":1,\"totalMoneyGenerated\":20540.45787283151,\"name\":\"hacknet-node-8\"}}],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":-1.1550000000000002,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":306337.87311572564,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":971357.0560301659,\"hacknet_expenses\":-1465019.1829143343,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-693662.1268838267,\"work\":0,\"servers\":0,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":9150000005.5,\"class\":-45351040,\"codingcontract\":3600000000,\"corporation\":0,\"crime\":186700.19884957178,\"gang\":0,\"hacking\":984121273721.4855,\"hacknet\":17023919582.259563,\"hacknet_expenses\":-5964783442.281733,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":341613530654.23645,\"total\":5573017334.936962,\"work\":6934179.999999922,\"servers\":-1232799425391.8857,\"other\":-3600000,\"augmentations\":-111129667634.51514}},\"playtimeSinceLastAug\":753400,\"playtimeSinceLastBitnode\":284486400,\"lastAugReset\":1686309375263,\"lastNodeReset\":-1,\"purchasedServers\":[],\"scriptProdSinceLastAug\":0,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1686025880494},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1686025940484},{\"ID\":\"TRAVEL\",\"unlockedOn\":1686029317896},{\"ID\":\"TOR\",\"unlockedOn\":1686029317903},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1686181546572},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1686182028376},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1686182865647},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1686182865659},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1686185250222},{\"ID\":\"WORKOUT\",\"unlockedOn\":1686194967615},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1686226900534},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1686268707986},{\"ID\":\"NITESEC\",\"unlockedOn\":1686289986005},{\"ID\":\"4S\",\"unlockedOn\":1686290422785}],\"terminalCommandHistory\":[\"scan-analyze\",\"connect 256-1\",\"clear\",\"nano TPS.js\",\"scan\",\"run TPS.js\",\"nano TPS.s\",\"nano TPS.js\",\"run TPS.js\",\"home\",\"run TPS.js\",\"connect 256-1\",\"nano TPS.js\",\"home\",\"nano TPS.js\",\"run TPS.js\",\"nano TPS.js\",\"daemon.js\",\"scan\",\"scan-analyze 2\",\"run scan.js\",\"home;connect harakiri-sushi;connect CSEC;connect neo-net;backdoor\",\"run NUKE.exe\",\"run scan.js\",\"home\",\"run scan.js\",\"home;connect harakiri-sushi;connect CSEC;backdoor\",\"home\",\"run gerp.js\",\"run scan.js\",\"clear\",\"nano contractor.js\",\"nano contractor.js.solver.js\",\"run daemon.js\",\"run autopilot.js\",\"run daemon.js\",\"run casino.js\",\"nano casino.js\",\"run casino.js\",\"run kill-all-scripts.js\",\"run casino.js\",\"run daemon.js\",\"scan.js\",\"home;connect hong-fang-tea;connect nectar-net;connect omega-net;connect avmnite-02h;backdoor\",\"gerp.js\",\"homw\",\"home\",\"gerp.js\",\"run daemon.js\",\"run reserve.js 0\"],\"lastUpdate\":1686310128481,\"lastSave\":1686310127488,\"totalPlaytime\":284486400,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"1cd9dcb2571667\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"68.1.6.2\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"n00dles.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  while (true) {\\n    await ns.hack('n00dles');\\n  }\\n}\",\"filename\":\"n00dles.js\",\"server\":\"home\"}}],[\"git-pull.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let options;\\nconst argsSchema = [\\n    ['github', 'alainbryden'],\\n    ['repository', 'bitburner-scripts'],\\n    ['branch', 'main'],\\n    ['download', []], // By default, all supported files in the repository will be downloaded. Override with just a subset of files here\\n    ['new-file', []], // If a repository listing fails, only files returned by ns.ls() will be downloaded. You can add additional files to seek out here.\\n    ['subfolder', ''], // Can be set to download to a sub-folder that is not part of the remote repository structure\\n    ['extension', ['.js', '.ns', '.txt', '.script']], // Files to download by extension\\n    ['omit-folder', ['Temp/']], // Folders to omit when getting a list of files to update (TODO: This may be obsolete now that we get a list of files from github itself.)\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if ([\\\"--download\\\", \\\"--subfolder\\\", \\\"--omit-folder\\\"].includes(lastFlag))\\n        return data.scripts;\\n    return [];\\n}\\n\\n/** @param {NS} ns \\n * Will try to download a fresh version of every file on the current server.\\n * You are responsible for:\\n * - Backing up your save / scripts first (try `download *` in the terminal)\\n * - Ensuring you have no local changes that you don't mind getting overwritten **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    // Once upon a time, the game API required folders to have a leading slash\\n    // As of 2.3.1, not only is this no longer needed, but it can break the game.\\n    if (options.subfolder)\\n        options.subfolder = trimSlash(options.subfolder); // Remove the leading slash\\n    const baseUrl = `raw.githubusercontent.com/${options.github}/${options.repository}/${options.branch}/`;\\n    const filesToDownload = options['new-file'].concat(options.download.length > 0 ? options.download : await repositoryListing(ns));\\n    for (const localFilePath of filesToDownload) {\\n        let fullLocalFilePath = pathJoin(options.subfolder, localFilePath);\\n        const remoteFilePath = `https://` + pathJoin(baseUrl, localFilePath);\\n        ns.print(`Trying to update \\\"${fullLocalFilePath}\\\" from ${remoteFilePath} ...`);\\n        if (await ns.wget(`${remoteFilePath}?ts=${new Date().getTime()}`, fullLocalFilePath) && rewriteFileForSubfolder(ns, fullLocalFilePath))\\n            ns.tprint(`SUCCESS: Updated \\\"${fullLocalFilePath}\\\" to the latest from ${remoteFilePath}`);\\n        else\\n            ns.tprint(`WARNING: \\\"${fullLocalFilePath}\\\" was not updated. (Currently running, or not located at ${remoteFilePath}?)`)\\n    }\\n    ns.tprint(`INFO: Pull complete. If you have any questions or issues, head over to the Bitburner #alains-scripts Discord channel: ` +\\n        `https://discord.com/channels/415207508303544321/935667531111342200`);\\n    // Remove any temp files / scripts from the prior version\\n    ns.run(pathJoin(options.subfolder, `cleanup.js`));\\n}\\n\\n/** Removes leading and trailing slashes from the specified string */\\nfunction trimSlash(s) {\\n    // Once upon a time, the game API required folders to have a leading slash\\n    // As of 2.3.1, not only is this no longer needed, but it can break the game.\\n    if (s.startsWith('/'))\\n        s = s.slice(1);\\n    if (s.endsWith('/'))\\n        s = s.slice(0, -1);\\n    return s;\\n}\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nfunction pathJoin(...args) {\\n    return trimSlash(args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/'));\\n}\\n\\n/** @param {NS} ns\\n * Rewrites a file with path substitions to handle downloading to a subfolder. **/\\nexport function rewriteFileForSubfolder(ns, path) {\\n    if (!options.subfolder || path.includes('git-pull.js'))\\n        return true;\\n    let contents = ns.read(path);\\n    // Replace subfolder reference in helpers.js getFilePath:\\n    contents = contents.replace(`const subfolder = ''`, `const subfolder = '${options.subfolder}/'`);\\n    // Replace any imports, which can't use getFilePath:\\n    contents = contents.replace(/from '(\\\\.\\\\/)?(.*)'/g, `from '${pathJoin(options.subfolder, '$2')}'`);\\n    ns.write(path, contents, 'w');\\n    return true;\\n}\\n\\n/** @param {NS} ns \\n * Gets a list of files to download, either from the github repository (if supported), or using a local directory listing **/\\nasync function repositoryListing(ns, folder = '') {\\n    // Note: Limit of 60 free API requests per day, don't over-do it\\n    const listUrl = `https://api.github.com/repos/${options.github}/${options.repository}/contents/${folder}?ref=${options.branch}`\\n    let response = null;\\n    try {\\n        response = await fetch(listUrl); // Raw response\\n        // Expect an array of objects: [{path:\\\"\\\", type:\\\"[file|dir]\\\" },{...},...]\\n        response = await response.json(); // Deserialized\\n        // Sadly, we must recursively retrieve folders, which eats into our 60 free API requests per day.\\n        const folders = response.filter(f => f.type == \\\"dir\\\").map(f => f.path);\\n        let files = response.filter(f => f.type == \\\"file\\\").map(f => f.path)\\n            .filter(f => options.extension.some(ext => f.endsWith(ext)));\\n        ns.print(`The following files exist at ${listUrl}\\\\n${files.join(\\\", \\\")}`);\\n        for (const folder of folders)\\n            files = files.concat((await repositoryListing(ns, folder))\\n                .map(f => `/${f}`)); // Game requires folders to have a leading slash\\n        return files;\\n    } catch (error) {\\n        if (folder !== '') throw error; // Propagate the error if this was a recursive call.\\n        ns.tprint(`WARNING: Failed to get a repository listing (GitHub API request limit of 60 reached?): ${listUrl}` +\\n            `\\\\nResponse Contents (if available): ${JSON.stringify(response ?? '(N/A)')}\\\\nError: ${String(error)}`);\\n        // Fallback, assume the user already has a copy of all files in the repo, and use it as a directory listing\\n        return ns.ls('home').filter(name => options.extension.some(ext => f.endsWith(ext)) &&\\n            !options['omit-folder'].some(dir => name.startsWith(dir)));\\n    }\\n}\",\"filename\":\"git-pull.js\",\"server\":\"home\"}}],[\"analyze-hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getConfiguration, disableLogs, formatMoney, scanAllServers } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['all', false], // Set to true to report on all servers, not just the ones within our hack level\\n    ['silent', false], // Set to true to disable outputting the best servers to the terminal\\n    ['at-hack-level', 0], // Simulate expected gains when the player reaches the specified hack level. 0 means use the player's current hack level.\\n    ['hack-percent', -1], // Compute gains when hacking a certain percentage of each server's money. -1 estimates hack percentage based on current ram available, capped at 98%\\n    ['include-hacknet-ram', false], // Whether to include hacknet servers' RAM when computing current ram available\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = getConfiguration(ns, argsSchema);\\n    if (!options) return; // Invalid options, or ran in --help mode.\\n    disableLogs(ns, [\\\"scan\\\", \\\"sleep\\\"]);\\n\\n    let serverNames = scanAllServers(ns);\\n\\n    var weaken_ram = 1.75;\\n    var grow_ram = 1.75;\\n    var hack_ram = 1.7;\\n\\n    var hack_percent = options['hack-percent'] / 100;\\n    var use_est_hack_percent = false;\\n    if (options['hack-percent'] == -1) {\\n        use_est_hack_percent = true;\\n    } else {\\n        hack_percent = options['hack-percent'] / 100;\\n        if (hack_percent <= 0 || hack_percent >= 1) {\\n            ns.tprint(\\\"hack-percent out of range (0-100)\\\");\\n            return;\\n        }\\n    }\\n\\n    var player = ns.getPlayer();\\n    //ns.print(JSON.stringify(player));\\n\\n    if (options['at-hack-level']) player.skills.hacking = options['at-hack-level'];\\n    var servers = serverNames.map(ns.getServer);\\n    // Compute the total RAM available to us on all servers (e.g. for running hacking scripts)\\n    var ram_total = servers.reduce(function (total, server) {\\n        if (!server.hasAdminRights || (server.hostname.startsWith('hacknet') && !options['include-hacknet-ram'])) return total;\\n        return total + server.maxRam;\\n    }, 0);\\n\\n    // Helper to compute server gain/exp rates at a specific hacking level\\n    function getRatesAtHackLevel(server, player, hackLevel) {\\n        // Assume we will have wekened the server to min-security and taken it to max money before targetting\\n        server.hackDifficulty = server.minDifficulty;\\n        server.moneyAvailable = server.moneyMax;\\n        // Temporarily change the hack level on the player object to the requested level\\n        const real_player_hack_skill = player.skills.hacking;\\n        player.skills.hacking = hackLevel;\\n        // Compute the cost (ram*seconds) for each tool\\n        try {\\n            const weakenCost = weaken_ram * ns.formulas.hacking.weakenTime(server, player);\\n            const growCost = grow_ram * ns.formulas.hacking.growTime(server, player) + weakenCost * 0.004 / 0.05;\\n            const hackCost = hack_ram * ns.formulas.hacking.hackTime(server, player) + weakenCost * 0.002 / 0.05;\\n\\n            // Compute the growth and hack gain rates\\n            const growGain = Math.log(ns.formulas.hacking.growPercent(server, 1, player, 1));\\n            const hackGain = ns.formulas.hacking.hackPercent(server, player);\\n            server.estHackPercent = Math.min(0.98, Math.min(ram_total * hackGain / hackCost, 1 - 1 / Math.exp(ram_total * growGain / growCost))); // TODO: I think these might be off by a factor of 2x\\n            if (use_est_hack_percent) hack_percent = server.estHackPercent;\\n            const grows_per_cycle = -Math.log(1 - hack_percent) / growGain;\\n            const hacks_per_cycle = hack_percent / hackGain;\\n            const hackProfit = server.moneyMax * hack_percent * ns.formulas.hacking.hackChance(server, player);\\n            // Compute the relative monetary gain\\n            const theoreticalGainRate = hackProfit / (growCost * grows_per_cycle + hackCost * hacks_per_cycle) * 1000 /* Convert per-millisecond rate to per-second */;\\n            const expRate = ns.formulas.hacking.hackExp(server, player) * (1 + 0.002 / 0.05) / (hackCost) * 1000;\\n            // The practical cap on revenue is based on your hacking scripts. For my hacking scripts this is about 20% per second, adjust as needed\\n            // No idea why we divide by ram_total - Basically ensures that as our available RAM gets larger, the sort order merely becomes \\\"by server max money\\\"\\n            const cappedGainRate = Math.min(theoreticalGainRate, hackProfit / ram_total);\\n            ns.print(`At hack level ${hackLevel} and steal ${(hack_percent * 100).toPrecision(3)}%: Theoretical ${formatMoney(theoreticalGainRate)}, ` +\\n                `Limit: ${formatMoney(hackProfit / ram_total)}, Exp: ${expRate.toPrecision(3)}, Hack Chance: ${(ns.formulas.hacking.hackChance(server, player) * 100).toPrecision(3)}% (${server.hostname})`);\\n            return [theoreticalGainRate, cappedGainRate, expRate];\\n        }\\n        catch {\\n            // Formulas API unavailable?\\n            return [server.moneyMax, server.moneyMax, 1 / server.minDifficulty];\\n        } finally {\\n            player.skills.hacking = real_player_hack_skill; // Restore the real hacking skill if we changed it temporarily\\n        }\\n    }\\n\\n    ns.print(`All? ${options['all']} Player hack: ${player.skills.hacking} Ram total: ${ram_total}`);\\n    //ns.print(`\\\\n` + servers.map(s => `${s.hostname} bought: ${s.purchasedByPlayer} moneyMax: ${s.moneyMax} admin: ${s.hasAdminRights} hack: ${s.requiredHackingSkill}`).join('\\\\n'));\\n\\n    // Filter down to the list of servers we wish to report on\\n    servers = servers.filter(server => !server.purchasedByPlayer && (server.moneyMax || 0) > 0 &&\\n        (options['all'] || server.hasAdminRights && server.requiredHackingSkill <= player.skills.hacking));\\n\\n    // First address the servers within our hacking level\\n    const unlocked_servers = servers.filter(s => s.requiredHackingSkill <= player.skills.hacking)\\n        .map(function (server) {\\n            [server.theoreticalGainRate, server.gainRate, server.expRate] = getRatesAtHackLevel(server, player, player.skills.hacking);\\n            return server;\\n        });\\n    // The best server's gain rate will be used to pro-rate the relative gain of servers that haven't been unlocked yet (if they were unlocked at this level)\\n    const best_unlocked_server = unlocked_servers.sort((a, b) => b.gainRate - a.gainRate)[0];\\n    // Compute locked server's gain rates (pro rated back to the current player's hack level)\\n    const locked_servers = servers.filter(s => s.requiredHackingSkill > player.skills.hacking).sort((a, b) => a.requiredHackingSkill - b.requiredHackingSkill)\\n        .map(function (server) {\\n            // We will need to fake the hacking skill to get the numbers for when this server will first be unlocked, but to keep the comparison\\n            // fair, we will need to scale down the gain by the amount current best server gains now, verses what it would gain at that hack level.\\n            const [bestUnlockedScaledGainRate, _, bestUnlockedScaledExpRate] = getRatesAtHackLevel(best_unlocked_server, player, server.requiredHackingSkill);\\n            const gainRateScaleFactor = best_unlocked_server.theoreticalGainRate / bestUnlockedScaledGainRate;\\n            const expRateScaleFactor = best_unlocked_server.expRate / bestUnlockedScaledExpRate;\\n            const [theoreticalGainRate, cappedGainRate, expRate] = getRatesAtHackLevel(server, player, server.requiredHackingSkill);\\n            // Apply the scaling factors, as well as the same cap as above\\n            server.theoreticalGainRate = theoreticalGainRate * gainRateScaleFactor;\\n            server.expRate = expRate * expRateScaleFactor;\\n            server.gainRate = Math.min(server.theoreticalGainRate, cappedGainRate);\\n            ns.print(`${server.hostname}: Scaled theoretical gain by ${gainRateScaleFactor.toPrecision(3)} to ${formatMoney(server.theoreticalGainRate)} ` +\\n                `(capped at ${formatMoney(cappedGainRate)}) and exp by ${expRateScaleFactor.toPrecision(3)} to ${server.expRate.toPrecision(3)}`);\\n            return server;\\n        }) || [];\\n    // Combine the lists, sort, and display a summary.\\n    const server_eval = unlocked_servers.concat(locked_servers);\\n    const best_server = server_eval.sort((a, b) => b.gainRate - a.gainRate)[0];\\n    if (!options['silent'])\\n        ns.tprint(\\\"Best server: \\\", best_server.hostname, \\\" with \\\", formatMoney(best_server.gainRate), \\\" per ram-second\\\");\\n\\n    let order = 1;\\n    let serverListByGain = `Servers in order of best to worst hack money at Hack ${player.skills.hacking}:`;\\n    for (const server of server_eval)\\n        serverListByGain += `\\\\n ${order++} ${server.hostname}, with ${formatMoney(server.gainRate)} per ram-second while stealing ` +\\n            `${(server.estHackPercent * 100).toPrecision(3)}% (unlocked at hack ${server.requiredHackingSkill})`;\\n    ns.print(serverListByGain);\\n\\n    var best_exp_server = server_eval.sort(function (a, b) {\\n        return b.expRate - a.expRate;\\n    })[0];\\n    if (!options['silent'])\\n        ns.tprint(\\\"Best exp server: \\\", best_exp_server.hostname, \\\" with \\\", best_exp_server.expRate, \\\" exp per ram-second\\\");\\n    order = 1;\\n    let serverListByExp = `Servers in order of best to worst hack exp at Hack ${player.skills.hacking}:`;\\n    for (let i = 0; i < 5; i++)\\n        serverListByExp += `\\\\n ${order++} ${server_eval[i].hostname}, with ${server_eval[i].expRate.toPrecision(3)} exp per ram-second`;\\n    ns.print(serverListByExp);\\n\\n    ns.write('/Temp/analyze-hack.txt', JSON.stringify(server_eval.map(s => ({\\n        hostname: s.hostname,\\n        gainRate: s.gainRate,\\n        expRate: s.expRate\\n    }))), \\\"w\\\");\\n    // Below is stats for hacknet servers - uncomment at cost of 4 GB Ram\\n    /*\\n    var hacknet_nodes = [...(function* () {\\n        var n = ns.hacknet.numNodes();\\n        for (var i = 0; i < n; i++) {\\n            var server = ns.hacknet.getNodeStats(i);\\n            server.gainRate = 1000000 / 4 * server.production / server.ram;\\n            yield server;\\n        }\\n    })()];\\n    var best_hacknet_node = hacknet_nodes.sort(function (a, b) {\\n        return b.gainRate - a.gainRate;\\n    })[0];\\n    if (best_hacknet_node) ns.tprint(\\\"Best hacknet node: \\\", best_hacknet_node.name, \\\" with $\\\", best_hacknet_node.gainRate, \\\" per ram-second\\\");\\n    */\\n}\",\"filename\":\"analyze-hack.js\",\"server\":\"home\"}}],[\"ascend.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    log, getConfiguration, getFilePath, runCommand, waitForProcessToComplete, getNsDataThroughFile,\\n    getActiveSourceFiles, getStockSymbols\\n} from './helpers.js'\\n\\nconst argsSchema = [\\n    ['install-augmentations', false], // By default, augs will only be purchased. Set this flag to install (a.k.a reset)\\n    /* OR */['reset', false], // An alias for the above flag, does the same thing.\\n    ['allow-soft-reset', false], // If set to true, allows ascend.js to invoke a **soft** reset (installs no augs) when no augs are affordable. This is useful e.g. when ascending rapidly to grind hacknet hash upgrades.\\n    ['skip-staneks-gift', false], // By default, we get stanek's gift before our first install (except in BN8). If set to true, skip this step.\\n    /* Deprecated */['bypass-stanek-warning', false], // (Obsoleted by the above option) Used to warn you if you were installing augs without accepting stanek's gift\\n    // Spawn this script after installing augmentations (Note: Args not supported by the game)\\n    ['on-reset-script', null], // By default, will start with `stanek.js` if you have stanek's gift, otherwise `daemon.js`.\\n    ['ticks-to-wait-for-additional-purchases', 10], // Don't reset until we've gone this many game ticks without any new purchases being made (10 * 200ms (game tick time) ~= 2 seconds)\\n    ['max-wait-time', 60000], // The maximum number of milliseconds we'll wait for external scripts to purchase whatever permanent upgrades they can before we ascend anyway.    \\n    ['prioritize-home-ram', false], // If set to true, will spend as much money as possible on upgrading home RAM before buying augmentations\\n    /* Deprecated */['prioritize-augmentations', true], // (Legacy flag, now ignored - left for backwards compatibility)\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if ([\\\"--on-reset-script\\\"].includes(lastFlag))\\n        return data.scripts;\\n    return [];\\n}\\n\\n/** @param {NS} ns \\n * This script is meant to do all the things best done when ascending (in a generally ideal order) **/\\nexport async function main(ns) {\\n    const options = getConfiguration(ns, argsSchema);\\n    if (!options) return; // Invalid options, or ran in --help mode.\\n    let dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    if (!(4 in dictSourceFiles))\\n        return log(ns, \\\"ERROR: You cannot automate installing augmentations until you have unlocked singularity access (SF4).\\\", true, 'error');\\n    ns.disableLog('sleep');\\n    if (options['prioritize-augmentations'])\\n        log(ns, \\\"INFO: The --prioritize-augmentations flag is deprecated, as this is now the default behaviour. Use --prioritize-home-ram to get back the old behaviour.\\\")\\n\\n    // Kill every script except this one, since it can interfere with out spending\\n    let pid = await runCommand(ns, `ns.ps().filter(s => s.filename != ns.args[0]).forEach(s => ns.kill(s.pid));`,\\n        '/Temp/kill-everything-but.js', [ns.getScriptName()]);\\n    await waitForProcessToComplete(ns, pid, true); // Wait for the script to shut down, indicating it has shut down other scripts\\n\\n    // Stop the current action so that we're no longer spending money (if training) and can collect rep earned (if working)\\n    await getNsDataThroughFile(ns, 'ns.singularity.stopAction()');\\n\\n    // Clear any global reserve so that all money can be spent\\n    await ns.write(\\\"reserve.txt\\\", 0, \\\"w\\\");\\n\\n    // STEP 1: Liquidate Stocks and (SF9) Hacknet Hashes\\n    log(ns, 'Sell stocks and hashes...', true, 'info');\\n    ns.run(getFilePath('spend-hacknet-hashes.js'), 1, '--liquidate');\\n    const stkSymbols = await getStockSymbols(ns);\\n    if (stkSymbols != null) {\\n        const countOwnedStocks = async () => await getNsDataThroughFile(ns, `ns.args.map(sym => ns.stock.getPosition(sym))` +\\n            `.reduce((t, stk) => t + (stk[0] + stk[2] > 0 ? 1 : 0), 0)`, '/Temp/owned-stocks.txt', stkSymbols);\\n        let ownedStocks;\\n        do {\\n            log(ns, `INFO: Waiting for ${ownedStocks} owned stocks to be sold...`, false, 'info');\\n            pid = ns.run(getFilePath('stockmaster.js'), 1, '--liquidate');\\n            if (pid) await waitForProcessToComplete(ns, pid, true);\\n            else log(ns, `ERROR: Failed to run \\\"stockmaster.js --liquidate\\\" to sell ${ownedStocks} owned stocks. Will try again soon...`, false, 'true');\\n            await ns.sleep(1000);\\n            ownedStocks = await countOwnedStocks();\\n        } while (ownedStocks > 0);\\n    }\\n\\n    // STEP 2: Buy Home RAM Upgrades (more important than squeezing in a few extra augs)\\n    const spendOnHomeRam = async () => {\\n        log(ns, 'Try Upgrade Home RAM...', true, 'info');\\n        pid = ns.run(getFilePath('Tasks/ram-manager.js'), 1, '--reserve', '0', '--budget', '0.8');\\n        await waitForProcessToComplete(ns, pid, true); // Wait for the script to shut down, indicating it has bought all it can.\\n    };\\n    if (options['prioritize-home-ram']) await spendOnHomeRam();\\n\\n    // STEP 3: (SF13) STANEK'S GIFT\\n    // There is now an API to accept stanek's gift without resorting to exploits. We must do this before installing augs for the first time\\n    if (13 in dictSourceFiles) {\\n        // By feature request: Auto-skip stanek in BN8 (requires a separate API check to get current BN)\\n        let isInBn8 = 8 === (await getNsDataThroughFile(ns, `ns.getResetInfo()`)).currentNode;\\n\\n        if (options['skip-staneks-gift'])\\n            log(ns, 'INFO: --skip-staneks-gift was set, we will not accept it.');\\n        else if (isInBn8) {\\n            log(ns, 'INFO: Stanek\\\\'s gift is useless in BN8, setting the --skip-staneks-gift argument automatically.');\\n            options['skip-staneks-gift'] = true;\\n        } else {\\n            log(ns, 'Accepting Stanek\\\\'s Gift (if this is the first reset)...', true, 'info');\\n            const haveStanek = await getNsDataThroughFile(ns, `ns.stanek.acceptGift()`);\\n            if (haveStanek) log(ns, 'INFO: Confirmed that we have Stanek\\\\'s Gift', true, 'info');\\n            else {\\n                log(ns, 'WARNING: It looks like we can\\\\'t get Stanek\\\\'s Gift. (Did you manually purchase some augmentations?)', true, 'warning');\\n                options['skip-staneks-gift'] = true; // Nothing we can do, no point in failing our augmentation install\\n            }\\n        }\\n    }\\n\\n    // STEP 4: Buy as many desired augmentations as possible\\n    log(ns, 'Purchasing augmentations...', true, 'info');\\n    const facmanArgs = ['--purchase', '-v'];\\n    if (options['skip-staneks-gift']) {\\n        log(ns, 'INFO: Sending the --ignore-stanek argument to faction-manager.js')\\n        facmanArgs.push('--ignore-stanek');\\n    }\\n    pid = ns.run(getFilePath('faction-manager.js'), 1, ...facmanArgs);\\n    await waitForProcessToComplete(ns, pid, true); // Wait for the script to shut down, indicating it is done.\\n\\n    // Sanity check, if we are not slated to install any augmentations, ABORT\\n    // Get owned + purchased augmentations, then installed augmentations. Ensure there's a difference\\n    let purchasedAugmentations = await getNsDataThroughFile(ns, 'ns.singularity.getOwnedAugmentations(true)', '/Temp/player-augs-purchased.txt');\\n    let installedAugmentations = await getNsDataThroughFile(ns, 'ns.singularity.getOwnedAugmentations()', '/Temp/player-augs-installed.txt');\\n    let noAugsToInstall = purchasedAugmentations.length == installedAugmentations.length;\\n    if (noAugsToInstall && !options['allow-soft-reset'])\\n        return log(ns, `ERROR: See above faction-manager.js logs - there are no new purchased augs. ` +\\n            `Specify --allow-soft-reset to proceed without any purchased augs.`, true, 'error');\\n\\n    // STEP 2 (If Deferred): Upgrade home RAM after purchasing augmentations if this option was set.\\n    if (!options['prioritize-home-ram']) await spendOnHomeRam();\\n\\n    // STEP 5: Try to Buy 4S data / API if we haven't already and can afford it (although generally stockmaster.js would have bought these if it could)\\n    log(ns, 'Checking on Stock Market upgrades...', true, 'info');\\n    await getNsDataThroughFile(ns, 'ns.stock.purchaseWseAccount()');\\n    let hasStockApi = await getNsDataThroughFile(ns, 'ns.stock.purchaseTixApi()');\\n    if (hasStockApi) {\\n        await getNsDataThroughFile(ns, 'ns.stock.purchase4SMarketData()');\\n        await getNsDataThroughFile(ns, 'ns.stock.purchase4SMarketDataTixApi()');\\n    }\\n\\n    // STEP 6: (SF10) Buy whatever sleeve upgrades we can afford\\n    if (10 in dictSourceFiles) {\\n        log(ns, 'Try Upgrade Sleeves...', true, 'info');\\n        ns.run(getFilePath('sleeve.js'), 1, '--reserve', '0', '--aug-budget', '1', '--min-aug-batch', '1', '--buy-cooldown', '0', '--disable-training');\\n        await ns.sleep(500); // Give it time to make its initial purchases. Note that we do not block on the process shutting down - it will keep running.\\n    }\\n\\n    // STEP 7: (SF2) Buy whatever gang equipment we can afford\\n    if (2 in dictSourceFiles) {\\n        log(ns, 'Try Upgrade Gangs...', true, 'info');\\n        ns.run(getFilePath('gangs.js'), 1, '--reserve', '0', '--augmentations-budget', '1', '--equipment-budget', '1');\\n        await ns.sleep(500); // Give it time to make its initial purchases. Note that we do not block on the process shutting down - it will keep running.\\n    }\\n\\n    // STEP 8: Buy whatever home CPU upgrades we can afford\\n    log(ns, 'Try Upgrade Home Cores...', true, 'info');\\n    pid = await runCommand(ns, `while(ns.singularity.upgradeHomeCores()); { await ns.sleep(10); }`, '/Temp/upgrade-home-ram.js');\\n    await waitForProcessToComplete(ns, pid, true); // Wait for the script to shut down, indicating it has bought all it can.\\n\\n    // STEP 9: Join every faction we've been invited to (gives a little INT XP)\\n    let invites = await getNsDataThroughFile(ns, 'ns.singularity.checkFactionInvitations()');\\n    if (invites.length > 0) {\\n        pid = await runCommand(ns, 'ns.args.forEach(f => ns.singularity.joinFaction(f))', '/Temp/join-factions.js', invites);\\n        await waitForProcessToComplete(ns, pid, true);\\n    }\\n\\n    // TODO: If in corporation, and buyback shares is available, buy as many as we can afford\\n\\n    // STEP 10: WAIT: For money to stop decreasing, so we know that external scripts have bought what they could.\\n    log(ns, 'Waiting for purchasing to stop...', true, 'info');\\n    let money = 0, lastMoney = 0, ticksWithoutPurchases = 0;\\n    const maxWait = Date.now() + options['max-wait-time'];\\n    while (ticksWithoutPurchases < options['ticks-to-wait-for-additional-purchases'] && (Date.now() < maxWait)) {\\n        const start = Date.now(); // Used to wait for the game to tick.\\n        const refreshMoney = async () => money =\\n            await getNsDataThroughFile(ns, `ns.getServerMoneyAvailable(ns.args[0])`, null, [\\\"home\\\"]);\\n        while ((Date.now() - start <= 200) && lastMoney == await refreshMoney())\\n            await ns.sleep(10); // Wait for game to tick (money to change) - might happen sooner than 200ms\\n        ticksWithoutPurchases = money < lastMoney ? 0 : ticksWithoutPurchases + 1;\\n        lastMoney = money;\\n    }\\n\\n    // STEP 4 REDUX: If somehow we have money left over and can afford some junk augs that weren't on our desired list, grab them too\\n    log(ns, 'Seeing if we can afford any other augmentations...', true, 'info');\\n    facmanArgs.push('--stat-desired', '_'); // Means buy any aug with any stats\\n    pid = ns.run(getFilePath('faction-manager.js'), 1, ...facmanArgs);\\n    await waitForProcessToComplete(ns, pid, true); // Wait for the script to shut down, indicating it is done.\\n\\n    // Clean up our temp folder - it's good to do this once in a while to reduce the save footprint.\\n    await waitForProcessToComplete(ns, ns.run(getFilePath('cleanup.js')), true);\\n\\n    // FINALLY: If configured, soft reset\\n    if (options.reset || options['install-augmentations']) {\\n        log(ns, '\\\\nCatch you on the flippity-flip\\\\n', true, 'success');\\n        await ns.sleep(1000); // Pause for effect?\\n        const resetScript = options['on-reset-script'] ??\\n            // Default script (if none is specified) is stanek.js if we have it (which in turn will spawn daemon.js when done)\\n            (purchasedAugmentations.includes(`Stanek's Gift - Genesis`) ? getFilePath('stanek.js') : getFilePath('daemon.js'));\\n        if (noAugsToInstall)\\n            await runCommand(ns, `ns.singularity.softReset(ns.args[0])`, null, [resetScript]);\\n        else\\n            await runCommand(ns, `ns.singularity.installAugmentations(ns.args[0])`, null, [resetScript]);\\n    } else\\n        log(ns, `SUCCESS: Ready to ascend. In the future, you can run with --reset (or --install-augmentations) ` +\\n            `to actually perform the reset automatically.`, true, 'success');\\n}\",\"filename\":\"ascend.js\",\"server\":\"home\"}}],[\"autopilot.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    log, getFilePath, getConfiguration, instanceCount, getNsDataThroughFile, runCommand, waitForProcessToComplete,\\n    getActiveSourceFiles, tryGetBitNodeMultipliers, getStocksValue, unEscapeArrayArgs,\\n    formatMoney, formatDuration\\n} from './helpers.js'\\n\\nconst persistentLog = \\\"log.autopilot.txt\\\";\\nconst factionManagerOutputFile = \\\"/Temp/affordable-augs.txt\\\"; // Temp file produced by faction manager with status information\\nconst casinoFlagFile = \\\"/Temp/ran-casino.txt\\\";\\nconst defaultBnOrder = [4.3, 1.3, 5.1, 9.2, 10.1, 2.1, 8.2, 10.3, 9.3, 11.3, 13.3, 5.3, 7.1, 6.3, 7.3, 2.3, 8.3, 3.3, 12.999];\\n\\nlet options; // The options used at construction time\\nconst argsSchema = [ // The set of all command line arguments\\n    ['next-bn', 0], // If we destroy the current BN, the next BN to start\\n    ['disable-auto-destroy-bn', false], // Set to true if you do not want to auto destroy this BN when done\\n    ['install-at-aug-count', 11], // Automatically install when we can afford this many new augmentations (with NF only counting as 1)\\n    ['install-at-aug-plus-nf-count', 14], // or... automatically install when we can afford this many augmentations including additional levels of Neuroflux\\n    ['install-for-augs', [\\\"The Red Pill\\\"]], // or... automatically install as soon as we can afford one of these augmentations\\n    ['install-countdown', 5 * 60 * 1000], // If we're ready to install, wait this long first to see if more augs come online (we might just be gaining momentum)\\n    ['time-before-boosting-best-hack-server', 15 * 60 * 1000], // Wait this long before picking our best hack-income server and spending hashes on boosting it\\n    ['reduced-aug-requirement-per-hour', 0.5], // For every hour since the last reset, require this many fewer augs to install.\\n    ['interval', 2000], // Wake up this often (milliseconds) to check on things\\n    ['interval-check-scripts', 10000], // Get a listing of all running processes on home this frequently\\n    ['high-hack-threshold', 8000], // Once hack level reaches this, we start daemon in high-performance hacking mode\\n    ['enable-bladeburner', null], // (Deprecated) Bladeburner is now always enabled if it's available. Use '--disable-bladeburner' to explicitly turn off\\n    ['disable-bladeburner', false], // This will instruct daemon.js not to run the bladeburner.js, even if bladeburner is available.\\n    ['wait-for-4s-threshold', 0.9], // Set to 0 to not reset until we have 4S. If money is above this ratio of the 4S Tix API cost, don't reset until we buy it.\\n    ['disable-wait-for-4s', false], // If true, will doesn't wait for the 4S Tix API to be acquired under any circumstantes\\n    ['disable-rush-gangs', false], // Set to true to disable focusing work-for-faction on Karma until gangs are unlocked\\n    ['disable-casino', false], // Set to true to disable running the casino.js script automatically\\n    ['on-completion-script', null], // Spawn this script when we defeat the bitnode\\n    ['on-completion-script-args', []], // Optional args to pass to the script when we defeat the bitnode\\n];\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if ([\\\"--on-completion-script\\\"].includes(lastFlag))\\n        return data.scripts;\\n    return [];\\n}\\n\\nlet playerInGang = false, rushGang = false; // Tells us whether we're should be trying to work towards getting into a gang\\nlet playerInBladeburner = false; // Whether we've joined bladeburner\\nlet wdHack = 0; // If the WD server is available (i.e. TRP is installed), caches the required hack level\\nlet ranCasino = false; // Flag to indicate whether we've stolen 10b from the casino yet\\nlet reservedPurchase = 0; // Flag to indicate whether we've reservedPurchase money and can still afford augmentations\\nlet reserveForDaedalus = false, daedalusUnavailable = false; // Flags to indicate that we should be keeping 100b cash on hand to earn an invite to Daedalus\\nlet lastScriptsCheck = 0; // Last time we got a listing of all running scripts\\nlet killScripts = []; // A list of scripts flagged to be restarted due to changes in priority\\nlet dictOwnedSourceFiles = [], unlockedSFs = [], bitnodeMults, nextBn = 0; // Info for the current bitnode\\nlet installedAugmentations = [], playerInstalledAugCount = 0, stanekLaunched = false; // Info for the current ascend\\nlet daemonStartTime = 0; // The time we personally launched daemon.\\nlet installCountdown = 0; // Start of a countdown before we install augmentations.\\nlet bnCompletionSuppressed = false; // Flag if we've detected that we've won the BN, but are suppressing a restart\\nlet resetInfo = (/**@returns{ResetInfo}*/() => undefined)(); // Information about the current bitnode\\n\\n// Replacements for player properties deprecated since 2.3.0\\nfunction getTimeInAug() { return Date.now() - resetInfo.lastAugReset; }\\nfunction getTimeInBitnode() { return Date.now() - resetInfo.lastNodeReset; }\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions || await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n\\n    log(ns, \\\"INFO: Auto-pilot engaged...\\\", true, 'info');\\n    // The game does not allow boolean flags to be turned \\\"off\\\" via command line, only on. Since this gets saved, notify the user about how they can turn it off.\\n    const flagsSet = ['disable-auto-destroy-bn', 'disable-bladeburner', 'disable-wait-for-4s', 'disable-rush-gangs'].filter(f => options[f]);\\n    for (const flag of flagsSet)\\n        log(ns, `WARNING: You have previously enabled the flag \\\"--${flag}\\\". Because of the way this script saves its run settings, the ` +\\n            `only way to now turn this back off will be to manually edit or delete the file ${ns.getScriptName()}.config.txt`, true);\\n\\n    let startUpRan = false;\\n    while (true) {\\n        try {\\n            // Start-up actions, wrapped in error handling in case of temporary failures\\n            if (!startUpRan) startUpRan = await startUp(ns);\\n            // Main loop: Monitor progress in the current BN and automatically reset when we can afford TRP, or N augs.\\n            await mainLoop(ns);\\n        }\\n        catch (err) {\\n            log(ns, `WARNING: autopilot.js Caught (and suppressed) an unexpected error:\\\\n` +\\n                (typeof err === 'string' ? err : err?.stack ? err.stack : JSON.stringify(err)),\\n                false, 'warning');\\n        }\\n        await ns.sleep(options['interval']);\\n    }\\n}\\n\\n/** @param {NS} ns **/\\nasync function startUp(ns) {\\n    await persistConfigChanges(ns);\\n\\n    // Reset global state\\n    playerInGang = rushGang = playerInBladeburner = ranCasino = reserveForDaedalus = daedalusUnavailable =\\n        bnCompletionSuppressed = stanekLaunched = false;\\n    playerInstalledAugCount = wdHack = null;\\n    installCountdown = daemonStartTime = lastScriptsCheck = reservedPurchase = 0;\\n    lastStatusLog = \\\"\\\";\\n    installedAugmentations = killScripts = [];\\n\\n    // Collect and cache some one-time data\\n    const player = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n    resetInfo = await getNsDataThroughFile(ns, 'ns.getResetInfo()');\\n    bitnodeMults = await tryGetBitNodeMultipliers(ns);\\n    dictOwnedSourceFiles = await getActiveSourceFiles(ns, false);\\n    unlockedSFs = await getActiveSourceFiles(ns, true);\\n    try {\\n        installedAugmentations = !(4 in unlockedSFs) ? [] :\\n            await getNsDataThroughFile(ns, 'ns.singularity.getOwnedAugmentations()', '/Temp/player-augs-installed.txt');\\n        if (!(4 in unlockedSFs))\\n            log(ns, `WARNING: This script requires SF4 (singularity) functions to assess purchasable augmentations ascend automatically. ` +\\n                `Some functionality will be disabled and you'll have to manage working for factions, purchasing, and installing augmentations yourself.`, true);\\n    } catch (err) {\\n        if (unlockedSFs[4] || 0 == 3) throw err; // No idea why this failed, treat as temporary and allow auto-retry.\\t\\t\\n        log(ns, `WARNING: You only have SF4 level ${unlockedSFs[4]}. Without level 3, some singularity functions will be ` +\\n            `too expensive to run until you have bought a lot of home RAM.`, true);\\n    }\\n    if (getTimeInBitnode() < 60 * 1000) // Skip initialization if we've been in the bitnode for more than 1 minute\\n        await initializeNewBitnode(ns, player);\\n\\n    // Decide what the next-up bitnode should be\\n    const getSFLevel = bn => Number(bn + \\\".\\\" + ((dictOwnedSourceFiles[bn] || 0) + (resetInfo.currentNode == bn ? 1 : 0)));\\n    const nextSfEarned = getSFLevel(resetInfo.currentNode);\\n    const nextRecommendedSf = defaultBnOrder.find(v => v - Math.floor(v) > getSFLevel(Math.floor(v)) - Math.floor(v));\\n    const nextRecommendedBn = Math.floor(nextRecommendedSf);\\n    nextBn = options['next-bn'] || nextRecommendedBn;\\n    log(ns, `INFO: After the current BN (${nextSfEarned}), the next recommended BN is ${nextRecommendedBn} until you have SF ${nextRecommendedSf}.` +\\n        `\\\\nYou are currently earning SF${nextSfEarned}, and you already own the following source files: ` +\\n        Object.keys(dictOwnedSourceFiles).map(bn => `${bn}.${dictOwnedSourceFiles[bn]}`).join(\\\", \\\"));\\n    if (nextBn != nextRecommendedBn)\\n        log(ns, `WARN: The next recommended BN is ${nextRecommendedBn}, but the --next-bn parameter is set to override this with ${nextBn}.`, true, 'warning');\\n\\n    return true;\\n}\\n\\n/** Write any configuration changes to disk so that they will survive resets and new bitnodes\\n * @param {NS} ns **/\\nasync function persistConfigChanges(ns) {\\n    // Because we cannot pass args to \\\"install\\\" and \\\"destroy\\\" functions, we write them to disk to override defaults\\n    const changedArgs = JSON.stringify(argsSchema\\n        .filter(a => JSON.stringify(options[a[0]]) != JSON.stringify(a[1]))\\n        .map(a => [a[0], options[a[0]]]));\\n    // Only update the config file if it doesn't match the most resent set of run args\\n    const configPath = `${ns.getScriptName()}.config.txt`\\n    const currentConfig = ns.read(configPath);\\n    if ((changedArgs.length > 2 || currentConfig) && changedArgs != currentConfig) {\\n        ns.write(configPath, changedArgs, \\\"w\\\");\\n        log(ns, `INFO: Updated \\\"${configPath}\\\" to persist the most recent run args through resets: ${changedArgs}`, true, 'info');\\n    }\\n}\\n\\n/** Logic run once at the beginning of a new BN\\n * @param {NS} ns */\\nasync function initializeNewBitnode(ns, player) {\\n    // Nothing to do here (yet)\\n}\\n\\n/** Logic run periodically throughout the BN\\n * @param {NS} ns */\\nasync function mainLoop(ns) {\\n    const player = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n    let stocksValue = 0;\\n    try { stocksValue = await getStocksValue(ns); } catch { /* Assume if this fails (insufficient ram) we also have no stocks */ }\\n    manageReservedMoney(ns, player, stocksValue);\\n    await checkOnDaedalusStatus(ns, player, stocksValue);\\n    await checkIfBnIsComplete(ns, player);\\n    await checkOnRunningScripts(ns, player);\\n    await maybeDoCasino(ns, player);\\n    await maybeInstallAugmentations(ns, player);\\n}\\n\\n/** Logic run periodically to if there is anything we can do to speed along earning a Daedalus invite\\n * @param {NS} ns\\n * @param {Player} player **/\\nasync function checkOnDaedalusStatus(ns, player, stocksValue) {\\n    // Logic below is for rushing a daedalus invite.\\n    // We do not need to run if we've previously determined that Daedalus cannot be unlocked (insufficient augs), or if we've already got TRP\\n    if (daedalusUnavailable || (wdHack || 0) > 0) return reserveForDaedalus = false;\\n    if (player.skills.hacking < 2500) return reserveForDaedalus = false;\\n    if (player.factions.includes(\\\"Daedalus\\\")) {\\n        if (reserveForDaedalus) {\\n            log(ns, \\\"SUCCESS: We sped along joining the faction 'Daedalus'. Restarting work-for-factions.js to speed along earn rep.\\\", false, 'success');\\n            killScripts.push(\\\"work-for-factions.js\\\"); // Schedule this to be killed (will be restarted) on the next script loop.\\n            lastScriptsCheck = 0;\\n        }\\n        return reserveForDaedalus = false;\\n    }\\n    if (reserveForDaedalus) { // Already waiting for a Daedalus invite, try joining them\\n        return (4 in unlockedSFs) ? await getNsDataThroughFile(ns, 'ns.singularity.joinFaction(ns.args[0])', null, [\\\"Daedalus\\\"]) :\\n            log(ns, \\\"INFO: Please manually join the faction 'Daedalus' as soon as possible to proceed\\\", false, 'info');\\n    }\\n    const bitNodeMults = await tryGetBitNodeMultipliers(ns, false) || { DaedalusAugsRequirement: 1 };\\n    // Note: A change coming soon will convert DaedalusAugsRequirement from a fractional multiplier, to an integer number of augs. This should support both for now.\\n    const reqDaedalusAugs = bitNodeMults.DaedalusAugsRequirement < 2 ? Math.round(30 * bitNodeMults.DaedalusAugsRequirement) : bitNodeMults.DaedalusAugsRequirement;\\n    if (playerInstalledAugCount !== null && playerInstalledAugCount < reqDaedalusAugs)\\n        return daedalusUnavailable = true; // Won't be able to unlock daedalus this ascend\\n    // If we have sufficient augs and hacking, all we need is the money (100b)\\n    const totalWorth = player.money + stocksValue;\\n    if (totalWorth > 100E9 && player.money < 100E9) {\\n        reserveForDaedalus = true;\\n        log(ns, \\\"INFO: Temporarily liquidating stocks to earn an invite to Daedalus...\\\", true, 'info');\\n        launchScriptHelper(ns, 'stockmaster.js', ['--liquidate']);\\n    }\\n}\\n\\n/** Logic run periodically throughout the BN to see if we are ready to complete it.\\n * @param {NS} ns \\n * @param {Player} player */\\nasync function checkIfBnIsComplete(ns, player) {\\n    if (bnCompletionSuppressed) return true;\\n    if (wdHack === null) { // If we haven't checked yet, see if w0r1d_d43m0n (server) has been unlocked and get its required hack level\\n        wdHack = await getNsDataThroughFile(ns, 'ns.scan(\\\"The-Cave\\\").includes(\\\"w0r1d_d43m0n\\\") ? ' +\\n            'ns.getServerRequiredHackingLevel(\\\"w0r1d_d43m0n\\\"): -1',\\n            '/Temp/wd-hackingLevel.txt');\\n        if (wdHack == -1) wdHack = Number.POSITIVE_INFINITY; // Cannot stringify infinity, so use -1 in transit\\n    }\\n    // Detect if a BN win condition has been met\\n    let bnComplete = player.skills.hacking >= wdHack;\\n    // Detect the BB win condition (requires SF7 (bladeburner API) or being in BN6)\\n    if (7 in unlockedSFs) // No point making this async check if bladeburner API is unavailable\\n        playerInBladeburner = playerInBladeburner || await getNsDataThroughFile(ns, 'ns.bladeburner.inBladeburner()');\\n    if (!bnComplete && playerInBladeburner)\\n        bnComplete = await getNsDataThroughFile(ns,\\n            `ns.bladeburner.getActionCountRemaining('blackop', 'Operation Daedalus') === 0`,\\n            '/Temp/bladeburner-completed.txt');\\n    if (!bnComplete) return false; // No win conditions met\\n\\n    const text = `BN ${resetInfo.currentNode}.${(dictOwnedSourceFiles[resetInfo.currentNode] || 0) + 1} completed at ` +\\n        `${formatDuration(getTimeInBitnode())} ` +\\n        `(${(player.skills.hacking >= wdHack ? `hack (${wdHack.toFixed(0)})` : 'bladeburner')} win condition)`;\\n    persist_log(ns, text);\\n    log(ns, `SUCCESS: ${text}`, true, 'success');\\n\\n    // Run the --on-completion-script if specified\\n    if (options['on-completion-script']) {\\n        const pid = launchScriptHelper(ns, options['on-completion-script'], unEscapeArrayArgs(options['on-completion-script-args']), false);\\n        if (pid) await waitForProcessToComplete(ns, pid);\\n    }\\n\\n    // Check if there is some reason not to automatically destroy this BN\\n    if (resetInfo.currentNode == 10) { // Suggest the user doesn't reset until they buy all sleeves and max memory\\n        const shouldHaveSleeveCount = Math.min(8, 6 + (dictOwnedSourceFiles[10] || 0));\\n        const numSleeves = await getNsDataThroughFile(ns, `ns.sleeve.getNumSleeves()`);\\n        if (numSleeves < shouldHaveSleeveCount) {\\n            log(ns, `WARNING: Detected that you only have ${numSleeves} sleeves, but you could have ${shouldHaveSleeveCount}.` +\\n                `\\\\nTry not to leave BN10 before buying all you can from the faction \\\"The Covenant\\\", especially sleeve memory!` +\\n                `\\\\nNOTE: You can ONLY buy sleeves/memory from The Covenant in BN10, which is why it's important to do this before you leave.`, true);\\n            return bnCompletionSuppressed = true;\\n        }\\n    }\\n    if (options['disable-auto-destroy-bn']) {\\n        log(ns, `--disable-auto-destroy-bn is set, you can manually exit the bitnode when ready.`, true);\\n        return bnCompletionSuppressed = true;\\n    }\\n    if (!(4 in dictOwnedSourceFiles)) {\\n        log(ns, `You do not own SF4, so you must manually exit the bitnode (` +\\n            `${player.skills.hacking >= wdHack ? \\\"by hacking W0r1dD43m0n\\\" : \\\"on the bladeburner BlackOps tab\\\"}).`, true);\\n        return bnCompletionSuppressed = true;\\n    }\\n\\n    // Clean out our temp folder and flags so we don't have any stale data when the next BN starts.\\n    let pid = launchScriptHelper(ns, 'cleanup.js');\\n    if (pid) await waitForProcessToComplete(ns, pid);\\n\\n    // Use the new special singularity function to automate entering a new BN\\n    pid = await runCommand(ns, `ns.singularity.destroyW0r1dD43m0n(ns.args[0], ns.args[1])`, null, [nextBn, ns.getScriptName()]);\\n    if (pid) {\\n        log(ns, `SUCCESS: Initiated process ${pid} to execute 'singularity.destroyW0r1dD43m0n' with args: [${nextBn}, ${ns.getScriptName()}]`, true, 'success')\\n        await waitForProcessToComplete(ns, pid);\\n        log(ns, `WARNING: Process is done running, why am I still here? Sleeping 10 seconds...`, true, 'error')\\n        await ns.sleep(10000);\\n    }\\n    persist_log(ns, log(ns, `ERROR: Tried destroy the bitnode (pid=${pid}), but we're still here...`, true, 'error'));\\n    //return bnCompletionSuppressed = true; // Don't suppress bn Completion, try again on our next loop.\\n}\\n\\n/** Helper to get a list of all scripts running (on home)\\n * @param {NS} ns */\\nasync function getRunningScripts(ns) {\\n    return await getNsDataThroughFile(ns, 'ns.ps(ns.args[0])', null, ['home']);\\n}\\n\\n/** Helper to get the first instance of a running script by name.\\n * @param {NS} ns \\n * @param {ProcessInfo[]} runningScripts - (optional) Cached list of running scripts to avoid repeating this expensive request\\n * @param {(value: ProcessInfo, index: number, array: ProcessInfo[]) => unknown} filter - (optional) Filter the list of processes beyond just matching on the script name */\\nfunction findScriptHelper(baseScriptName, runningScripts, filter = null) {\\n    return runningScripts.filter(s => s.filename == getFilePath(baseScriptName) && (!filter || filter(s)))[0];\\n}\\n\\n/** Helper to kill a running script instance by name\\n * @param {NS} ns \\n * @param {ProcessInfo[]} runningScripts - (optional) Cached list of running scripts to avoid repeating this expensive request\\n * @param {ProcessInfo} processInfo - (optional) The process to kill, if we've already found it in advance */\\nasync function killScript(ns, baseScriptName, runningScripts = null, processInfo = null) {\\n    processInfo = processInfo || findScriptHelper(baseScriptName, runningScripts || (await getRunningScripts(ns)))\\n    if (processInfo) {\\n        log(ns, `INFO: Killing script ${baseScriptName} with pid ${processInfo.pid} and args: [${processInfo.args.join(\\\", \\\")}].`, false, 'info');\\n        return await getNsDataThroughFile(ns, 'ns.kill(ns.args[0])', null, [processInfo.pid]);\\n    }\\n    log(ns, `WARNING: Skipping request to kill script ${baseScriptName}, no running instance was found...`, false, 'warning');\\n    return false;\\n}\\n\\n/** Logic to ensure scripts are running to progress the BN\\n * @param {NS} ns \\n * @param {Player} player */\\nasync function checkOnRunningScripts(ns, player) {\\n    if (lastScriptsCheck > Date.now() - options['interval-check-scripts']) return;\\n    lastScriptsCheck = Date.now();\\n    const runningScripts = await getRunningScripts(ns); // Cache the list of running scripts for the duration\\n    const findScript = (baseScriptName, filter = null) => findScriptHelper(baseScriptName, runningScripts, filter);\\n\\n    // Kill any scripts that were flagged for restart\\n    while (killScripts.length > 0)\\n        await killScript(ns, killScripts.pop(), runningScripts);\\n\\n    // Hold back on launching certain scripts if we are low on home RAM\\n    const homeRam = await getNsDataThroughFile(ns, `ns.getServerMaxRam(ns.args[0])`, null, [\\\"home\\\"]);\\n\\n    // Launch stock-master in a way that emphasizes it as our main source of income early-on\\n    if (!findScript('stockmaster.js') && !reserveForDaedalus && homeRam >= 32)\\n        launchScriptHelper(ns, 'stockmaster.js', [\\n            \\\"--fracH\\\", 0.1, // Increase the default proportion of money we're willing to hold as stock, it's often our best source of income\\n            \\\"--reserve\\\", 0, // Override to ignore the global reserve.txt. Any money we reserve can more or less safely live as stocks\\n        ]);\\n\\n    // Launch sleeves and allow them to also ignore the reserve so they can train up to boost gang unlock speed\\n    if ((10 in unlockedSFs) && (2 in unlockedSFs) && !findScript('sleeve.js')) {\\n        let sleeveArgs = [];\\n        if (!options[\\\"disable-casino\\\"] && !ranCasino)\\n            sleeveArgs.push(\\\"--training-reserve\\\", 300000); // Avoid training away our casino seed money\\n        if (options[\\\"disable-bladeburner\\\"])\\n            sleeveArgs.push(\\\"--disable-bladeburner\\\");\\n        launchScriptHelper(ns, 'sleeve.js', sleeveArgs);\\n    }\\n\\n    // Spend hacknet hashes on our boosting best hack-income server once established\\n    const spendingHashesOnHacking = findScript('spend-hacknet-hashes.js', s => s.args.includes(\\\"--spend-on-server\\\"))\\n    if ((9 in unlockedSFs) && !spendingHashesOnHacking && getTimeInAug() >= options['time-before-boosting-best-hack-server'] && !(resetInfo.currentNode == 8)) {\\n        const strServerIncomeInfo = ns.read('/Temp/analyze-hack.txt');\\t// HACK: Steal this file that Daemon also relies on\\n        if (strServerIncomeInfo) {\\n            const incomeByServer = JSON.parse(strServerIncomeInfo);\\n            const dictServerHackReqs = await getNsDataThroughFile(ns, 'Object.fromEntries(ns.args.map(server => [server, ns.getServerRequiredHackingLevel(server)]))',\\n                '/Temp/servers-hack-req.txt', incomeByServer.map(s => s.hostname));\\n            const [bestServer, gain] = incomeByServer.filter(s => dictServerHackReqs[s.hostname] <= player.skills.hacking)\\n                .reduce(([bestServer, bestIncome], target) => target.gainRate > bestIncome ? [target.hostname, target.gainRate] : [bestServer, bestIncome], [null, 0]);\\n            if (bestServer) {\\n                log(ns, `Identified that the best hack income server is ${bestServer} worth ${formatMoney(gain)}/sec.`)\\n                launchScriptHelper(ns, 'spend-hacknet-hashes.js',\\n                    [\\\"--liquidate\\\", \\\"--spend-on\\\", \\\"Increase_Maximum_Money\\\", \\\"--spend-on\\\", \\\"Reduce_Minimum_Security\\\", \\\"--spend-on-server\\\", bestServer]);\\n            } else\\n                log(ns, `WARNING: strServerIncomeInfo was not empty, but could not determine best server:\\\\n${strServerIncomeInfo}`)\\n        }\\n    }\\n\\n    // Determine the arguments we want to run daemon.js with. We will either pass these directly, or through stanek.js if we're running it first.\\t\\n    const hackThreshold = options['high-hack-threshold']; // If player.skills.hacking level is about 8000, run in \\\"start-tight\\\" mode\\n    const daemonArgs = (player.skills.hacking < hackThreshold) ? [] :\\n        // Launch daemon in \\\"looping\\\" mode if we have sufficient hack level\\n        [\\\"--looping-mode\\\", \\\"--cycle-timing-delay\\\", 2000, \\\"--queue-delay\\\", \\\"10\\\", \\\"--initial-max-targets\\\", \\\"63\\\", \\\"--silent-misfires\\\", \\\"--no-share\\\",\\n            // Use recovery thread padding sparingly until our hack level is significantly higher\\n            \\\"--recovery-thread-padding\\\", 1.0 + (player.skills.hacking - hackThreshold) / 1000.0];\\n    daemonArgs.push('--disable-script', getFilePath('work-for-factions.js')); // We will run this ourselves with args of our choosing\\n    // In BN8, always run in a mode that prioritizes stock market manipulation\\n    if (resetInfo.currentNode == 8) daemonArgs.push(\\\"--stock-manipulation-focus\\\");\\n    // Don't run the script to join and manage bladeburner if it is explicitly disabled\\n    if (options['disable-bladeburner']) daemonArgs.push('--disable-script', getFilePath('bladeburner.js'));\\n    // If we have SF4, but not level 3, instruct daemon.js to reserve additional home RAM\\n    if ((4 in unlockedSFs) && unlockedSFs[4] < 3)\\n        daemonArgs.push('--reserved-ram', 32 * (unlockedSFs[4] == 2 ? 4 : 16));\\n\\n    // Once stanek's gift is accepted, launch it once per reset (Note: stanek's gift is auto-purchased by faction-manager.js on your first install)\\n    let stanekRunning = (13 in unlockedSFs) && findScript('stanek.js') !== undefined;\\n    if ((13 in unlockedSFs) && installedAugmentations.includes(`Stanek's Gift - Genesis`) && !stanekLaunched && !stanekRunning) {\\n        stanekLaunched = true; // Once we've know we've launched stanek once, we never have to again this reset.\\n        const stanekArgs = [\\\"--on-completion-script\\\", getFilePath('daemon.js')]\\n        if (daemonArgs.length >= 0) stanekArgs.push(\\\"--on-completion-script-args\\\", JSON.stringify(daemonArgs)); // Pass in all the args we wanted to run daemon.js with\\n        launchScriptHelper(ns, 'stanek.js', stanekArgs);\\n        stanekRunning = true;\\n    }\\n\\n    // Launch daemon with the desired arguments (or re-launch if we recently decided to switch to looping mode) - so long as stanek isn't charging\\n    const daemon = findScript('daemon.js');\\n    if (!stanekRunning && (!daemon || player.skills.hacking >= hackThreshold && !daemon.args.includes(\\\"--looping-mode\\\"))) {\\n        if (player.skills.hacking >= hackThreshold)\\n            log(ns, `INFO: Hack level (${player.skills.hacking}) is >= ${hackThreshold} (--high-hack-threshold): Starting daemon.js in high-performance hacking mode.`);\\n        launchScriptHelper(ns, 'daemon.js', daemonArgs);\\n        daemonStartTime = Date.now();\\n    }\\n\\n    // Default work for faction args we think are ideal for speed-running BNs\\n    const workForFactionsArgs = [\\n        \\\"--fast-crimes-only\\\", // Essentially means we do mug until we can do homicide, then stick to homicide\\n        \\\"--get-invited-to-every-faction\\\" // Join factions even we have all their augs. Good for having NeuroFlux providers\\n    ];\\n    if (options['disable-bladeburner']) workForFactionsArgs.push(\\\"--no-bladeburner-check\\\")\\n    // The following args are ideal when running 'work-for-factions.js' to rush unlocking gangs (earn karma)\\n    const rushGangsArgs = workForFactionsArgs.concat(...[ // Everything above, plus...\\n        \\\"--crime-focus\\\", // Start off by trying to work for each of the crime factions (generally have combat reqs)\\n        \\\"--training-stat-per-multi-threshold\\\", 200, // Be willing to spend more time grinding for stats rather than skipping a faction\\n        \\\"--prioritize-invites\\\"]); // Don't actually start working for factions until we've earned as many invites as we think we can\\n    // If gangs are unlocked, micro-manage how 'work-for-factions.js' is running by killing off unwanted instances\\n    if (2 in unlockedSFs) {\\n        // Check if we've joined a gang yet. (Never have to check again once we know we're in one)\\n        if (!playerInGang) playerInGang = await getNsDataThroughFile(ns, 'ns.gang.inGang()', null);\\n        rushGang = !options['disable-rush-gangs'] && !playerInGang;\\n        // Detect if a 'work-for-factions.js' instance is running with args that don't match our goal. We aren't too picky,\\n        // (so the player can run with custom args), but should have --crime-focus if (and only if) we're still working towards a gang.\\n        const wrongWork = findScript('work-for-factions.js', !rushGang ? s => s.args.includes(\\\"--crime-focus\\\") :\\n            s => !rushGangsArgs.every(a => s.args.includes(a))); // Require all rushGangsArgs if we're not in a gang yet.\\n        // If running with the wrong args, kill it so we can start it with the desired args\\n        if (wrongWork) await killScript(ns, 'work-for-factions.js', null, wrongWork);\\n\\n        // Start gangs immediately (even though daemon would eventually start it) since we want any income they provide right away after an ascend\\n        // TODO: Consider monitoring gangs territory progress and increasing their budget / decreasing their reserve to help kick-start them\\n        if (playerInGang && !findScript('gangs.js'))\\n            launchScriptHelper(ns, 'gangs.js');\\n    }\\n\\n    // Launch work-for-factions if it isn't already running (rules for maybe killing unproductive instances are above)\\n    // Note: We delay launching our own 'work-for-factions.js' until daemon has warmed up, so we don't steal it's \\\"kickstartHackXp\\\" study focus\\n    if ((4 in unlockedSFs) && !findScript('work-for-factions.js') && Date.now() - daemonStartTime > 30000) {\\n        // If we're trying to rush gangs, run in such a way that we will spend most of our time doing crime, reducing Karma (also okay early income)\\n        // NOTE: Default work-for-factions behaviour is to spend hashes on coding contracts, which suits us fine\\n        launchScriptHelper(ns, 'work-for-factions.js', rushGang ? rushGangsArgs : workForFactionsArgs);\\n    }\\n}\\n\\n/** Logic to steal 10b from the casino\\n * @param {NS} ns \\n * @param {Player} player */\\nasync function maybeDoCasino(ns, player) {\\n    if (ranCasino || options['disable-casino']) return;\\n    const casinoRanFileSet = ns.read(casinoFlagFile);\\n    const cashRootBought = installedAugmentations.includes(`CashRoot Starter Kit`);\\n    // If the casino flag file is already set in first 10 minutes of the reset, and we don't have anywhere near the 10B it should give,\\n    // it's likely a sign that the flag is wrong and we should run cleanup and let casino get run again to be safe.\\n    if (getTimeInAug() < 10 * 60 * 1000 && casinoRanFileSet && player.money + (await getStocksValue(ns)) < 8E9) {\\n        launchScriptHelper(ns, 'cleanup.js');\\n        await ns.sleep(200); // Wait a short while for the dust to settle.\\n    } else if (casinoRanFileSet)\\n        return ranCasino = true;\\n    // If it's been less than 1 minute, wait a while to establish income\\n    // The exception is if we are in BN8 and have CashRoot Starter Kit. In this case we can head straight to the casino.\\n    if (getTimeInAug() < 60000 && !(resetInfo.currentNode == 8 && cashRootBought))\\n        return;\\n    // If we're making more than ~5b / minute, no need to run casino. (Unless BN8, if BN8 we always need casino cash bootstrap)\\n    // Since it's possible that the CashRoot Startker Kit could give a false income velocity, account for that.\\n    if (resetInfo.currentNode != 8 && (cashRootBought ? player.money - 1e6 : player.money) / getTimeInAug() > 5e9 / 60000)\\n        return ranCasino = true;\\n    if (player.money > 10E9) // If we already have 10b, assume we ran and lost track, or just don't need the money\\n        return ranCasino = true;\\n    if (player.money < 250000)\\n        return; // We need at least 200K (and change) to run casino so we can travel to aevum\\n\\n    // Run casino.js (and expect ourself to get killed in the process)\\n    // Make sure \\\"work-for-factions.js\\\" is dead first, lest it steal focus and break the casino script before it has a chance to kill all scripts.\\n    await killScript(ns, 'work-for-factions.js');\\n    // Kill any action, in case we are studying or working out, as it might steal focus or funds before we can bet it at the casino.\\n    if (4 in unlockedSFs) // No big deal if we can't, casino.js has logic to find the stop button and click it.\\n        await getNsDataThroughFile(ns, `ns.singularity.stopAction()`);\\n\\n    const pid = launchScriptHelper(ns, 'casino.js', ['--kill-all-scripts', true, '--on-completion-script', ns.getScriptName()]);\\n    if (pid) {\\n        await waitForProcessToComplete(ns, pid);\\n        await ns.sleep(1000); // Give time for this script to be killed if the game is being restarted by casino.js\\n        // If we didn't get killed, see if casino.js discovered it was already previously kicked out\\n        if (ns.read(casinoFlagFile)) return ranCasino = true;\\n        // Otherwise, something went wrong\\n        log(ns, `ERROR: Something went wrong. Casino.js ran, but we haven't been killed, and the casino flag file \\\"${casinoFlagFile}\\\" isn't set.`)\\n    }\\n}\\n\\n/** Retrieves the last faction manager output file, parses, and types it.\\n * @param {NS} ns \\n * @returns {{ affordable_nf_count: number, affordable_augs: [string], owned_count: number, unowned_count: number, total_rep_cost: number, total_aug_cost: number }}\\n */\\nfunction getFactionManagerOutput(ns) {\\n    const facmanOutput = ns.read(factionManagerOutputFile)\\n    return !facmanOutput ? null : JSON.parse(facmanOutput)\\n}\\n\\n/** Logic to detect if it's a good time to install augmentations, and if so, do so\\n * @param {NS} ns \\n * @param {Player} player */\\nasync function maybeInstallAugmentations(ns, player) {\\n    if (!(4 in unlockedSFs)) {\\n        setStatus(ns, `No singularity access, so you're on your own. You should manually work for factions and install augmentations!`);\\n        return false; // Cannot automate augmentations or installs without singularity\\n    }\\n    // If we previously attempted to reserve money for an augmentation purchase order, do a fresh facman run to ensure it's still available\\n    if (reservedPurchase && installCountdown <= Date.now()) {\\n        log(ns, \\\"INFO: Manually running faction-manager.js to ensure previously reserved purchase is still obtainable.\\\");\\n        ns.write(factionManagerOutputFile, \\\"\\\", \\\"w\\\"); // Reset the output file to ensure it isn't stale\\n        const pid = launchScriptHelper(ns, 'faction-manager.js');\\n        await waitForProcessToComplete(ns, pid, true); // Wait for the script to shut down (and output to be generated)\\n    }\\n\\n    // Grab the latest output from faction manager to see if it's a good time to reset\\n    const facman = getFactionManagerOutput(ns);\\n    if (!facman) {\\n        setStatus(ns, `Faction manager output not available. Will try again later.`);\\n        return reservedPurchase = 0;\\n    }\\n    const affordableAugCount = facman.affordable_augs.length;\\n    playerInstalledAugCount = facman.owned_count;\\n\\n    // Determine whether we can afford enough augmentations to merit a reset\\n    const reducedAugReq = Math.floor(options['reduced-aug-requirement-per-hour'] * getTimeInAug() / 3.6E6);\\n    const augsNeeded = Math.max(1, options['install-at-aug-count'] - reducedAugReq);\\n    const augsNeededInclNf = Math.max(1, options['install-at-aug-plus-nf-count'] - reducedAugReq);\\n    const uniqueAugCount = affordableAugCount - Math.sign(facman.affordable_nf_count); // Don't count NF if included\\n    let totalCost = facman.total_rep_cost + facman.total_aug_cost;\\n    const augSummary = `${uniqueAugCount} of ${facman.unowned_count - 1} remaining augmentations` +\\n        (facman.affordable_nf_count > 0 ? ` + ${facman.affordable_nf_count} levels of NeuroFlux.` : '.') +\\n        (uniqueAugCount > 0 ? `\\\\n  Augs: [\\\\\\\"${facman.affordable_augs.join(\\\"\\\\\\\", \\\\\\\"\\\")}\\\\\\\"]` : '');\\n    let resetStatus = `Reserving ${formatMoney(totalCost)} to install ${augSummary}`\\n    let shouldReset = options['install-for-augs'].some(a => facman.affordable_augs.includes(a)) ||\\n        affordableAugCount >= augsNeeded || (affordableAugCount + facman.affordable_nf_count - 1) >= augsNeededInclNf;\\n    // If we are in Daedalus, and we do not yet have enough favour to unlock rep donations with Daedalus,\\n    // but we DO have enough rep to earn that favor on our next restart, trigger an install immediately (need at least 1 aug)\\n    if (player.factions.includes(\\\"Daedalus\\\") && ns.read(\\\"/Temp/Daedalus-donation-rep-attained.txt\\\")) {\\n        shouldReset = true;\\n        resetStatus = `We have enough reputation with Daedalus to unlock donations on our next reset.\\\\n${resetStatus}`;\\n        if (totalCost == 0) totalCost = 1; // Hack, logic below expects some non-zero reserve in preparation for ascending.\\n    }\\n\\n    // If not ready to reset, set a status with our progress and return\\n    if (!shouldReset) {\\n        setStatus(ns, `Currently at ${formatDuration(getTimeInAug())} since last aug. ` +\\n            `Waiting for ${augsNeeded} new augs (or ${augsNeededInclNf} including NeuroFlux levels) before installing.` +\\n            `\\\\nCan currently get: ${augSummary}` +\\n            `\\\\n  Total Cost: ${formatMoney(totalCost)} (\\\\`run faction-manager.js\\\\` for details)`, augSummary);\\n        return reservedPurchase = 0; // If we were previously reserving money for a purchase, reset that flag now\\n    }\\n    // If we want to reset, but there is a reason to delay, don't reset\\n    if (await shouldDelayInstall(ns, player, facman)) // If we're currently in a state where we should not be resetting, skip reset logic\\n        return reservedPurchase = 0;\\n\\n    // Ensure the money needed for the above augs doesn't get ripped out from under us by reserving it and waiting one more loop\\n    if (reservedPurchase < totalCost) {\\n        if (reservedPurchase != 0) // If we were already reserving for a purchase and the nubmer went up, log a notice of the timer being reset.\\n            log(ns, `INFO: The augmentation purchase we can afford has increased from ${formatMoney(reservedPurchase)} ` +\\n                `to ${formatMoney(totalCost)}. Resetting the timer before we install augmentations.`);\\n        installCountdown = Date.now() + options['install-countdown']; // Each time we can afford more augs, reset the install delay timer\\n        ns.write(\\\"reserve.txt\\\", totalCost, \\\"w\\\"); // Should prevent other scripts from spending this money\\n    }\\n    // We must wait until the configured cooldown elapses before we install augs.\\n    if (installCountdown > Date.now()) {\\n        resetStatus += `\\\\n  Waiting for ${formatDuration(options['install-countdown'])} (--install-countdown) ` +\\n            `to elapse before we install, in case we're close to being able to purchase more augmentations...`;\\n        setStatus(ns, resetStatus);\\n        ns.toast(`Heads up: Autopilot plans to reset in ${formatDuration(installCountdown - Date.now())}`, 'info');\\n        return reservedPurchase = totalCost;\\n    }\\n\\n    // Otherwise, we've got the money reserved, we can afford the augs, we should be confident to ascend\\n    const resetLog = `Invoking ascend.js at ${formatDuration(getTimeInAug()).padEnd(11)} since last aug to install: ${augSummary}`;\\n    persist_log(ns, log(ns, resetLog, true, 'info'));\\n\\n    // Kick off ascend.js\\n    let errLog;\\n    const ascendArgs = ['--install-augmentations', true, '--on-reset-script', ns.getScriptName()]\\n    if (affordableAugCount == 0) // If we know we have 0 augs, but still wish to reset, we must enable soft resetting\\n        ascendArgs.push(\\\"--allow-soft-reset\\\")\\n    let pid = launchScriptHelper(ns, 'ascend.js', ascendArgs);\\n    if (pid) {\\n        await waitForProcessToComplete(ns, pid, true); // Wait for the script to shut down (Ascend should get killed as it does, since the BN will be rebooting)\\n        await ns.sleep(1000); // If we've been scheduled to be killed, awaiting an NS function should trigger it?\\n        errLog = `ERROR: ascend.js ran, but we're still here. Something must have gone wrong. Will try again later`;\\n    } else\\n        errLog = `ERROR: Failed to launch ascend.js (pid == 0). Will try again later`;\\n    // If we got this far, something went wrong\\n    persist_log(ns, log(ns, errLog, true, 'error'));\\n}\\n\\n/** Logic to detect if we are close to a milestone and should postpone installing augmentations until it is hit\\n * @param {NS} ns \\n * @param {Player} player\\n * @param {{ affordable_nf_count: number, affordable_augs: [string], owned_count: number, unowned_count: number, total_rep_cost: number, total_aug_cost: number }} facmanOutput\\n*/\\nasync function shouldDelayInstall(ns, player, facmanOutput) {\\n    // Are we close to being able to afford 4S TIX data?\\n    if (!options['disable-wait-for-4s'] && !(await getNsDataThroughFile(ns, `ns.stock.has4SDataTIXAPI()`))) {\\n        const totalWorth = player.money + await getStocksValue(ns);\\n        const has4S = await getNsDataThroughFile(ns, `ns.stock.has4SData()`);\\n        const totalCost = 25E9 * (bitnodeMults?.FourSigmaMarketDataApiCost || 1) +\\n            (has4S ? 0 : 1E9 * (bitnodeMults?.FourSigmaMarketDataCost || 1));\\n        const ratio = totalWorth / totalCost;\\n        // If we're e.g. 50% of the way there, hold off, regardless of the '--wait-for-4s' setting\\n        // TODO: If ratio is > 1, we can afford it - but stockmaster won't buy until it has e.g. 20% more than the cost\\n        //       (so it still has money to invest). It doesn't know we want to restart ASAP. Perhaps we should purchase ourselves?\\n        if (ratio >= options['wait-for-4s-threshold']) {\\n            setStatus(ns, `Not installing until scripts purchase the 4SDataTixApi because we have ` +\\n                `${(100 * totalWorth / totalCost).toFixed(0)}% of the cost (controlled by --wait-for-4s-threshold)`);\\n            return true;\\n        }\\n    }\\n    // In BN8, money is hard to come by, so if we're in Daedalus, but can't access TRP rep yet, wait until we have\\n    // enough rep, or enough money to donate for rep to buy TRP (Reminder: donations always unlocked in BN8)\\n    if (resetInfo.currentNode == 8 && player.factions.includes(\\\"Daedalus\\\") && (wdHack || 0) == 0) {\\n        // Sanity check, ensure the player hasn't manually purchased (but not yet installed) TRP\\n        const ownedAugmentations = await getNsDataThroughFile(ns, `ns.singularity.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n        if (!facmanOutput.affordable_augs.includes(\\\"The Red Pill\\\") && !ownedAugmentations.includes(\\\"The Red Pill\\\")) {\\n            setStatus(ns, `Not installing until we have enough Daedalus rep to install TRP on our next reset.`)\\n            return true;\\n        }\\n    }\\n    // TODO: Bladeburner black-op in progress\\n    // TODO: Close to the rep needed for unlocking donations with a new faction?\\n    return false;\\n}\\n\\n/** Consolidated logic for all the times we want to reserve money\\n * @param {NS} ns \\n * @param {Player} player */\\nfunction manageReservedMoney(ns, player, stocksValue) {\\n    if (reservedPurchase) return; // Do not mess with money reserved for installing augmentations\\n    const currentReserve = Number(ns.read(\\\"reserve.txt\\\") || 0);\\n    if (reserveForDaedalus) // Reserve 100b to get the daedalus invite\\n        return currentReserve == 100E9 ? true : ns.write(\\\"reserve.txt\\\", 100E9, \\\"w\\\");\\n    // Otherwise, reserve money for stocks for a while, as it's our main source of income early in the BN\\n    // It also acts as a decent way to save up for augmentations\\n    const minStockValue = 8E9; // At a minimum 8 of the 10 billion earned from the casino must be reserved for buying stock\\n    // As we earn more money, reserve a percentage of it for further investing in stock. Decrease this as the BN progresses.\\n    const minStockPercent = Math.max(0, 0.8 - 0.1 * getTimeInBitnode() / 3.6E6); // Reduce by 10% per hour in the BN\\n    const reserveCap = 1E12; // As we start start to earn crazy money, we will hit the stock market cap, so cap the maximum reserve\\n    // Dynamically update reserved cash based on how much money is already converted to stocks.\\n    const reserve = Math.min(reserveCap, Math.max(0, player.money * minStockPercent, minStockValue - stocksValue));\\n    return currentReserve == reserve ? true : ns.write(\\\"reserve.txt\\\", reserve, \\\"w\\\"); // Reserve for stocks\\n    // NOTE: After several iterations, I decided that the above is actually best to keep in all scenarios:\\n    // - Casino.js ignores the reserve, so the above takes care of ensuring our casino seed money isn't spent\\n    // - In low-income situations, stockmaster will be our best source of income. We invoke it such that it ignores \\n    //\\t the global reserve, so this 8B is for stocks only. The 2B remaining is plenty to kickstart the rest.\\n    // - Once high-hack/gang income is achieved, this 8B will not be missed anyway. \\n    /*\\n    if(!ranCasino) { // In practice, \\n        ns.write(\\\"reserve.txt\\\", 300000, \\\"w\\\"); // Prevent other scripts from spending our casino seed money\\n        return moneyReserved = true;\\n    }\\n    // Otherwise, clear any reserve we previously had\\n    if(moneyReserved) ns.write(\\\"reserve.txt\\\", 0, \\\"w\\\"); // Remove the casino reserve we would have placed\\n    return moneyReserved = false;\\n    */\\n}\\n\\n/** Helper to launch a script and log whether if it succeeded or failed\\n * @param {NS} ns */\\nfunction launchScriptHelper(ns, baseScriptName, args = [], convertFileName = true) {\\n    ns.tail(); // If we're going to be launching scripts, show our tail window so that we can easily be killed if the user wants to interrupt.\\n    let pid, err;\\n    try { pid = ns.run(convertFileName ? getFilePath(baseScriptName) : baseScriptName, 1, ...args); }\\n    catch (e) { err = e; }\\n    if (pid)\\n        log(ns, `INFO: Launched ${baseScriptName} (pid: ${pid}) with args: [${args.join(\\\", \\\")}]`, true);\\n    else\\n        log(ns, `ERROR: Failed to launch ${baseScriptName} with args: [${args.join(\\\", \\\")}]` +\\n            err ? `\\\\nCaught: ` + (typeof err === 'string' ? err : err.message || JSON.stringify(err)) : '', true, 'error');\\n    return pid;\\n}\\n\\nlet lastStatusLog = \\\"\\\"; // The current or last-assigned long-term status (what this script is waiting to happen)\\n\\n/** Helper to set a global status and print it if it changes\\n * @param {NS} ns */\\nfunction setStatus(ns, status, uniquePart = null) {\\n    uniquePart = uniquePart || status; // Can be used to consider a logs \\\"the same\\\" (not worth re-printing) even if they have some different text\\n    if (lastStatusLog == uniquePart) return;\\n    lastStatusLog = uniquePart\\n    log(ns, status);\\n}\\n\\n/** Append the specified text (with timestamp) to a persistent log in the home directory\\n * @param {NS} ns */\\nfunction persist_log(ns, text) {\\n    ns.write(persistentLog, `${(new Date()).toISOString().substring(0, 19)} ${text}\\\\n`, \\\"a\\\")\\n}\",\"filename\":\"autopilot.js\",\"server\":\"home\"}}],[\"bladeburner.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log, disableLogs, getConfiguration, instanceCount, getNsDataThroughFile, getFilePath, getActiveSourceFiles, formatNumberShort, formatDuration } from './helpers.js'\\n\\nconst cityNames = [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Volhaven\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"];\\nconst antiChaosOperation = \\\"Stealth Retirement Operation\\\"; // Note: Faster and more effective than Diplomacy at reducing city chaos\\nconst simulacrumAugName = \\\"The Blade's Simulacrum\\\"; // This augmentation lets you do bladeburner actions while busy\\n\\n// In general, we will buy the skill upgrade with the next highest cost, but to tweak the priority of various skills,\\n// we use the following configuration to change their relative cost. Higher number means lower priority\\n// Note: Ideally we could emphasize Tracer \\\"early-game\\\" and Digital Observer \\\"late-game\\\", but this is too much of a pain to solve for\\nconst costAdjustments = {\\n    \\\"Overclock\\\": 0.8, // Speed up contracts/operations. More important now that sleeves remove the operation count bottleneck\\n    \\\"Reaper\\\": 1.2, // Combat boost. Early effect is paltry (because stats are so low), will get plenty of points late game\\n    \\\"Evasive Systems\\\": 1.2, // Dex/Agi boost. Mildly deprioritized for same reasoning as above.\\n    \\\"Cloak\\\": 1.5, // Cheap, and stealth ends up with plenty of boost, so we don't need to invest in Cloak as much.\\n    \\\"Hyperdrive\\\": 2, // Improves stats gained, but not Rank gained. Less useful if training outside of BB\\n    \\\"Tracer\\\": 2, // Only boosts Contract success chance, which are relatively easy to begin with. \\n    \\\"Cyber's Edge\\\": 5, // Boosts stamina, but contract counts are much more limiting than stamina, so isn't really needed\\n    \\\"Hands of Midas\\\": 10 // Improves money gain. It is assumed that Bladeburner will *not* be a main source of income\\n};\\n\\n// Some bladeburner info gathered at startup and cached\\nlet skillNames, generalActionNames, contractNames, operationNames, remainingBlackOpsNames, blackOpsRanks;\\nlet inFaction, haveSimulacrum, lastBlackOpComplete, lowStaminaTriggered, timesTrained, currentTaskEndTime, maxRankNeeded, lastAssignedTask;\\nlet ownedSourceFiles;\\nlet player = (/**@returns{Player}*/() => undefined)();\\nlet resetInfo = (/**@returns{ResetInfo}*/() => undefined)(); // Information about the current bitnode\\nlet options;\\n\\nconst argsSchema = [\\n    ['success-threshold', 0.99], // Attempt the best action whose minimum chance of success exceeds this threshold\\n    ['chaos-recovery-threshold', 50], // Prefer to do \\\"Stealth Retirement\\\" operations to reduce chaos when it reaches this number\\n    ['max-chaos', 100], // If chaos exceeds this amount in every city, we will reluctantly resort to diplomacy to reduce it.\\n    ['toast-upgrades', false], // Set to true to toast each time a skill is upgraded\\n    ['toast-operations', false], // Set to true to toast each time we switch operations\\n    ['toast-relocations', false], // Set to true to toast each time we change cities\\n    ['low-stamina-pct', 0.5], // Switch to no-stamina actions when we drop below this stamina percent\\n    ['high-stamina-pct', 0.6], // Switch back to stamina-consuming actions when we rise above this stamina percent\\n    ['training-limit', 50], // Don't bother training more than this many times, since Training is slow and earns no rank\\n    ['update-interval', 2000], // How often to refresh bladeburner status\\n    ['ignore-busy-status', false], // If set to true, we will attempt to do bladeburner tasks even if we are currently busy and don't have The Blade's Simulacrum\\n    ['allow-raiding-highest-pop-city', false], // Set to true, we will allow Raid to be used even in our highest-population city (disabled by default)\\n    ['reserved-action-count', 200], // Some operation types are \\\"reserved\\\" for chaos reduction / population estimate increase. Start by reserving this many, reduced automatically as we approach maxRankNeeded\\n    ['disable-spending-hashes', false], // Set to true to not spawn spend-hacknet-hashes.js to spend hashes on bladeburner\\n];\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions || await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n    disableLogs(ns, ['sleep'])\\n    player = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n    resetInfo = await getNsDataThroughFile(ns, 'ns.getResetInfo()');\\n    // Ensure we have access to bladeburner\\n    ownedSourceFiles = await getActiveSourceFiles(ns);\\n    //if (!(6 in ownedSourceFiles) && resetInfo.currentNode != 7) // NOTE: Despite the SF6 description, it seems you don't need SF6\\n    //    return log(ns, \\\"ERROR: You have not yet unlocked bladeburner outside of BNs 6 & 7 (need SF6)\\\", true, 'error');\\n    if (!(7 in ownedSourceFiles))\\n        return log(ns, \\\"ERROR: You have not yet unlocked the bladeburner API (need SF7 or to be in BN7)\\\", true, 'error');\\n    if (resetInfo.currentNode == 8)\\n        return log(ns, \\\"ERROR: Bladeburner is completely disabled in Bitnode 8 :`(\\\\nHappy stonking\\\", true, 'error');\\n    // Ensure we've joined bladeburners before proceeding further\\n    await beingInBladeburner(ns);\\n    // Gather one-time info such as contract and operation names\\n    await gatherBladeburnerInfo(ns);\\n    // Start the main loop which monitors stats and changes activities as needed\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) {\\n            log(ns, `WARNING: bladeburner.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        const nextTaskComplete = currentTaskEndTime - Date.now();\\n        await ns.sleep(Math.min(options['update-interval'], nextTaskComplete > 0 ? nextTaskComplete : Number.MAX_VALUE));\\n    }\\n}\\n\\n// Calculate how long we've been in the current bitnode\\nfunction getTimeInBitnode() { return Date.now() - resetInfo.lastNodeReset; }\\n\\n// Ram dodging helper to execute a parameterless bladeburner function\\nconst getBBInfo = async (ns, strFunction, ...args) =>\\n    await getNsDataThroughFile(ns, `ns.bladeburner.${strFunction}`, null, args);\\n// Ram-dodging helper to get information for each item in a list (bit hacky). Temp script will be created such that\\n// the first argument recieved is an array of values to map, and any additional arguments are appended afterwards.\\n// The strFunction should contain a '%' sign indicating where the elements from the list should be mapped to a single call.\\nconst getBBDict = async (ns, strFunction, elements, ...args) => await getNsDataThroughFile(ns,\\n    `Object.fromEntries(JSON.parse(ns.args[0]).map(e => [e, ns.bladeburner.${strFunction.replace('%', 'e')}]))`,\\n    `/Temp/bladeburner-${strFunction.split('(')[0]}-all.txt`, [JSON.stringify(elements), ...args]);\\n// Helper for dual-parameter bladeburner functions e.g. getActionCountRemaining(actionType, action)\\nconst getBBDictByActionType = async (ns, strFunction, actionType, elements) =>\\n    await getBBDict(ns, `${strFunction}(ns.args[1], %)`, elements, actionType);\\n\\n/** @param {NS} ns \\n * Gather all one-time bladeburner info using ram-dodging scripts. */\\nasync function gatherBladeburnerInfo(ns) {\\n    skillNames = await getBBInfo(ns, 'getSkillNames()');\\n    generalActionNames = await getBBInfo(ns, 'getGeneralActionNames()');\\n    contractNames = (await getBBInfo(ns, 'getContractNames()')).reverse(); // Reversed to put in order of highest rep to lowest\\n    operationNames = (await getBBInfo(ns, 'getOperationNames()')).reverse(); // Reversed to put in order of highest rep to lowest\\n    // Blackops data is a bit special, each can be completed one time, they should be done in order\\n    const blackOpsNames = await getBBInfo(ns, 'getBlackOpNames()');\\n    blackOpsRanks = await getBBDict(ns, 'getBlackOpRank(%)', blackOpsNames);\\n    const blackOpsToBeDone = await getBBDictByActionType(ns, 'getActionCountRemaining', \\\"blackops\\\", blackOpsNames);\\n    remainingBlackOpsNames = blackOpsNames.filter(n => blackOpsToBeDone[n] === 1)\\n        .sort((b1, b2) => blackOpsRanks[b1] - blackOpsRanks[b2]);\\n    log(ns, `There are ${remainingBlackOpsNames.length} remaining BlackOps operations to complete in order:\\\\n` +\\n        remainingBlackOpsNames.map(n => `${n} (${blackOpsRanks[n]})`).join(\\\", \\\"));\\n    maxRankNeeded = blackOpsRanks[remainingBlackOpsNames[remainingBlackOpsNames.length - 1]];\\n    // Check if we have the aug that lets us do bladeburner while otherwise busy\\n    haveSimulacrum = !(4 in ownedSourceFiles) ? true : // If player doesn't have SF4, we cannot check, so hope for the best.\\n        await getNsDataThroughFile(ns, `ns.singularity.getOwnedAugmentations().includes(\\\"${simulacrumAugName}\\\")`, '/Temp/bladeburner-hasSimulacrum.txt');\\n    // Initialize some flags that may change over time\\n    lastAssignedTask = null;\\n    lastBlackOpComplete = false; // Flag will track whether we've notified the user that the last black-op is ready\\n    lowStaminaTriggered = false; // Flag will track whether we've previously switched to stamina recovery to reduce noise\\n    timesTrained = 0; // Count of how many times we've trained (capped at --training-limit)\\n    currentTaskEndTime = 0; // When set to a date, we will not assign new tasks until that date.\\n    inFaction = player.factions.includes(\\\"Bladeburners\\\"); // Whether we've joined the Bladeburner faction yet\\n}\\n\\n// Helpers to determine the the dict keys with the lowest/highest value (returns an array [key, minValue] for destructuring)\\nconst getMinKeyValue = (dict, filteredKeys = null) => (filteredKeys || Object.keys(dict)).reduce(([k, min], key) =>\\n    dict[key] < min ? [key, dict[key]] : [k, min], [null, Number.MAX_VALUE]);\\nconst getMaxKeyValue = (dict, filteredKeys = null) => (filteredKeys || Object.keys(dict)).reduce(([k, max], key) =>\\n    dict[key] > max ? [key, dict[key]] : [k, max], [null, -Number.MAX_VALUE]);\\n\\n/** @param {NS} ns \\n * The main loop that decides what we should be doing in bladeburner. */\\nasync function mainLoop(ns) {\\n    // Get player's updated rank\\n    const rank = await getBBInfo(ns, 'getRank()');\\n    // Ensure we're in the bladeburner faction ASAP\\n    if (!inFaction) await tryJoinFaction(ns, rank);\\n    // Spend any un-spent skill points\\n    await spendSkillPoints(ns);\\n    // See if we are able to do bladeburner work\\n    if (!(await canDoBladeburnerWork(ns))) return;\\n\\n    // NEXT STEP: Gather data needed to determine what and where to work\\n    // If any blackops have been completed, remove them from the list of remaining blackops\\n    const blackOpsToBeDone = await getBBDictByActionType(ns, 'getActionCountRemaining', \\\"blackops\\\", remainingBlackOpsNames);\\n    remainingBlackOpsNames = remainingBlackOpsNames.filter(n => blackOpsToBeDone[n] === 1);\\n    const nextBlackOp = remainingBlackOpsNames.length === 0 ? null : remainingBlackOpsNames[0];\\n    // If we have completed the last bladeburner operation notify the user that they can leave the BN\\n    if (nextBlackOp == null && !lastBlackOpComplete) {\\n        const msg = `Bladeburner has completed the last BlackOp! (At ${formatDuration(getTimeInBitnode())}). ` +\\n            `You can destroy the Bitnode on the Bladeburner > BlackOps tab.`;\\n        log(ns, `SUCCESS: ${msg}`, true, 'success');\\n        ns.alert(msg);\\n        lastBlackOpComplete = true;\\n    }\\n\\n    // Gather the count of available contracts / operations\\n    const contractCounts = await getBBDictByActionType(ns, 'getActionCountRemaining', \\\"contract\\\", contractNames);\\n    const operationCounts = await getBBDictByActionType(ns, 'getActionCountRemaining', \\\"operation\\\", operationNames);\\n    // Define a helper that gets the count for an action based only on the name (type is auto-determined)\\n    const getCount = actionName => contractNames.includes(actionName) ? contractCounts[actionName] :\\n        operationNames.includes(actionName) ? operationCounts[actionName] :\\n            generalActionNames.includes(actionName) ? Number.POSITIVE_INFINITY :\\n                remainingBlackOpsNames.includes(actionName) ? 1 : 0;\\n    // Create some quick-reference collections of action names that are limited in count and/or reserved for special purpose\\n    const limitedActions = operationNames.concat(contractNames);\\n    if (nextBlackOp) limitedActions.unshift(nextBlackOp);\\n    const populationActions = [\\\"Undercover Operation\\\", \\\"Investigation\\\", \\\"Tracking\\\"];\\n    const reservedActions = [\\\"Raid\\\", \\\"Stealth Retirement Operation\\\"].concat(populationActions\\n        // Only reserve these actions if their count is below the configured reserve amount, scaled down as we approach our final rank (stop reserving at 99% of max rank)\\n        .filter(a => getCount(a) <= (options['reserved-action-count'] * (1 - rank / (0.99 * maxRankNeeded)))));\\n    if (nextBlackOp && rank < blackOpsRanks[nextBlackOp]) reservedActions.push(nextBlackOp); // Remove blackop from \\\"available actions\\\" if we have insufficient rank.\\n    const unreservedActions = limitedActions.filter(o => !reservedActions.includes(o));\\n    //log(ns, 'Unreserved Action Counts: ' + unreservedActions.map(a => `${a}: ${getCount(a)}`).join(\\\", \\\")); // Debug log to see what unreserved actions remain\\n    //log(ns, 'Reserved Action Counts: ' + reservedActions.map(a => `${a}: ${getCount(a)}`).join(\\\", \\\")); // Debug log to see what unreserved actions remain\\n\\n    // NEXT STEP: Determine which city to work in\\n    // Get the population, communities, and chaos in each city\\n    const populationByCity = await getBBDict(ns, 'getCityEstimatedPopulation(%)', cityNames);\\n    const communitiesByCity = await getBBDict(ns, 'getCityCommunities(%)', cityNames);\\n    const chaosByCity = await getBBDict(ns, 'getCityChaos(%)', cityNames);\\n    let goToCity, population, travelReason, goingRaiding = false;\\n\\n    // SPECIAL CASE: GO TO LOWEST-POPULATION CITY\\n    // If the only operations left to us are \\\"Raid\\\" (reduces population by a %, which, counter-intuitively, is bad for us),\\n    // thrash the city with the lowest population (but still having some communities to enable Raid).\\n    if (getCount(\\\"Raid\\\") > 0 && unreservedActions.every(c => getCount(c) == 0)) {\\n        const raidableCities = cityNames.filter(c => communitiesByCity[c] > 0); // Cities with at least one community\\n        // Only allow Raid if we would not be raiding our highest-population city (need to maintain at least one)\\n        const [highestPopCity, _] = getMaxKeyValue(populationByCity, cityNames);\\n        goingRaiding = raidableCities.length > 0 && (raidableCities[0] != highestPopCity || options['allow-raiding-highest-pop-city']);\\n        if (goingRaiding) { // Select the raid-able city with the smallest population\\n            [goToCity, population] = getMinKeyValue(populationByCity, raidableCities);\\n            travelReason = `Lowest population (${formatNumberShort(population)}) city with communities (${communitiesByCity[goToCity]}) to use up ${getCount(\\\"Raid\\\")} Raid operations`;\\n        }// else log(ns, `INFO: Cannot use up raid operations because there are ${raidableCities.length} cities with communities. ` +\\n        //    `(--allow-raiding-highest-pop-city is set to ${options['allow-raiding-highest-pop-city']})`);\\n    }\\n    // SPECIAL CASE: GO TO HIGHEST-CHAOS CITY\\n    if (!goToCity && unreservedActions.every(c => getCount(c) == 0)) {\\n        let [maxChaosCity, maxChaos] = getMaxKeyValue(chaosByCity, cityNames);\\n        // If all we have left is \\\"Stealth Retirement Operation\\\", switch to the city with the most chaos (if it's a decent amount), and use them up.\\n        if (getCount(\\\"Stealth Retirement Operation\\\") && maxChaos > options['chaos-recovery-threshold']) {\\n            goToCity = maxChaosCity;\\n            travelReason = `Highest-chaos (${maxChaos.toFixed(1)}) city to use up Stealth Retirement Operations`;\\n        } else if (maxChaos > options['max-chaos']) {\\n            goToCity = maxChaosCity;\\n            travelReason = `Nothing better to do, and city chaos ${maxChaos.toFixed(1)} is above --max-chaos threshold ${options['max-chaos']} - should use Diplomacy`;\\n        }\\n    } // Also, if we have nothing to do (even no Stealth Retirement), but chaos is above 'max-chaos' in some city, switch to it to do Diplomacy\\n\\n    // GENERAL CASE: GO TO HIGHEST-POPULATION CITY\\n    if (!goToCity) { // Otherwise, cities with higher populations give better operation chances\\n        // Try to narrow down the cities we wish to work in to the ones with no chaos penalties\\n        let acceptableCities = cityNames.filter(city => chaosByCity[city] <= options['chaos-recovery-threshold']);\\n        // Pick the city (within chaos thresholds) with the highest population to maximize success chance.\\n        // If no city is within thresholds, the largest population city will be picked regardless of chaos\\n        [goToCity, population] = getMaxKeyValue(populationByCity, acceptableCities.length > 0 ? acceptableCities : cityNames);\\n        travelReason = `Highest population (${formatNumberShort(population)}) city, with chaos ${chaosByCity[goToCity].toFixed(1)}` +\\n            (acceptableCities.length == 0 ? ` (all cities above chaos threshold of ${options['chaos-recovery-threshold']})` : '');\\n    }\\n\\n    let currentCity = await getBBInfo(ns, 'getCity()');\\n    // Change cities if we aren't blocked on our last task, and found a better city to work in\\n    if (currentCity != goToCity && Date.now() > currentTaskEndTime && (await switchToCity(ns, goToCity, travelReason)))\\n        currentCity = goToCity;\\n\\n    // Gather the success chance of contracts (based on our current city)\\n    const contractChances = await getBBDictByActionType(ns, 'getActionEstimatedSuccessChance', \\\"contract\\\", contractNames);\\n    const operationChances = await getBBDictByActionType(ns, 'getActionEstimatedSuccessChance', \\\"operation\\\", operationNames);\\n    const blackOpsChance = nextBlackOp === null || rank < blackOpsRanks[nextBlackOp] ? [0, 0] : // Insufficient rank for blackops means chance is zero\\n        (await getBBDictByActionType(ns, 'getActionEstimatedSuccessChance', \\\"blackops\\\", [nextBlackOp]))[nextBlackOp];\\n    // Define some helpers for determining min/max chance for each action\\n    const getChance = actionName => contractNames.includes(actionName) ? contractChances[actionName] :\\n        operationNames.includes(actionName) ? operationChances[actionName] :\\n            generalActionNames.includes(actionName) ? [1, 1] : nextBlackOp == actionName ? blackOpsChance : [0, 0];\\n    const minChance = actionName => getChance(actionName)[0];\\n    const maxChance = actionName => getChance(actionName)[1];\\n\\n    // NEXT STEP: Pick the action we should be working on.\\n    let bestActionName, reason;\\n    const actionSummaryString = (action) => `Success Chance: ${(100 * minChance(action)).toFixed(1)}%` +\\n        (maxChance(action) - minChance(action) < 0.001 ? '' : ` to ${(100 * maxChance(action)).toFixed(1)}%`) + `, Remaining: ${getCount(action)}`\\n\\n    // Trigger stamina recovery if we drop below our --low-stamina-pct configuration, and remain trigered until we've recovered to --high-stamina-pct\\n    const stamina = await getBBInfo(ns, `getStamina()`); // Returns [current, max];\\n    const staminaPct = stamina[0] / stamina[1];\\n    lowStaminaTriggered = staminaPct < options['low-stamina-pct'] || lowStaminaTriggered && staminaPct < options['high-stamina-pct'];\\n    // If we are suffering a stamina penalty, perform an action that consumes no stamina\\n    if (lowStaminaTriggered) {\\n        bestActionName = chaosByCity[currentCity] > options['max-chaos'] ? \\\"Diplomacy\\\" : \\\"Field Analysis\\\";\\n        reason = `Stamina is low: ${(100 * staminaPct).toFixed(1)}% < ${(100 * options['low-stamina-pct']).toFixed(1)}%`\\n    } // If current city chaos is greater than our threshold, keep it low with \\\"Stealth Retirement\\\" if odds are good\\n    else if (chaosByCity[currentCity] > options['chaos-recovery-threshold'] && getCount(antiChaosOperation) > 0 && minChance(antiChaosOperation) > 0.99) {\\n        bestActionName = antiChaosOperation;\\n        reason = `Chaos is high: ${chaosByCity[currentCity].toFixed(2)} > ${options['chaos-recovery-threshold']} (--chaos-recovery-threshold) ${actionSummaryString(bestActionName)}`;\\n    } // If current city chaos is very high, we should be very wary of the snowballing effects, and try to reduce it.\\n    else if (chaosByCity[currentCity] > options['max-chaos']) {\\n        bestActionName = getCount(antiChaosOperation) > 0 && minChance(antiChaosOperation) > 0.8 ? antiChaosOperation : \\\"Diplomacy\\\";\\n        reason = `Out of ${antiChaosOperation}s, and chaos ${chaosByCity[currentCity].toFixed(2)} is higher than --max-chaos ${options['max-chaos']}`;\\n    } // If we've previously detemined we will be raiding the lowest-population city\\n    else if (goingRaiding && maxChance(\\\"Raid\\\") > options['success-threshold']) { // Special-case: Ignore min-chance. Population estimate turns bad as we decimate it, but doesn't seem to affect success.\\n        bestActionName = \\\"Raid\\\";\\n        reason = `Only remaining Operations. ${actionSummaryString(bestActionName)}`;\\n    } else { // Otherwise, pick the \\\"highest-tier\\\" action we can confidently perform, which should lead to the fastest rep-gain.\\n        // Note: Candidate actions will be maintained in order of highest-rep to lowest-rep earning, so we can pick the first after filtering.\\n        let candidateActions = limitedActions;\\n        // We should deal with population uncertainty if its causing some mission to be on the verge of our success threshold\\n        let populationUncertain = candidateActions.some(a => maxChance(a) > options['success-threshold'] && minChance(a) < options['success-threshold']);\\n        // If current population uncertainty is such that some actions have a maxChance of ~100%, but not a minChance of ~100%,\\n        //   focus on actions that improve the population estimate, otherwise, reserve these actions for later\\n        // TODO: \\\"Field Analysis\\\" is the only population action that scales with player stats, so we should calculate and sort by\\n        //       \\\"effectiveness per second\\\" of each and see which is the most worthwhile way of improving the population estimate.\\n        candidateActions = populationUncertain ? populationActions : unreservedActions;\\n        // Filter out candidates with no contract counts remaining\\n        candidateActions = candidateActions.filter(a => getCount(a) > 0);\\n        //log(ns, `The following actions are available: ${candidateActions}`); // Debug log to see what candidate actions are\\n\\n        // Pick the first candidate action with a minimum chance of success that exceeds our --success-threshold\\n        if (!populationUncertain)\\n            bestActionName = candidateActions.filter(a => minChance(a) > options['success-threshold'])[0];\\n        else // Special case for when population uncertainty is high - proceed so long as max chance is high enough\\n            bestActionName = candidateActions.filter(a => maxChance(a) > options['success-threshold'])[0];\\n\\n        if (!bestActionName) // If there were none, allow us to fall-back to an action with a minimum chance >50%, and maximum chance > threshold\\n            bestActionName = candidateActions.filter(a => minChance(a) > 0.5 && maxChance(a) > options['success-threshold'])[0];\\n        if (bestActionName) // If we found something to do, log details about its success chance range\\n            reason = actionSummaryString(bestActionName);\\n\\n        // If there were no operations/contracts, resort to a \\\"general action\\\" which always have 100% chance, but take longer and gives less reward\\n        if (!bestActionName) {\\n            if (populationUncertain) { // Lower population uncertainty\\n                bestActionName = \\\"Field Analysis\\\";\\n                reason = `High population uncertainty in ${currentCity}`;\\n            } // If all (non-reserved) operation counts are 0, and chaos isn't too high, Incite Violence to get more work (logic above should subsequently reduce chaos)\\n            else if (unreservedActions.every(a => getCount(a) == 0) && cityNames.every(c => chaosByCity[c] < options['max-chaos'])) {\\n                bestActionName = \\\"Incite Violence\\\";\\n                let [maxChaosCity, maxChaos] = getMaxKeyValue(chaosByCity, cityNames);\\n                reason = `No work available, and max city chaos is ${maxChaos.toFixed(1)} in ${maxChaosCity}, ` +\\n                    `which is less than --max-chaos threshold ${options['max-chaos']}`;\\n            } // Otherwise, consider training\\n            else if (unreservedActions.some(a => maxChance(a) < options['success-threshold']) && // Only if we aren't at 100% chance for everything\\n                staminaPct > options['high-stamina-pct'] && timesTrained < options['training-limit']) { // Only if we have plenty of stamina and have barely trained\\n                timesTrained += options['update-interval'] / 30000; // Take into account the training time (30 seconds) vs how often this code is called\\n                bestActionName = \\\"Training\\\";\\n                reason = `Nothing better to do, times trained (${timesTrained.toFixed(0)}) < --training-limit (${options['training-limit']}), and ` +\\n                    `actions are below success threshold: ` + unreservedActions.filter(a => maxChance(a) < options['success-threshold'])\\n                        .map(a => `${a} (${(100 * maxChance(a)).toFixed(1)}%)`).join(\\\", \\\");\\n            } else { // Otherwise, Field Analysis\\n                bestActionName = \\\"Field Analysis\\\"; // Gives a little rank, and improves population estimate. Best we can do when there's nothing else.\\n                reason = `Nothing better to do`;\\n            }\\n        }\\n        // NOTE: We never \\\"Recruit\\\". Community consensus is that team mates die too readily, and have minimal impact on success.\\n        // NOTE: We don't use the \\\"Hyperbolic Regeneration Chamber\\\". We are cautious enough that we should never need healing.\\n    }\\n\\n    // Detect our current action (API returns an object like { \\\"type\\\":\\\"Operation\\\", \\\"name\\\":\\\"Investigation\\\" })\\n    const currentAction = await getBBInfo(ns, `getCurrentAction()`);\\n    // Special case: If the user has manually kicked off the last BlackOps, don't interrupt it, let it be our last task\\n    if (currentAction?.name == remainingBlackOpsNames[remainingBlackOpsNames - 1]) lastAssignedTask = currentAction;\\n    // Warn the user if it looks like a task was interrupted by something else (user activity or bladeburner automation). Ignore if our last assigned task has run out of actions.\\n    if (lastAssignedTask && lastAssignedTask != currentAction?.name && getCount(lastAssignedTask) > 0) {\\n        log(ns, `WARNING: The last task this script assigned was \\\"${lastAssignedTask}\\\", but you're now doing \\\"${currentAction?.name || '(nothing)'}\\\". ` +\\n            `Have you been using Bladeburner Automation? If so, try typing \\\"automate dis\\\" in the Bladeburner Console.`, false, 'warning');\\n    } else if (currentAction?.name) {\\n        const currentDuration = await getBBInfo(ns, `getActionTime(ns.args[0], ns.args[1])`, currentAction.type, currentAction.name);\\n        if (!lastAssignedTask) { // Leave a log acknowledging if we just started up and there was an activity already underway.\\n            log(ns, `INFO: At startup, Bladeburner was already doing \\\"${currentAction?.name}\\\", ` +\\n                (bestActionName != currentAction.name ? `but we would prefer to do \\\"${bestActionName}\\\", so we will be switching.` :\\n                    `which is what we were planning to do, so we will leave the current task alone.`));\\n            lastAssignedTask = bestActionName;\\n        }\\n        // Normally, we don't switch tasks if our previously assigned task hasn't had time to complete once.\\n        // EXCEPTION: Early after a reset, this time is LONG, and in a few seconds it may be faster to just stop and restart it.\\n        if (currentDuration < currentTaskEndTime - Date.now()) {\\n            log(ns, `INFO: ${bestActionName == currentAction.name ? 'Restarting' : 'Cancelling'} action \\\"${currentAction.name}\\\" because its new duration ` +\\n                `is less than the time remaining (${formatDuration(currentDuration)} < ${formatDuration(currentTaskEndTime - Date.now())})`);\\n        } else if (Date.now() < currentTaskEndTime || bestActionName == currentAction.name) return;\\n    } // Otherwise prior action was stopped or ended and no count remain, so we should start a new one regardless of expected currentTaskEndTime\\n\\n    // Change actions if we're not currently doing the desired action\\n    const bestActionType = nextBlackOp == bestActionName ? \\\"Black Op\\\" : contractNames.includes(bestActionName) ? \\\"Contract\\\" :\\n        operationNames.includes(bestActionName) ? \\\"Operation\\\" : \\\"General Action\\\";\\n    const success = await getBBInfo(ns, `startAction(ns.args[0], ns.args[1])`, bestActionType, bestActionName);\\n    const expectedDuration = await getBBInfo(ns, `getActionTime(ns.args[0], ns.args[1])`, bestActionType, bestActionName);\\n    log(ns, (success ? `INFO: Switched to Bladeburner ${bestActionType} \\\"${bestActionName}\\\" (${reason}). ETA: ${formatDuration(expectedDuration)}` :\\n        `ERROR: Failed to switch to Bladeburner ${bestActionType} \\\"${bestActionName}\\\" (Count: ${getCount(bestActionName)}, ` +\\n        `ETA: ${formatDuration(expectedDuration)}, Details: ${reason})`),\\n        !success, success ? (options['toast-operations'] ? 'info' : undefined) : 'error');\\n    // Ensure we perform this new action at least once before interrupting it\\n    lastAssignedTask = bestActionName;\\n    currentTaskEndTime = !success ? 0 : Date.now() + expectedDuration + 10; // Pad this a little to ensure we don't interrupt it.\\n}\\n\\n/** @param {NS} ns \\n * Helper to switch cities. */\\nasync function switchToCity(ns, city, reason) {\\n    const success = await getBBInfo(ns, `switchCity(ns.args[0])`, city);\\n    log(ns, (success ? 'INFO: Switched' : 'ERROR: Failed to switch') + ` to Bladeburner city \\\"${city}\\\" (${reason})`,\\n        !success, success ? (options['toast-relocations'] ? 'info' : undefined) : 'error');\\n    return success;\\n}\\n\\n/** @param {NS} ns \\n * Decides how to spend skill points. */\\nasync function spendSkillPoints(ns) {\\n    while (true) { // Loop until we determine there's nothing left to spend skill points on\\n        const unspent = await getBBInfo(ns, 'getSkillPoints()');\\n        if (unspent == 0) return;\\n        const skillLevels = await getBBDict(ns, 'getSkillLevel(%)', skillNames);\\n        const skillCosts = await getBBDict(ns, 'getSkillUpgradeCost(%)', skillNames);\\n        // Find the next lowest skill cost\\n        let skillToUpgrade, minPercievedCost = Number.MAX_SAFE_INTEGER;\\n        for (const skillName of skillNames) {\\n            let percievedCost = skillCosts[skillName] * (costAdjustments[skillName] || 1);\\n            // Bitburner bug workaround: Overclock is capped at lvl 90, but the cost does not return e.g. Infinity\\n            if (skillName === \\\"Overclock\\\" && skillLevels[skillName] == 90) percievedCost = Number.POSITIVE_INFINITY;\\n            if (percievedCost < minPercievedCost)\\n                [skillToUpgrade, minPercievedCost] = [skillName, percievedCost];\\n        }\\n        // If the percieved or actual cost of the next best upgrade is too high, save our remaining points for later\\n        if (minPercievedCost > unspent || skillCosts[skillToUpgrade] > unspent) return;\\n        // Otherwise, purchase the upgrade\\n        if (await getBBInfo(ns, `upgradeSkill(ns.args[0])`, skillToUpgrade))\\n            log(ns, `SUCCESS: Upgraded Bladeburner skill ${skillToUpgrade}`, false, options['toast-upgrades'] ? 'success' : undefined);\\n        else\\n            log(ns, `WARNING: Something went wrong while trying to upgrade Bladeburner skill ${skillToUpgrade}. ` +\\n                `Currently have ${unspent} SP, upgrade should cost ${skillCosts[skillToUpgrade]} SP.`, false, 'warning');\\n        await ns.sleep(10);\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Helper to try and join the Bladeburner faction ASAP. */\\nasync function tryJoinFaction(ns, rank) {\\n    if (inFaction) return;\\n    if (rank >= 25 && await getBBInfo(ns, 'joinBladeburnerFaction()')) {\\n        log(ns, 'SUCCESS: Joined the Bladeburner Faction!', false, 'success');\\n        inFaction = true;\\n    } else if (rank >= 25)\\n        log(ns, `WARNING: Failed to join the Bladeburner faction despite rank of ${rank.toFixed(1)}`, false, 'warning');\\n}\\n\\nlet lastCanWorkCheckIdle = true;\\n\\n/** @param {NS} ns \\n * Helper to see if we are able to do bladeburner work */\\nasync function canDoBladeburnerWork(ns) {\\n    if (options['ignore-busy-status'] || haveSimulacrum) return true;\\n    // Check if the player is busy doing something else\\n    const busy = await getNsDataThroughFile(ns, 'ns.singularity.isBusy()');\\n    if (!busy) return lastCanWorkCheckIdle = true;\\n    if (lastCanWorkCheckIdle)\\n        log(ns, `WARNING: Cannot perform Bladeburner actions because the player is busy ` +\\n            `and hasn't installed the augmentation \\\"${simulacrumAugName}\\\"...`, false, 'warning');\\n    return lastCanWorkCheckIdle = false;\\n}\\n\\n/** @param {NS} ns \\n * Ensure we're in the Bladeburner division */\\nasync function beingInBladeburner(ns) {\\n    // Ensure we're in the Bladeburner division. If not, wait until we've joined it.\\n    while (!(await getNsDataThroughFile(ns, 'ns.bladeburner.inBladeburner()'))) {\\n        try {\\n            if (player.skills.strength < 100 || player.skills.defense < 100 || player.skills.dexterity < 100 || player.skills.agility < 100)\\n                log(ns, `Waiting for physical stats >100 to join bladeburner ` +\\n                    `(Currently Str: ${player.skills.strength}, Def: ${player.skills.defense}, Dex: ${player.skills.dexterity}, Agi: ${player.skills.agility})`);\\n            else if (await getBBInfo(ns, 'joinBladeburnerDivision()')) {\\n                let message = `SUCCESS: Joined Bladeburner (At ${formatDuration(getTimeInBitnode())} into BitNode)`;\\n                if (9 in ownedSourceFiles && options['disable-spending-hashes'])\\n                    message += ' --disable-spending-hashes is set, but consider running the following command to give it a boost:\\\\n' +\\n                        'run spend-hacknet-hashes.js --spend-on Exchange_for_Bladeburner_Rank --spend-on Exchange_for_Bladeburner_SP --liquidate';\\n                log(ns, message, true, 'success');\\n                break;\\n            } else\\n                log(ns, 'WARNING: Failed to joined Bladeburner despite physical stats. Will try again...', false, 'warning');\\n            player = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n        }\\n        catch (err) {\\n            log(ns, `WARNING: bladeburner.js Caught (and suppressed) an unexpected error while waiting to join bladeburner, but will keep going:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        await ns.sleep(5000);\\n    }\\n    log(ns, \\\"INFO: We are in Bladeburner. Starting main loop...\\\")\\n    // If not disabled, launch an external script to spend hashes on bladeburner rank\\n    if (options['disable-spending-hashes'] || !(9 in ownedSourceFiles)) return;\\n    const fPath = getFilePath('spend-hacknet-hashes.js');\\n    const args = ['--spend-on', 'Exchange_for_Bladeburner_Rank', '--spend-on', 'Exchange_for_Bladeburner_SP', '--liquidate'];\\n    if (ns.run(fPath, 1, ...args))\\n        log(ns, `INFO: Launched '${fPath}' to gain Bladeburner Rank and Skill Points more quickly (Can be disabled with --disable-spending-hashes)`)\\n    else\\n        log(ns, `WARNING: Failed to launch '${fPath}' (already running?)`)\\n}\",\"filename\":\"bladeburner.js\",\"server\":\"home\"}}],[\"casino.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log, getConfiguration, getFilePath, waitForProcessToComplete, runCommand, getNsDataThroughFile, autoRetry } from './helpers.js'\\n\\nconst ran_flag = \\\"/Temp/ran-casino.txt\\\"\\nlet doc = eval(\\\"document\\\");\\nlet options;\\nconst argsSchema = [\\n    ['save-sleep-time', 10], // Time to sleep in milliseconds after saving. If you are having trouble with your automatic saves not \\\"taking effect\\\" try increasing this.\\n    ['click-sleep-time', 1], // Time to sleep in milliseconds after clicking any button (or setting text). Increase if your are getting errors on click.\\n    ['use-basic-strategy', false], // Set to true to use the basic strategy (Stay on 17+)\\n    ['enable-logging', false], // Set to true to pop up a tail window and generate logs.\\n    ['kill-all-scripts', false], // Set to true to kill all running scripts before running.\\n    ['no-deleting-remote-files', false], // By default, if --kill-all-scripts, we will also remove remote files to speed up save/reload\\n    ['on-completion-script', null], // Spawn this script when max-charges is reached\\n    ['on-completion-script-args', []], // Optional args to pass to the script when launched\\n];\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if ([\\\"--on-completion-script\\\"].includes(lastFlag))\\n        return data.scripts;\\n    return [];\\n}\\n\\nlet _ns; // Lazy global copy of ns so we can sleep in the click handler\\n\\n/** Helper to open a tail window and log a message to the console and terminal. Useful when trying to inform the player of a failure.\\n * @param {NS} ns **/\\nfunction tailAndLog(ns, message) {\\n    ns.tail();\\n    log(ns, message, true);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = getConfiguration(ns, argsSchema);\\n    if (!options) return; // Invalid options, or ran in --help mode.\\n    _ns = ns;\\n    const saveSleepTime = options['save-sleep-time'];\\n    if (options['enable-logging'])\\n        ns.tail()\\n    else\\n        ns.disableLog(\\\"ALL\\\");\\n\\n    // Step 1: Go to Aevum if we aren't already there. (Must be done manually if you don't have SF4)\\n    if (ns.getPlayer().city != \\\"Aevum\\\") {\\n        try {\\n            if (ns.getPlayer().money < 200000 || !(await getNsDataThroughFile(ns, 'ns.singularity.travelToCity(ns.args[0])', null, [\\\"Aevum\\\"])))\\n                return tailAndLog(ns, \\\"ERROR: Sorry, you need at least 200k to travel to the casino.\\\");\\n        } catch (err) {\\n            return tailAndLog(ns, \\\"ERROR: You must manually travel to to Aevum to use this script until you get SF4\\\");\\n        }\\n    }\\n\\n    // Helper function to detect if the \\\"Stop [[faction|company] work|styding|training]\\\" etc... button from the focus screen is up\\n    const checkForFocusScreen = async () =>\\n        await findRetry(ns, \\\"//button[contains(text(), 'Stop playing')]\\\", true) ? false : // False positive, casino \\\"stop\\\" button, no problems here\\n            await findRetry(ns, \\\"//button[contains(text(), 'Stop')]\\\", true); // Otherwise, a button with \\\"Stop\\\" on it is probably from the work screen\\n\\n    // Find the button used to save the game\\n    const btnSaveGame = await findRetry(ns, \\\"//button[@aria-label = 'save game']\\\");\\n    if (!btnSaveGame)\\n        return tailAndLog(ns, \\\"ERROR: Sorry, couldn't find the Overview Save (💾) button. Is your \\\\\\\"Overview\\\\\\\" panel collapsed or modded?\\\");\\n    let inputWager, btnStartGame;\\n\\n    // Step 2: Try to navigate to the blackjack game until successful, in case something repeatedly steals focus\\n    let attempts = 0;\\n    while (attempts++ <= 10) {\\n        if (attempts > 1) ns.sleep(1000);\\n        try {\\n            // Step 2.1: If the player is focused, stop the current action\\n            const btnStopAction = await checkForFocusScreen();\\n            if (btnStopAction) { // If we were performing an action unfocused, it will be focused on restart and we must stop that action to navigate.\\n                log(ns, \\\"It looks like we're on a focus screen. Stopping whatever we're doing...\\\")\\n                await click(btnStopAction);\\n            }\\n            // Step 2.2: Navigate to the City Casino\\n            try { // Try to do this without SF4, because it's faster and doesn't require a temp script to be cleaned up below\\n                // Click our way to the city casino\\n                await click(await findRetry(ns, \\\"//div[(@role = 'button') and (contains(., 'City'))]\\\"));\\n                await click(await findRetry(ns, \\\"//span[@aria-label = 'Iker Molina Casino']\\\"));\\n            } catch { // Use SF4 as a fallback, it's more reliable.\\n                try { await getNsDataThroughFile(ns, 'ns.singularity.goToLocation(ns.args[0])', null, [\\\"Iker Molina Casino\\\"]); }\\n                catch { return tailAndLog(ns, \\\"ERROR: Failed to travel to the casino both using UI navigation and using SF4 as a fall-back.\\\"); }\\n            }\\n            // Step 2.3: Try to start the blackjack game\\n            const blackjack = await findRetry(ns, \\\"//button[contains(text(), 'blackjack')]\\\");\\n            if (!blackjack) {\\n                tailAndLog(ns, `ERROR: Could not find the \\\"Play blackjack\\\" button. Did something steal focus? Trying again... ` +\\n                    `Please post a full-game screenshot on Discord if you can't get past this point.`)\\n                continue; // Loop back to start and try again\\n            }\\n            await click(blackjack);\\n\\n            // Step 2.4: Get some buttons we will need to play blackjack\\n            inputWager = await findRetry(ns, \\\"//input[@value = 1000000]\\\");\\n            btnStartGame = await findRetry(ns, \\\"//button[text() = 'Start']\\\");\\n            if (!inputWager || !btnStartGame) {\\n                tailAndLog(ns, `ERROR: Could not find one or more game controls. Did something steal focus? Trying again... ` +\\n                    `Please post a full-game screenshot on Discord if you can't get past this point.`)\\n                continue; // Loop back to start and try again\\n            }\\n\\n            // Step 2.5: Clean up temp files and kill other running scripts to speed up the reload cycle\\n            if (ns.ls(\\\"home\\\", \\\"Temp/\\\").length > 0) { // Do a little clean-up to speed up save/load.\\n                // Step 2.5.1: Test that we aren't already kicked out of the casino before doing drastic things like killing scripts\\n                await setText(inputWager, `1`); // Bet just a dollar and quick the game right away, no big deal\\n                await click(btnStartGame);\\n                if (await findRetry(ns, \\\"//p[contains(text(), 'Count:')]\\\", true, 10)) { // If this works, we're still allowed in\\n                    const btnStay = await findRetry(ns, \\\"//button[text() = 'Stay']\\\", true);\\n                    if (btnStay) await click(btnStay); // Trigger the game to end if we didn't instantly win/lose our $1 bet.\\n                } else { // Otherwise, we've probably been kicked out of the casino, but...\\n                    // because we haven't killed scripts yet, it's possible another script stole focus again. Detect and handle that case.\\n                    if (await checkForFocusScreen()) {\\n                        log(ns, \\\"ERROR: It looks like something stole focus while we were trying to automate the casino. Trying again.\\\");\\n                        continue; // Loop back to start and try again\\n                    }\\n                    ns.write(ran_flag, \\\"True\\\", \\\"w\\\"); // Write a flag other scripts can check for indicating we think we've been kicked out of the casino.\\n                    return log(ns, \\\"INFO: We appear to already have been previously kicked out of the casino.\\\", true);\\n                }\\n                // Step 2.5.2: Kill all other scripts if enabled (note, we assume that if the temp folder is empty, they're already killed and this is a reload)\\n                if (options['kill-all-scripts'])\\n                    await killAllOtherScripts(ns, !options['no-deleting-remote-files']);\\n                // Step 2.5.3: Clear the temp folder on home (all transient scripts / outputs)\\n                await waitForProcessToComplete(ns, ns.run(getFilePath('cleanup.js')));\\n            }\\n            break; // We achieved everthing we wanted, we can exit the while loop.\\n        } catch (err) {\\n            ns.tail(); // We're having difficulty, pop open a tail window so the user is aware.\\n            log(ns, `WARNING: casino.js Caught (and suppressed) an unexpected error while navigating to blackjack. Will try again...\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n    }\\n\\n    if (ns.getPlayer().money < 1)\\n        return log(ns, \\\"WARNING: Whoops, we have no money to bet! Kill whatever's spending it and try again later.\\\", true, 'warning');\\n\\n    // Step 3: Save the fact that this script is now running, so that future reloads start this script back up immediately.\\n    if (saveSleepTime) await ns.sleep(saveSleepTime); // Anecdotally, some users report the first save is \\\"stale\\\" (doesn't include casino.js running). Maybe this delay helps?\\n    await click(btnSaveGame);\\n    if (saveSleepTime) await ns.sleep(saveSleepTime);\\n\\n    // Step 4: Play until we lose\\n    while (true) {\\n        const bet = Math.min(1E8, ns.getPlayer().money * 0.9 /* Avoid timing issues with other scripts spending money */);\\n        if (bet < 0) return await reload(ns); // If somehow we have no money, we can't continue\\n        await setText(inputWager, `${bet}`);\\n        await click(btnStartGame);\\n        const btnHit = await findRetry(ns, \\\"//button[text() = 'Hit']\\\");\\n        const btnStay = await findRetry(ns, \\\"//button[text() = 'Stay']\\\");\\n        let won;\\n        do { // Inner-loop to play a single hand\\n            won = await findRetry(ns, \\\"//p[contains(text(), 'lost')]\\\", true) ? false : // Detect whether we lost or won. Annoyingly, when we win with blackjack, \\\"Won\\\" is Title-Case.\\n                await findRetry(ns, \\\"//p[contains(text(), 'won')]\\\", true) ||\\n                    await findRetry(ns, \\\"//p[contains(text(), 'Won')]\\\", true) ? true : null;\\n            if (won === null) {\\n                if (await findRetry(ns, \\\"//p[contains(text(), 'Tie')]\\\", true)) break; // If we tied, break and start a new hand.\\n                const txtCount = await findRetry(ns, \\\"//p[contains(text(), 'Count:')]\\\", true, 20);\\n                if (!txtCount) { // If we can't find the count, we've either been kicked out, or maybe routed to another screen.\\n                    return await checkForFocusScreen() /* Detect the case where we started working/training */ ?\\n                        log(ns, \\\"ERROR: It looks like something stole focus while we were trying to automate the casino. Please try again.\\\", true) :\\n                        onCompletion(ns); // Otherwise, assume we've been kicked out of the casino for having stolen the max 10b\\n                }\\n                const allCounts = txtCount.querySelectorAll('span');\\n                const highCount = Number(allCounts[allCounts.length - 1].innerText);\\n                const shouldHit = options['use-basic-strategy'] ? highCount < 17 : shouldHitAdvanced(ns, txtCount);\\n                if (options['enable-logging']) log(ns, `INFO: Count is ${highCount}, we will ${shouldHit ? 'Hit' : 'Stay'}`);\\n                await click(shouldHit ? btnHit : btnStay);\\n                await ns.sleep(1); // Yield for an instant so the UI can update and process events\\n            }\\n        } while (won === null);\\n        if (won === null) continue; // Only possible if we tied and broke out early. Start a new hand.\\n        if (!won) return await reload(ns); // Reload if we lost\\n        await click(btnSaveGame); // Save if we won\\n        if (saveSleepTime) await ns.sleep(saveSleepTime);\\n    }\\n}\\n\\n/** Forces the game to reload (without saving). Great for save scumming.\\n * WARNING: Doesn't work if the user last ran the game with \\\"Reload and kill all scripts\\\" \\n * @param {NS} ns */\\nasync function reload(ns) {\\n    eval(\\\"window\\\").onbeforeunload = null; // Disable the unsaved changes warning before reloading\\n    await ns.sleep(options['save-sleep-time']); // Yield execution for an instant incase the game needs to finish a save or something\\n    location.reload(); // Force refresh the page without saving           \\n    await ns.sleep(10000); // Keep the script alive to be safe. Presumably the page reloads before this completes.\\n}\\n\\n/** @param {NS} ns \\n *  Helper to kill all scripts on all other servers, except this one **/\\nasync function killAllOtherScripts(ns, removeRemoteFiles) {\\n    // Kill processes on home (except this one)\\n    let pid = await runCommand(ns, `ns.ps().filter(s => s.filename != ns.args[0]).forEach(s => ns.kill(s.pid));`,\\n        '/Temp/kill-everything-but.js', [ns.getScriptName()]);\\n    await waitForProcessToComplete(ns, pid);\\n    log(ns, `INFO: Killed other scripts running on home...`, true);\\n\\n    // Kill processes on all other servers\\n    const allServers = await getNsDataThroughFile(ns, 'scanAllServers(ns)');\\n    const serversExceptHome = allServers.filter(s => s != \\\"home\\\");\\n    pid = await runCommand(ns, 'ns.args.forEach(host => ns.killall(host))',\\n        '/Temp/kill-all-scripts-on-servers.js', serversExceptHome);\\n    await waitForProcessToComplete(ns, pid);\\n    log(ns, 'INFO: Killed all scripts running on other hosts...', true);\\n\\n    // If enabled, remove files on all other servers\\n    if (removeRemoteFiles) {\\n        pid = await runCommand(ns, 'ns.args.forEach(host => ns.ls(host).forEach(file => ns.rm(file, host)))',\\n            '/Temp/delete-files-on-servers.js', serversExceptHome)\\n        await waitForProcessToComplete(ns, pid);\\n        log(ns, 'INFO: Removed all files on other hosts...', true)\\n    }\\n}\\n\\n/** @param {NS} ns \\n *  Run when we can no longer gamble at the casino (presumably because we've been kicked out) **/\\nfunction onCompletion(ns) {\\n    ns.write(ran_flag, \\\"True\\\", \\\"w\\\"); // Write an file indicating we think we've been kicked out of the casino.\\n    log(ns, \\\"SUCCESS: We've been kicked out of the casino.\\\", true);\\n\\n    // Run the completion script before shutting down    \\n    let completionScript = options['on-completion-script'];\\n    if (!completionScript) return;\\n    let completionArgs = options['on-completion-script-args'];\\n    if (ns.run(completionScript, 1, ...completionArgs))\\n        log(ns, `INFO: casino.js shutting down and launching ${completionScript}...`, false, 'info');\\n    else\\n        log(ns, `WARNING: casino.js shutting down, but failed to launch ${completionScript}...`, false, 'warning');\\n}\\n\\n// Some DOM helpers (partial credit to @ShamesBond)\\nasync function click(elem) {\\n    await elem[Object.keys(elem)[1]].onClick({ isTrusted: true });\\n    if (options['click-sleep-time']) await _ns.sleep(options['click-sleep-time']);\\n}\\nasync function setText(input, text) {\\n    await input[Object.keys(input)[1]].onChange({ isTrusted: true, target: { value: text } });\\n    if (options['click-sleep-time']) await _ns.sleep(options['click-sleep-time']);\\n}\\nfunction find(xpath) { return doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; }\\nasync function findRetry(ns, xpath, expectFailure = false, retries = null) {\\n    try {\\n        return await autoRetry(ns, () => find(xpath), e => e !== undefined,\\n            () => expectFailure ? `It's looking like the element with xpath: ${xpath} isn't present...` :\\n                `Could not find the element with xpath: ${xpath}\\\\nSomething may have re-routed the UI`,\\n            retries != null ? retries : expectFailure ? 3 : 10, 1, 2);\\n    } catch (e) {\\n        if (!expectFailure) throw e;\\n    }\\n}\\n\\n// Better logic for when to HIT / STAY (Partial credit @drider)\\nfunction shouldHitAdvanced(ns, playerCountElem) {\\n    const txtPlayerCount = playerCountElem.textContent.substring(7);\\n    const player = parseInt(txtPlayerCount.match(/\\\\d+/).shift());\\n    const dealer = getDealerCount();\\n    if (options['enable-logging']) log(ns, `Player Count Text: ${txtPlayerCount}, Player: ${player}, Dealer: ${dealer}`);\\n    // Strategy to minimize house-edge. See https://wizardofodds.com/blackjack/images/bj_4d_s17.gif\\n    if (txtPlayerCount.includes(\\\"or\\\")) { // Player has an Ace\\n        if (player >= 9) return false; // Stay on Soft 19 or higher\\n        if (player == 8 && dealer <= 8) return false; // Soft 18 - Stay if dealer has 8 or less\\n        return true; // Otherwise, hit on Soft 17 or less\\n    }\\n    if (player >= 17) return false; // Stay on Hard 17 or higher\\n    if (player >= 13 && dealer <= 6) return false; // Stay if player has 13-16 and dealer shows 6 or less.\\n    if (player == 12 && 4 <= dealer && dealer <= 6) return false; // Stay if player has 12 and dealer has 4 to 6\\t\\n    return true;// Otherwise Hit\\n}\\nfunction getDealerCount() {\\n    const text = find(\\\"//p[contains(text(), 'Dealer')]/..\\\").innerText.substring(8, 9);\\n    let cardValue = parseInt(text);\\n    return isNaN(cardValue) ? (text == 'A' ? 11 : 10) : cardValue;\\n}\",\"filename\":\"casino.js\",\"server\":\"home\"}}],[\"cleanup.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    for (let file of ns.ls('home', 'Temp/'))\\n        ns.print((ns.rm(file) ? \\\"Removed \\\" : \\\"Failed to remove \\\") + file);\\n}\",\"filename\":\"cleanup.js\",\"server\":\"home\"}}],[\"crime.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { instanceCount, getNsDataThroughFile, formatDuration, formatNumberShort } from './helpers.js'\\nimport { crimeForKillsKarmaStats } from './work-for-factions.js'\\n\\nconst crimes = [\\\"shoplift\\\", \\\"rob store\\\", \\\"mug\\\", \\\"larceny\\\", \\\"deal drugs\\\", \\\"bond forgery\\\", \\\"traffick arms\\\", \\\"homicide\\\", \\\"grand theft auto\\\", \\\"kidnap\\\", \\\"assassinate\\\", \\\"heist\\\"]\\nconst argFastCrimesOnly = \\\"--fast-crimes-only\\\";\\nexport function autocomplete() { return crimes.concat(argFastCrimesOnly); }\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    if (await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n    ns.disableLog('sleep');\\n    let crime = ns.args.length == 0 ? undefined : ns.args.join(\\\" \\\"); // Need to join in case the crime has a space in it - it will be treated as two args\\n    ns.tail();\\n    if (!crime || ns.args.includes(argFastCrimesOnly)) // More sophisticated auto-scaling crime logic\\n        await crimeForKillsKarmaStats(ns, 0, 0, Number.MAX_SAFE_INTEGER, ns.args.includes(argFastCrimesOnly));\\n    else // Simple crime loop for the specified crime\\n        await legacyAutoCrime(ns, crime);\\n}\\n\\n/** @param {NS} ns **/\\nasync function legacyAutoCrime(ns, crime = \\\"mug\\\") {\\n    let interval = 100;\\n    while (true) {\\n        let maxBusyLoops = 100;\\n        while ((await getNsDataThroughFile(ns, `ns.singularity.isBusy()`)) && maxBusyLoops-- > 0) {\\n            await ns.sleep(interval);\\n            ns.print(\\\"Waiting to no longer be busy...\\\");\\n        }\\n        if (maxBusyLoops <= 0) {\\n            ns.tprint(\\\"User have been busy for too long. auto-crime.js exiting...\\\");\\n            return;\\n        }\\n        ns.tail(); // Force a tail window open when auto-criming, or else it's very difficult to stop if it was accidentally closed.\\n        let wait = 10 + (await getNsDataThroughFile(ns, 'ns.singularity.commitCrime(ns.args[0])', null, [crime]));\\n        ns.print(`Karma: ${formatNumberShort(ns.heart.break())} Committing crime \\\\\\\"${crime}\\\\\\\" and sleeping for ${formatDuration(wait)}...`);\\n        await ns.sleep(wait);\\n    }\\n}\",\"filename\":\"crime.js\",\"server\":\"home\"}}],[\"daemon.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    formatMoney, formatRam, formatDuration, formatDateTime, formatNumber,\\n    hashCode, disableLogs, log, getFilePath, getConfiguration,\\n    getNsDataThroughFile_Custom, runCommand_Custom, waitForProcessToComplete_Custom,\\n    tryGetBitNodeMultipliers_Custom, getActiveSourceFiles_Custom,\\n    getFnRunViaNsExec, autoRetry\\n} from './helpers.js'\\n\\n// daemon.js has histocially been the central orchestrator of almost every script in the game.\\n// Only recently has it been \\\"enslaved\\\" to an even higher-level orchestrator: autopilot.js\\n// Its primary job is to manage hacking servers for income, but it also manages launching\\n// a myriad of helper scripts to take advantage of other game mechanics (such as solving coding contraacts)\\n\\n// NOTE: This is the the oldest piece of code in the repo and is a mess of global properties and\\n//       functions scattered all over the place. I'll try to clean it up and organize it better over time\\n//       but my appologies if you are trying to read it. Other scripts should serve as better examples.\\n\\n// These parameters are meant to let you tweak the script's behaviour from the command line (without altering source code)\\nlet options;\\nconst argsSchema = [\\n    ['h', false], // Do nothing but hack, no prepping (drains servers to 0 money, if you want to do that for some reason)\\n    ['hack-only', false], // Same as above\\n    ['s', true], // Enable Stock Manipulation. This is now true for default, but left as a valid argument for backwards-compatibility.\\n    ['stock-manipulation', false], // Same as above\\n    ['disable-stock-manipulation', true], // You must now opt *out* of stock-manipulation mode by enabling this flag.\\n    ['stock-manipulation-focus', false], // Stocks are main source of income - kill any scripts that would do them harm (TODO: Enable automatically in BN8)\\n    ['v', false], // Detailed logs about batch scheduling / tuning\\n    ['verbose', false], // Same as above\\n    ['o', false], // Good for debugging, run the main targettomg loop once then stop, with some extra logs\\n    ['run-once', false], // Same as above\\n    ['x', false], // Focus on a strategy that produces the most hack EXP rather than money\\n    ['xp-only', false], // Same as above\\n    ['n', false], // Can toggle on using hacknet nodes for extra hacking ram (at the expense of hash production)\\n    ['use-hacknet-nodes', false], // Same as above (kept for backwards compatibility, but these are now called hacknet-servers)\\n    ['use-hacknet-servers', false], // Same as above, but the game recently renamed these\\n    ['spend-hashes-for-money-when-under', 10E6], // (Default 10m) Convert 4 hashes to money whenever we're below this amount\\n    ['disable-spend-hashes', false], // An easy way to set the above to a very large negative number, thus never spending hashes for Money\\n    ['silent-misfires', false], // Instruct remote scripts not to alert when they misfire\\n    ['initial-max-targets', 2], // Initial number of servers to target / prep (TODO: Scale this as BN progression increases)\\n    ['max-steal-percentage', 0.75], // Don't steal more than this in case something goes wrong with timing or scheduling, it's hard to recover from\\n    ['cycle-timing-delay', 16000], // Time\\n    ['queue-delay', 1000], // Delay before the first script begins, to give time for all scripts to be scheduled\\n    ['max-batches', 40], // Maximum overlapping cycles to schedule in advance. Note that once scheduled, we must wait for all batches to complete before we can schedule more\\n    ['i', false], // Farm intelligence with manual hack.\\n    ['reserved-ram', 32], // Keep this much home RAM free when scheduling hack/grow/weaken cycles on home.\\n    ['looping-mode', false], // Set to true to attempt to schedule perpetually-looping tasks.\\n    ['recovery-thread-padding', 1], // Multiply the number of grow/weaken threads needed by this amount to automatically recover more quickly from misfires.\\n    ['share', false], // Enable sharing free ram to increase faction rep gain (enabled automatically once RAM is sufficient)\\n    ['no-share', false], // Disable sharing free ram to increase faction rep gain\\n    ['share-cooldown', 5000], // Wait before attempting to schedule more share threads (e.g. to free RAM to be freed for hack batch scheduling first)\\n    ['share-max-utilization', 0.8], // Set to 1 if you don't care to leave any RAM free after sharing. Will use up to this much of the available RAM\\n    ['no-tail-windows', false], // Set to true to prevent the default behaviour of opening a tail window for certain launched scripts. (Doesn't affect scripts that open their own tail windows)\\n    ['initial-study-time', 10], // Seconds. Set to 0 to not do any studying at startup. By default, if early in an augmentation, will start with a little study to boost hack XP\\n    ['initial-hack-xp-time', 10], // Seconds. Set to 0 to not do any hack-xp grinding at startup. By default, if early in an augmentation, will start with a little study to boost hack XP\\n    ['disable-script', []], // The names of scripts that you do not want run by our scheduler\\n    ['run-script', []], // The names of additional scripts that you want daemon to run on home\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--disable-script\\\" || lastFlag == \\\"--run-script\\\")\\n        return data.scripts;\\n    return [];\\n}\\n\\n// --- CONSTANTS ---\\n// track how costly (in security) a growth/hacking thread is.\\nconst growthThreadHardening = 0.004;\\nconst hackThreadHardening = 0.002;\\n// initial potency of weaken threads before multipliers\\nconst weakenThreadPotency = 0.05;\\n// unadjusted server growth rate, this is way more than what you actually get\\nconst unadjustedGrowthRate = 1.03;\\n// max server growth rate, growth rates higher than this are throttled.\\nconst maxGrowthRate = 1.0035;\\n// The name given to purchased servers (should match what's in host-manager.js)\\nconst purchasedServersName = \\\"daemon\\\";\\n\\n// The maximum current total RAM utilization before we stop attempting to schedule work for the next less profitable server. Can be used to reserve capacity.\\nconst maxUtilization = 0.95;\\nconst lowUtilizationThreshold = 0.80; // The counterpart - low utilization, which leads us to ramp up targets\\n// If we have plenty of resources after targeting all possible servers, we can start to grow/weaken servers above our hack level - up to this utilization\\nconst maxUtilizationPreppingAboveHackLevel = 0.75;\\n// Maximum number of milliseconds the main targeting loop should run before we take a break until the next loop\\nconst maxLoopTime = 1000; //ms\\n\\n// --- VARS ---\\n// DISCLAIMER: Take any values you see assigned here with a grain of salt. Due to oddities in how Bitburner runs scripts,\\n// global state can be shared between multiple instances of the same script. As such, many of these values must\\n// be reset in the main method of this script (and if they aren't it's likely to manifest as a bug.)\\n\\nlet loopInterval = 1000; //ms\\n// the number of milliseconds to delay the grow execution after theft to ensure it doesn't trigger too early and have no effect.\\n// For timing reasons the delay between each step should be *close* 1/4th of this number, but there is some imprecision\\nlet cycleTimingDelay = 0; // (Set in command line args)\\nlet queueDelay = 0; // (Set in command line args) The delay that it can take for a script to start, used to pessimistically schedule things in advance\\nlet maxBatches = 0; // (Set in command line args) The max number of batches this daemon will spool up to avoid running out of IRL ram (TODO: Stop wasting RAM by scheduling batches so far in advance. e.g. Grind XP while waiting for cycle start!)\\nlet maxTargets = 0; // (Set in command line args) Initial value, will grow if there is an abundance of RAM\\nlet maxPreppingAtMaxTargets = 3; // The max servers we can prep when we're at our current max targets and have spare RAM\\n// Allows some home ram to be reserved for ad-hoc terminal script running and when home is explicitly set as the \\\"preferred server\\\" for starting a helper\\nlet homeReservedRam = 0; // (Set in command line args)\\n\\nlet allHostNames = (/**@returns {string[]}*/() => [])(); // simple name array of servers that have been discovered\\nlet _allServers = (/**@returns{Server[]}*/() => [])(); // Array of Server objects - our internal model of servers for hacking\\n// Lists of tools (external scripts) run\\nlet hackTools, asynchronousHelpers, periodicScripts;\\n// toolkit var for remembering the names and costs of the scripts we use the most\\nlet toolsByShortName = (/**@returns{{[id: string]: Tool;}}*/() => undefined)(); // Dictionary of tools keyed by tool short name\\nlet allHelpersRunning = false; // Tracks whether all long-lived helper scripts have been launched\\nlet studying = false; // Whether we're currently studying\\n\\n// Command line Flags\\nlet hackOnly = false; // \\\"-h\\\" command line arg - don't grow or shrink, just hack (a.k.a. scrapping mode)\\nlet stockMode = false; // \\\"-s\\\" command line arg - hack/grow servers in a way that boosts our current stock positions\\nlet stockFocus = false;  // If true, stocks are main source of income - kill any scripts that would do them harm\\nlet xpOnly = false; // \\\"-x\\\" command line arg - focus on a strategy that produces the most hack EXP rather than money\\nlet verbose = false; // \\\"-v\\\" command line arg - Detailed logs about batch scheduling / tuning\\nlet runOnce = false; // \\\"-o\\\" command line arg - Good for debugging, run the main targettomg loop once then stop\\nlet useHacknetNodes = false; // \\\"-n\\\" command line arg - Can toggle using hacknet nodes for extra hacking ram\\nlet loopingMode = false;\\nlet recoveryThreadPadding = 1; // How many multiples to increase the weaken/grow threads to recovery from misfires automatically (useful when RAM is abundant and timings are tight)\\n\\nlet daemonHost = null; // the name of the host of this daemon, so we don't have to call the function more than once.\\nlet hasFormulas = true;\\nlet currentTerminalServer = \\\"\\\"; // Periodically updated when intelligence farming, the current connected terminal server.\\nlet dictSourceFiles = (/**@returns{{[bitnode: number]: number;}}*/() => undefined)(); // Available source files\\nlet bitnodeMults = null; // bitnode multipliers that can be automatically determined after SF-5\\nlet isInBn8 = false; // Flag indicating whether we are in BN8 (where lots of rules change)\\nlet haveTixApi = false, have4sApi = false; // Whether we have WSE API accesses\\nlet _cachedPlayerInfo = (/**@returns{Player}*/() => undefined)(); // stores multipliers for player abilities and other player info\\nlet _ns = (/**@returns{NS}*/() => undefined)(); // Globally available ns reference, for convenience\\n\\n// Property to avoid log churn if our status hasn't changed since the last loop\\nlet lastUpdate = \\\"\\\";\\nlet lastUpdateTime = Date.now();\\nlet lowUtilizationIterations = 0;\\nlet highUtilizationIterations = 0;\\nlet lastShareTime = 0; // Tracks when share was last invoked so we can respect the configured share-cooldown\\nlet allTargetsPrepped = false;\\n\\n/** Ram-dodge getting updated player info. Note that this is the only async routine called in the main loop.\\n * If latency or ram instability is an issue, you may wish to try uncommenting the direct request.\\n * @param {NS} ns\\n * @returns {Promise<Player>} */\\nasync function getPlayerInfo(ns) {\\n    // return _cachedPlayerInfo = ns.getPlayer();\\n    return _cachedPlayerInfo = await getNsDataThroughFile(ns, `ns.getPlayer()`);\\n}\\n\\nfunction playerHackSkill() { return _cachedPlayerInfo.skills.hacking; }\\n\\nfunction getPlayerHackingGrowMulti() { return _cachedPlayerInfo.mults.hacking_grow; };\\n\\n/** @param {NS} ns\\n * @returns {Promise<{ type: \\\"COMPANY\\\"|\\\"FACTION\\\"|\\\"CLASS\\\"|\\\"CRIME\\\", cyclesWorked: number, crimeType: string, classType: string, location: string, companyName: string, factionName: string, factionWorkType: string }>} */\\nasync function getCurrentWorkInfo(ns) {\\n    return (await getNsDataThroughFile(ns, 'ns.singularity.getCurrentWork()')) ?? {};\\n}\\n\\n/** Helper to check if a file exists.\\n * A helper is used so that we have the option of exploring alternative implementations that cost less/no RAM.\\n * @param {NS} ns */\\nfunction doesFileExist(ns, filename, hostname = undefined) {\\n    // Fast (and free) - for local files, try to read the file and ensure it's not empty\\n    if ((hostname === undefined || hostname === daemonHost) && !filename.endsWith('.exe'))\\n        return ns.read(filename) != '';\\n    return ns.fileExists(filename, hostname);\\n}\\n\\n/** Helper to check which of a set of files exist on a remote server in a single batch ram-dodging request\\n * @param {NS} ns\\n * @param {string[]} filenames\\n * @returns {Promise<boolean[]>} */\\nasync function filesExist(ns, filenames, hostname = undefined) {\\n    return await getNsDataThroughFile(ns, `ns.args.slice(1).map(f => ns.fileExists(f, ns.args[0]))`,\\n        '/Temp/files-exist.txt', [hostname ?? daemonHost, ...filenames])\\n}\\n\\nlet psCache = (/**@returns{{[serverName: string]: ProcessInfo[];}}*/() => [])();\\n/** PS can get expensive, and we use it a lot so we cache this for the duration of a loop\\n * @param {NS} ns\\n * @returns {ProcessInfo[]} */\\nfunction processList(ns, serverName, canUseCache = true) {\\n    const cachedResult = psCache[serverName];\\n    const processList = canUseCache && cachedResult !== undefined ? cachedResult :\\n        // Note: We experimented with ram-dodging `ps`, but there's so much data involed that serializing/deserializing generates a lot of latency\\n        //(psCache[serverName] = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0])', null, [serverName]));\\n        (psCache[serverName] = ns.ps(serverName));\\n    return processList;\\n}\\n\\n// Returns the amount of money we should currently be reserving. Dynamically adapts to save money for a couple of big purchases on the horizon\\nfunction reservedMoney(ns) {\\n    let shouldReserve = Number(ns.read(\\\"reserve.txt\\\") || 0);\\n    let playerMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n    if (!ownedCracks.includes(\\\"SQLInject.exe\\\") && playerMoney > 200e6)\\n        shouldReserve += 250e6; // Start saving at 200m of the 250m required for SQLInject\\n    const fourSigmaCost = (bitnodeMults.FourSigmaMarketDataApiCost * 25000000000);\\n    if (!have4sApi && playerMoney >= fourSigmaCost / 2)\\n        shouldReserve += fourSigmaCost; // Start saving if we're half-way to buying 4S market access\\n    return shouldReserve;\\n}\\n\\n// script entry point\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    daemonHost = \\\"home\\\"; // ns.getHostname(); // get the name of this node (realistically, will always be home)\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions) return;\\n\\n    // Ensure no other copies of this script are running (they share memory)\\n    const scriptName = ns.getScriptName();\\n    const competingDaemons = processList(ns, \\\"home\\\").filter(s => s.filename == scriptName && s.pid != ns.pid);\\n    if (competingDaemons.length > 0) { // We expect only 1, due to this logic, but just in case, generalize the code below to support multiple.\\n        const daemonPids = competingDaemons.map(p => p.pid);\\n        log(ns, `Info: Restarting another '${scriptName}' instance running on home (pid: ${daemonPids} args: ` +\\n            `[${competingDaemons[0].args.join(\\\", \\\")}]) with new args ([${ns.args.join(\\\", \\\")}])...`, true)\\n        const killPid = await killProcessIds(ns, daemonPids);\\n        await waitForProcessToComplete_Custom(ns, getHomeProcIsAlive(ns), killPid);\\n        await ns.sleep(loopInterval); // The game can be slow to kill scripts, give it an extra bit of time.\\n    }\\n\\n    _ns = ns;\\n    disableLogs(ns, ['getServerMaxRam', 'getServerUsedRam', 'getServerMoneyAvailable', 'getServerGrowth', 'getServerSecurityLevel', 'exec', 'scan', 'sleep']);\\n    // Reset global vars on startup since they persist in memory in certain situations (such as on Augmentation)\\n    lastUpdate = \\\"\\\";\\n    lastUpdateTime = Date.now();\\n    maxTargets = 2;\\n    lowUtilizationIterations = highUtilizationIterations = 0;\\n    allHostNames = [], _allServers = [], psCache = [];\\n    // Get information about the player's current stats (also populates a cache)    \\n    const playerInfo = await getPlayerInfo(ns);\\n\\n    // Try to get \\\"resetInfo\\\", with a fallback for a failed dynamic call (i.e. low-ram conditions)\\n    let resetInfo;\\n    try {\\n        resetInfo = await getNsDataThroughFile(ns, `ns.getResetInfo()`);\\n    } catch {\\n        resetInfo = { currentNode: 1, lastAugReset: Date.now() };\\n    }\\n    isInBn8 = resetInfo.currentNode === 8; // We do some things differently if we're in BN8 (Stock Market BN)\\n    dictSourceFiles = await getActiveSourceFiles_Custom(ns, getNsDataThroughFile);\\n    log(ns, \\\"The following source files are active: \\\" + JSON.stringify(dictSourceFiles));\\n\\n    // Process configuration\\n    options = runOptions;\\n    hackOnly = options.h || options['hack-only'];\\n    xpOnly = options.x || options['xp-only'];\\n    stockMode = (options.s || options['stock-manipulation'] || options['stock-manipulation-focus']) && !options['disable-stock-manipulation'];\\n    stockFocus = options['stock-manipulation-focus'] && !options['disable-stock-manipulation'];\\n    useHacknetNodes = options.n || options['use-hacknet-nodes'] || options['use-hacknet-servers'];\\n    verbose = options.v || options['verbose'];\\n    runOnce = options.o || options['run-once'];\\n    loopingMode = options['looping-mode'];\\n    recoveryThreadPadding = options['recovery-thread-padding'];\\n    // Log which flaggs are active\\n    if (hackOnly) log(ns, '-h - Hack-Only mode activated!');\\n    if (xpOnly) log(ns, '-x - Hack XP Grinding mode activated!');\\n    if (useHacknetNodes) log(ns, '-n - Using hacknet nodes to run scripts!');\\n    if (verbose) log(ns, '-v - Verbose logging activated!');\\n    if (runOnce) log(ns, '-o - Run-once mode activated!');\\n    if (stockMode) log(ns, 'Stock market manipulation mode is active (now enabled by default)');\\n    if (!stockMode) log(ns, \\\"--disable-stock-manipulation - Stock manipulation has been disabled.\\\");\\n    if (stockFocus) log(ns, '--stock-manipulation-focus - Stock market manipulation is the main priority');\\n    if (loopingMode) {\\n        log(ns, '--looping-mode - scheduled remote tasks will loop themselves');\\n        cycleTimingDelay = 0;\\n        queueDelay = 0;\\n        if (recoveryThreadPadding == 1) recoveryThreadPadding = 10;\\n        if (stockMode) stockFocus = true; // Need to actively kill scripts that go against stock because they will live forever\\n    }\\n    cycleTimingDelay = options['cycle-timing-delay'];\\n    queueDelay = options['queue-delay'];\\n    maxBatches = options['max-batches'];\\n    homeReservedRam = options['reserved-ram']\\n\\n    // These scripts are started once and expected to run forever (or terminate themselves when no longer needed)\\n    const openTailWindows = !options['no-tail-windows'];\\n    const reqRam = (ram) => ns.getServerMaxRam(\\\"home\\\") >= ram; // To avoid wasting precious RAM, many scripts don't launch unless we have more than a certain amount\\n    asynchronousHelpers = [\\n        { name: \\\"stats.js\\\", shouldRun: () => reqRam(64) }, // Adds stats not usually in the HUD\\n        { name: \\\"stockmaster.js\\\", shouldRun: () => reqRam(64), args: openTailWindows ? [\\\"--show-market-summary\\\"] : [], tail: openTailWindows }, // Start our stockmaster\\n        { name: \\\"hacknet-upgrade-manager.js\\\", shouldRun: () => reqRam(64), args: [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"1h\\\"] }, // Kickstart hash income by buying everything with up to 1h payoff time immediately\\n        { name: \\\"spend-hacknet-hashes.js\\\", args: [], shouldRun: () => reqRam(64) && 9 in dictSourceFiles }, // Always have this running to make sure hashes aren't wasted\\n        { name: \\\"sleeve.js\\\", tail: openTailWindows, shouldRun: () => 10 in dictSourceFiles }, // Script to create manage our sleeves for us\\n        { name: \\\"gangs.js\\\", tail: openTailWindows, shouldRun: () => reqRam(64) && 2 in dictSourceFiles }, // Script to create manage our gang for us\\n        {\\n            name: \\\"work-for-factions.js\\\", args: ['--fast-crimes-only', '--no-coding-contracts'],  // Singularity script to manage how we use our \\\"focus\\\" work.\\n            shouldRun: () => 4 in dictSourceFiles && reqRam(256 / (2 ** dictSourceFiles[4]) && !studying) // Higher SF4 levels result in lower RAM requirements\\n        },\\n        {   // Script to manage bladeburner for us. Run automatically if not disabled and bladeburner API is available\\n            name: \\\"bladeburner.js\\\", tail: openTailWindows,\\n            shouldRun: () => !options['disable-script'].includes('bladeburner.js') && 7 in dictSourceFiles && !isInBn8\\n        },\\n    ];\\n    asynchronousHelpers.forEach(helper => helper.name = getFilePath(helper.name));\\n    // Add any additional scripts to be run provided by --run-script arguments\\n    options['run-script'].forEach(s => asynchronousHelpers.push({ name: s }));\\n    asynchronousHelpers.forEach(helper => helper.isLaunched = false);\\n    asynchronousHelpers.forEach(helper => helper.requiredServer = \\\"home\\\"); // All helpers should be launched at home since they use tempory scripts, and we only reserve ram on home\\n    // These scripts are spawned periodically (at some interval) to do their checks, with an optional condition that limits when they should be spawned\\n    let shouldUpgradeHacknet = async () => ((await whichServerIsRunning(ns, \\\"hacknet-upgrade-manager.js\\\", false)) === null) && reservedMoney(ns) < ns.getServerMoneyAvailable(\\\"home\\\");\\n    // In BN8 (stocks-only bn) and others with hack income disabled, don't waste money on improving hacking infrastructure unless we have plenty of money to spare\\n    let shouldImproveHacking = () => bitnodeMults.ScriptHackMoneyGain != 0 && !isInBn8 || ns.getServerMoneyAvailable(\\\"home\\\") > 1e12;\\n    // Note: Periodic script are generally run every 30 seconds, but intervals are spaced out to ensure they aren't all bursting into temporary RAM at the same time.\\n    periodicScripts = [\\n        // Buy tor as soon as we can if we haven't already, and all the port crackers (exception: don't buy 2 most expensive port crackers until later if in a no-hack BN)\\n        { interval: 25000, name: \\\"/Tasks/tor-manager.js\\\", shouldRun: () => 4 in dictSourceFiles && !allHostNames.includes(\\\"darkweb\\\") },\\n        { interval: 26000, name: \\\"/Tasks/program-manager.js\\\", shouldRun: () => 4 in dictSourceFiles && ownedCracks.length != 5 },\\n        { interval: 27000, name: \\\"/Tasks/contractor.js\\\", requiredServer: \\\"home\\\" }, // Periodically look for coding contracts that need solving\\n        // Buy every hacknet upgrade with up to 4h payoff if it is less than 10% of our current money or 8h if it is less than 1% of our current money.\\n        { interval: 28000, name: \\\"hacknet-upgrade-manager.js\\\", shouldRun: shouldUpgradeHacknet, args: () => [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"4h\\\", \\\"--max-spend\\\", ns.getServerMoneyAvailable(\\\"home\\\") * 0.1] },\\n        { interval: 28500, name: \\\"hacknet-upgrade-manager.js\\\", shouldRun: shouldUpgradeHacknet, args: () => [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"8h\\\", \\\"--max-spend\\\", ns.getServerMoneyAvailable(\\\"home\\\") * 0.01] },\\n        // Buy upgrades regardless of payoff if they cost less than 0.1% of our money\\n        { interval: 29000, name: \\\"hacknet-upgrade-manager.js\\\", shouldRun: shouldUpgradeHacknet, args: () => [\\\"-c\\\", \\\"--max-payoff-time\\\", \\\"1E100h\\\", \\\"--max-spend\\\", ns.getServerMoneyAvailable(\\\"home\\\") * 0.001] },\\n        {\\n            interval: 30000, name: \\\"/Tasks/ram-manager.js\\\", args: () => ['--budget', 0.5, '--reserve', reservedMoney(ns)], // Spend about 50% of un-reserved cash on home RAM upgrades (permanent) when they become available\\n            shouldRun: () => 4 in dictSourceFiles && shouldImproveHacking() // Only trigger if hack income is important\\n        },\\n        {   // Periodically check for new faction invites and join if deemed useful to be in that faction. Also determines how many augs we could afford if we installed right now\\n            interval: 31000, name: \\\"faction-manager.js\\\", requiredServer: \\\"home\\\", args: ['--verbose', 'false'],\\n            // Don't start auto-joining factions until we're holding 1 billion (so coding contracts returning money is probably less critical) or we've joined one already\\n            shouldRun: () => 4 in dictSourceFiles && (_cachedPlayerInfo.factions.length > 0 || ns.getServerMoneyAvailable(\\\"home\\\") > 1e9) &&\\n                (ns.getServerMaxRam(\\\"home\\\") >= 128 / (2 ** dictSourceFiles[4])) // Uses singularity functions, and higher SF4 levels result in lower RAM requirements\\n        },\\n        {   // Periodically look to purchase new servers, but note that these are often not a great use of our money (hack income isn't everything) so we may hold-back.\\n            interval: 32000, name: \\\"host-manager.js\\\", requiredServer: \\\"home\\\",\\n            // Funky heuristic warning: I find that new players with fewer SF levels under their belt are obsessed with hack income from servers,\\n            // but established players end up finding auto-purchased hosts annoying - so now the % of money we spend shrinks as SF levels grow.\\n            args: () => ['--reserve-percent', Math.min(0.9, 0.1 * Object.values(dictSourceFiles).reduce((t, v) => t + v, 0)), '--absolute-reserve', reservedMoney(ns), '--utilization-trigger', '0'],\\n            shouldRun: () => {\\n                if (!shouldImproveHacking()) return false; // Skip if hack income is not important in this BN or at this time\\n                let utilization = getTotalNetworkUtilization(); // Utilization-based heuristics for when we likely could use more RAM for hacking\\n                return utilization >= maxUtilization || utilization > 0.80 && maxTargets < 20 || utilization > 0.50 && maxTargets < 5;\\n            }\\n        },\\n        // Check if any new servers can be backdoored. If there are many, this can eat up a lot of RAM, so make this the last script scheduled at startup.\\n        { interval: 33000, name: \\\"/Tasks/backdoor-all-servers.js\\\", requiredServer: \\\"home\\\", shouldRun: () => 4 in dictSourceFiles },\\n    ];\\n    periodicScripts.forEach(tool => tool.name = getFilePath(tool.name));\\n    hackTools = [\\n        { name: \\\"/Remote/weak-target.js\\\", shortName: \\\"weak\\\", threadSpreadingAllowed: true },\\n        { name: \\\"/Remote/grow-target.js\\\", shortName: \\\"grow\\\" },\\n        { name: \\\"/Remote/hack-target.js\\\", shortName: \\\"hack\\\" },\\n        { name: \\\"/Remote/manualhack-target.js\\\", shortName: \\\"manualhack\\\" },\\n        { name: \\\"/Remote/share.js\\\", shortName: \\\"share\\\", threadSpreadingAllowed: true },\\n    ];\\n    hackTools.forEach(tool => tool.name = getFilePath(tool.name));\\n\\n    await buildToolkit(ns, [...asynchronousHelpers, ...periodicScripts, ...hackTools]); // build toolkit\\n    const allServers = await getNsDataThroughFile(ns, 'scanAllServers(ns)');\\n    await getStaticServerData(ns, allServers); // Gather information about servers that will never change\\n    await buildServerList(ns, false, allServers); // create the exhaustive server list\\n    await establishMultipliers(ns); // figure out the various bitnode and player multipliers\\n    maxTargets = options['initial-max-targets'];\\n    if (stockFocus) // Ensure we attempt to target at least all servers that represent stocks if in stock-focus mode\\n        maxTargets = Math.max(maxTargets, Object.keys(serverStockSymbols).length);\\n\\n    // If we ascended less than 10 minutes ago, start with some study and/or XP cycles to quickly restore hack XP\\n    const timeSinceLastAug = Date.now() - resetInfo.lastAugReset;\\n    const shouldKickstartHackXp = (playerHackSkill() < 500 && timeSinceLastAug < 600000);\\n    studying = shouldKickstartHackXp ? true : false; // Flag will be used to prevent focus-stealing scripts from running until we're done studying.\\n\\n    // Start helper scripts and run periodic scripts for the first time to e.g. buy tor and any hack tools available to us (we will continue studying briefly while this happens)\\n    await runStartupScripts(ns);\\n    await runPeriodicScripts(ns);\\n    if (shouldKickstartHackXp) await kickstartHackXp(ns);\\n\\n    // Start the main targetting loop\\n    await doTargetingLoop(ns);\\n}\\n\\n/** @param {NS} ns\\n * Gain a hack XP early after a new Augmentation by studying a bit, then doing a bit of XP grinding */\\nasync function kickstartHackXp(ns) {\\n    let startedStudying = false;\\n    try {\\n        if (4 in dictSourceFiles && options['initial-study-time'] > 0) {\\n            // The safe/cheap thing to do is to study for free at the local university in our current town\\n            // The most effective thing is to study Algorithms at ZB university in Aevum.\\n            // Depending on our money, try to do the latter.\\n            try {\\n                const studyTime = options['initial-study-time'];\\n                log(ns, `INFO: Studying for ${studyTime} seconds to kickstart hack XP and speed up initial cycle times. (set --initial-study-time 0 to disable this step.)`);\\n                const money = ns.getServerMoneyAvailable(\\\"home\\\")\\n                const { CityName, LocationName, UniversityClassType } = ns.enums\\n                if (money >= 200000) { // If we can afford to travel, we're probably far enough along that it's worthwhile going to Volhaven where ZB university is.\\n                    log(ns, `INFO: Travelling to Volhaven for best study XP gain rate.`);\\n                    await getNsDataThroughFile(ns, `ns.singularity.travelToCity(ns.args[0])`, null, [CityName.Volhaven]);\\n                }\\n                const playerInfo = await getPlayerInfo(ns); // Update player stats to be certain of our new location.\\n                const university = playerInfo.city == CityName.Sector12 ? LocationName.Sector12RothmanUniversity :\\n                    playerInfo.city == CityName.Aevum ? LocationName.AevumSummitUniversity :\\n                        playerInfo.city == CityName.Volhaven ? LocationName.VolhavenZBInstituteOfTechnology : null;\\n                if (!university)\\n                    log(ns, `WARN: Cannot study, because you are in city ${playerInfo.city} which has no known university, and you cannot afford to travel to another city.`, false, 'warning');\\n                else {\\n                    const course = playerInfo.city == CityName.Sector12 ? UniversityClassType.computerScience : UniversityClassType.algorithms; // Assume if we are still in Sector-12 we are poor and should only take the free course\\n                    log(ns, `INFO: Studying \\\"${course}\\\" at \\\"${university}\\\" because we are in city \\\"${playerInfo.city}\\\".`);\\n                    startedStudying = await getNsDataThroughFile(ns, `ns.singularity.universityCourse(ns.args[0], ns.args[1], ns.args[2])`, null, [university, course, false]);\\n                    if (startedStudying)\\n                        await ns.sleep(studyTime * 1000); // Wait for studies to affect Hack XP. This will often greatly reduce time-to-hack/grow/weaken, and avoid a slow first cycle\\n                    else\\n                        log(ns, `WARNING: Failed to study to kickstart hack XP: ns.singularity.universityCourse(\\\"${university}\\\", \\\"${course}\\\", false) returned \\\"false\\\".`, false, 'warning');\\n                }\\n            } catch (err) { log(ns, `WARNING: Caught error while trying to study to kickstart hack XP: ${typeof err === 'string' ? err : err.message || JSON.stringify(err)}`, false, 'warning'); }\\n        }\\n        // Immediately attempt to root initially-accessible targets before attempting any XP cycles\\n        for (const server of getAllServers().filter(s => !s.hasRoot() && s.canCrack()))\\n            await doRoot(ns, server);\\n        // Before starting normal hacking, fire a couple hack XP-focused cycle using a chunk of free RAM to further boost RAM\\n        if (!xpOnly) {\\n            let maxXpCycles = 10000; // Avoid an infinite loop if something goes wrong\\n            const maxXpTime = options['initial-hack-xp-time'];\\n            const start = Date.now();\\n            const xpTarget = getBestXPFarmTarget();\\n            const minCycleTime = xpTarget.timeToWeaken();\\n            if (minCycleTime > maxXpTime * 1000)\\n                return log(ns, `INFO: Skipping XP cycle because the best target (${xpTarget.name}) time to weaken (${formatDuration(minCycleTime)})` +\\n                    ` is greater than the configured --initial-hack-xp-time of ${maxXpTime} seconds.`);\\n            log(ns, `INFO: Running Hack XP-focused cycles for ${maxXpTime} seconds to further boost hack XP and speed up main hack cycle times. (set --initial-hack-xp-time 0 to disable this step.)`);\\n            while (maxXpCycles-- > 0 && Date.now() - start < maxXpTime * 1000) {\\n                let cycleTime = await farmHackXp(ns, 1, verbose, 1);\\n                if (cycleTime)\\n                    await ns.sleep(cycleTime);\\n                else\\n                    return log(ns, 'WARNING: Failed to schedule an XP cycle', false, 'warning');\\n                log(ns, `INFO: Hacked ${xpTarget.name} for ${cycleTime.toFixed(1)}ms, (${Date.now() - start}ms total) of ${maxXpTime * 1000}ms`);\\n            }\\n        }\\n    } catch {\\n        log(ns, 'WARNING: Encountered an error while trying to kickstart hack XP (low RAM issues perhaps?)', false, 'warning');\\n    } finally {\\n        // Ensure we stop studying (in case no other running scripts end up stealing focus, so we don't keep studying forever)\\n        if (startedStudying) await getNsDataThroughFile(ns, `ns.singularity.stopAction()`);\\n        studying = false; // This will allow work-for-faction to launch\\n    }\\n}\\n\\n/** Check running status of scripts on servers\\n * @param {NS} ns\\n * @returns {Promise<string>} */\\nasync function whichServerIsRunning(ns, scriptName, canUseCache = true) {\\n    for (const server of getAllServers())\\n        if (processList(ns, server.name, canUseCache).some(process => process.filename === scriptName))\\n            return server.name;\\n    return null;\\n}\\n\\n/** Helper to kick off external scripts\\n * @param {NS} ns\\n * @returns {Promise<boolean>} true if all scripts have been launched */\\nasync function runStartupScripts(ns) {\\n    let launched = 0;\\n    for (const helper of asynchronousHelpers) {\\n        if (!helper.isLaunched && (helper.shouldRun === undefined || (await helper.shouldRun()))) {\\n            if (launched > 0) await ns.sleep(200); // Sleep a short while between each script being launched, so they aren't all fighting for temp RAM at the same time.\\n            helper.isLaunched = await tryRunTool(ns, getTool(helper))\\n            if (helper.isLaunched) launched++;\\n        }\\n    }\\n    // if every helper is launched already return \\\"true\\\" so we can skip doing this each cycle going forward.\\n    return asynchronousHelpers.reduce((allLaunched, tool) => allLaunched && tool.isLaunched, true);\\n}\\n\\n/** Checks whether it's time for any scheduled tasks to run\\n * @param {NS} ns */\\nasync function runPeriodicScripts(ns) {\\n    let launched = 0;\\n    for (const task of periodicScripts) {\\n        let tool = getTool(task);\\n        if ((Date.now() - (task.lastRun || 0) >= task.interval) && (task.shouldRun === undefined || (await task.shouldRun()))) {\\n            task.lastRun = Date.now()\\n            if (launched > 0) await ns.sleep(11); // Sleep a short while between each script being launched, so they aren't all fighting for temp RAM at the same time.\\n            if (await tryRunTool(ns, tool))\\n                launched++;\\n        }\\n    }\\n    // Super-early aug, if we are poor, spend hashes as soon as we get them for a quick cash injection. (Only applies if we have hacknet servers)\\n    if (9 in dictSourceFiles && !options['disable-spend-hashes'] // See if we have a hacknet, and spending hashes for money isn't disabled\\n        && ns.getServerMoneyAvailable(\\\"home\\\") < options['spend-hashes-for-money-when-under'] // Only if money is below the configured threshold\\n        && (ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\")) >= 5.6) { // Ensure we have spare RAM to run this temp script\\n        await runCommand(ns, `0; if(ns.hacknet.spendHashes(\\\"Sell for Money\\\")) ns.toast('Sold 4 hashes for \\\\$1M', 'success')`, '/Temp/sell-hashes-for-money.js');\\n    }\\n}\\n\\n// Helper that gets the either invokes a function that returns a value, or returns the value as-is if it is not a function.\\nconst funcResultOrValue = fnOrVal => (fnOrVal instanceof Function ? fnOrVal() : fnOrVal);\\n\\n/** Returns true if the tool is running (including if it was already running), false if it could not be run.\\n * @param {NS} ns\\n * @param {Tool} tool */\\nasync function tryRunTool(ns, tool) {\\n    if (options['disable-script'].includes(tool.name)) {\\n        if (verbose) log(ns, `Tool ${tool.name} was not launched as it was specified with --disable-script`);\\n        return false;\\n    }\\n    if (!doesFileExist(ns, tool.name)) {\\n        log(ns, `ERROR: Tool ${tool.name} was not found on ${daemonHost}`, true, 'error');\\n        return false;\\n    }\\n    let runningOnServer = await whichServerIsRunning(ns, tool.name);\\n    if (runningOnServer != null) {\\n        if (verbose) log(ns, `INFO: Tool ${tool.name} is already running on server ${runningOnServer}.`);\\n        return true;\\n    }\\n    const args = funcResultOrValue(tool.args) || []; // Support either a static args array, or a function returning the args.\\n    const runResult = await arbitraryExecution(ns, tool, 1, args, tool.requiredServer || \\\"home\\\");\\n    if (runResult) {\\n        runningOnServer = await whichServerIsRunning(ns, tool.name, false);\\n        if (verbose) log(ns, `Ran tool: ${tool.name} ` + (args.length > 0 ? `with args ${JSON.stringify(args)} ` : '') + (runningOnServer ? `on server ${runningOnServer}.` : 'but it shut down right away.'));\\n        if (tool.tail === true && runningOnServer) {\\n            log(ns, `Tailing Tool: ${tool.name} on server ${runningOnServer}` + (args.length > 0 ? ` with args ${JSON.stringify(args)}` : ''));\\n            ns.tail(tool.name, runningOnServer, ...args);\\n            //tool.tail = false; // Avoid popping open additional tail windows in the future\\n        }\\n        return true;\\n    } else\\n        log(ns, `WARNING: Tool cannot be run (insufficient RAM? REQ: ${formatRam(tool.cost)} FREE: ${formatRam(ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\"))}): ${tool.name}`, false, 'warning');\\n    return false;\\n}\\n\\n/** Workaround a current bitburner bug by yeilding briefly to the game after executing something.\\n * @param {NS} ns\\n * @param {String} script - Filename of script to execute.\\n * @param {int} host - Hostname of the target server on which to execute the script.\\n * @param {int} numThreads - Optional thread count for new script. Set to 1 by default. Will be rounded to nearest integer.\\n * @param args - Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the third argument numThreads must be filled in with a value.\\n * @returns — Returns the PID of a successfully started script, and 0 otherwise.\\n * Workaround a current bitburner bug by yeilding briefly to the game after executing something. **/\\nasync function exec(ns, script, host, numThreads, ...args) {\\n    // Try to run the script with auto-retry if it fails to start\\n    // It doesn't make sense to auto-retry hack tools, only add error handling to other scripts\\n    if (hackTools.some(h => h.name === script))\\n        return ns.exec(script, host, numThreads, ...args);\\n    // Otherwise, run with auto-retry to handle e.g. temporary ram issues\\n    const pid = await autoRetry(ns, async () => {\\n        const p = ns.exec(script, host, numThreads, ...args)\\n        return p;\\n    }, p => p !== 0, () => new Error(`Failed to exec ${script} on ${host} with ${numThreads} threads. ` +\\n        `This is likely due to having insufficient RAM. Args were: [${args}]`),\\n        undefined, undefined, undefined, verbose, verbose);\\n    return pid; // Caller is responsible for handling errors if final pid returned is 0 (indicating failure)\\n}\\n\\n/** @param {NS} ns\\n * @param {Server} server\\n * Execute an external script that roots a server, and wait for it to complete. **/\\nasync function doRoot(ns, server) {\\n    if (verbose) log(ns, `Rooting Server ${server.name}`);\\n    const pid = await exec(ns, getFilePath('/Tasks/crack-host.js'), daemonHost, 1, server.name);\\n    await waitForProcessToComplete_Custom(ns, getHomeProcIsAlive(ns), pid);\\n    server.resetCaches(); // If rooted status was cached, we must now reset it\\n}\\n\\n// Main targeting loop\\n/** @param {NS} ns **/\\nasync function doTargetingLoop(ns) {\\n    log(ns, \\\"doTargetingLoop\\\");\\n    let loops = -1;\\n    //var isHelperListLaunched = false; // Uncomment this and related code to keep trying to start helpers\\n    do {\\n        loops++;\\n        if (loops > 0) await ns.sleep(loopInterval);\\n        try {\\n            let start = Date.now();\\n            psCache = []; // Clear the cache of the process list we update once per loop\\n            await buildServerList(ns, true); // Check if any new servers have been purchased by the external host_manager process\\n            await updatePortCrackers(ns); // Check if any new port crackers have been purchased\\n            await getPlayerInfo(ns); // Force an update of _cachedPlayerInfo\\n            // Run some auxilliary processes that ease the ram burden of this daemon and add additional functionality (like managing hacknet or buying servers)\\n            await runPeriodicScripts(ns);\\n            if (stockMode) await updateStockPositions(ns); // In stock market manipulation mode, get our current position in all stocks\\n            const targetingOrder = await getAllServersByTargetOrder();\\n\\n            if (loops % 60 == 0) { // For more expensive updates, only do these every so often\\n                // If we have not yet launched all helpers (e.g. awaiting more home ram, or TIX API to be purchased) see if any are now ready to be run\\n                if (!allHelpersRunning) allHelpersRunning = await runStartupScripts(ns);\\n                // Pull additional data about servers that infrequently changes\\n                await refreshDynamicServerData(ns, allHostNames);\\n                // Occassionally print our current targetting order (todo, make this controllable with a flag or custom UI?)\\n                if (verbose && loops % 600 == 0) {\\n                    const targetsLog = 'Targetting Order:\\\\n  ' + targetingOrder.filter(s => s.shouldHack()).map(s =>\\n                        `${s.isPrepped() ? '*' : ' '} ${s.canHack() ? '✓' : 'X'} Money: ${formatMoney(s.getMoney(), 4)} of ${formatMoney(s.getMaxMoney(), 4)} ` +\\n                        `(${formatMoney(s.getMoneyPerRamSecond(), 4)}/ram.sec), Sec: ${formatNumber(s.getSecurity(), 3)} of ${formatNumber(s.getMinSecurity(), 3)}, ` +\\n                        `TTW: ${formatDuration(s.timeToWeaken())}, Hack: ${s.requiredHackLevel} - ${s.name}` +\\n                        (!stockMode || !serverStockSymbols[s.name] ? '' : ` Sym: ${serverStockSymbols[s.name]} Owned: ${serversWithOwnedStock.includes(s.name)} ` +\\n                            `Manip: ${shouldManipulateGrow[s.name] ? \\\"grow\\\" : shouldManipulateHack[s.name] ? \\\"hack\\\" : '(disabled)'}`))\\n                        .join('\\\\n  ');\\n                    log(ns, targetsLog);\\n                    ns.write(\\\"/Temp/targets.txt\\\", targetsLog, \\\"w\\\");\\n                }\\n            }\\n            // Processed servers will be split into various lists for generating a summary at the end\\n            /**@returns{Server[]}*/const n = () => []; // Trick to initialize new arrays with a strong type\\n            const prepping = n(), preppedButNotTargeting = n(), targeting = n(), notRooted = n(), cantHack = n(),\\n                cantHackButPrepped = n(), cantHackButPrepping = n(), noMoney = n(), failed = n(), skipped = n();\\n            let lowestUnhackable = 99999;\\n\\n            // Hack: We can get stuck and never improve if we don't try to prep at least one server to improve our future targeting options.\\n            // So get the first un-prepped server that is within our hacking level, and move it to the front of the list.\\n            let firstUnpreppedServerIndex = -1;\\n            for (var i = 0; i < targetingOrder.length; i++) {\\n                const s = targetingOrder[i];\\n                if (s.shouldHack() && s.canHack() && !s.isPrepped() && !(await s.isTargeting())) {\\n                    firstUnpreppedServerIndex = i; // Note: Can't use array.findIndex due to await.\\n                    break;\\n                }\\n            }\\n            if (firstUnpreppedServerIndex !== -1 && !stockMode)\\n                targetingOrder.unshift(targetingOrder.splice(firstUnpreppedServerIndex, 1)[0]);\\n\\n            // If this gets set to true, the loop will continue (e.g. to gather information), but no more work will be scheduled\\n            var workCapped = false;\\n            // Function to assess whether we've hit some cap that should prevent us from scheduling any more work\\n            let isWorkCapped = () => workCapped = workCapped || failed.length > 0 // Scheduling fails when there's insufficient RAM. We've likely encountered a \\\"soft cap\\\" on ram utilization e.g. due to fragmentation\\n                || getTotalNetworkUtilization() >= maxUtilization // \\\"hard cap\\\" on ram utilization, can be used to reserve ram or reduce the rate of encountering the \\\"soft cap\\\"\\n                || targeting.length >= maxTargets // variable cap on the number of simultaneous targets\\n                || (targeting.length + prepping.length) >= (maxTargets + maxPreppingAtMaxTargets); // Only allow a couple servers to be prepped in advance when at max-targets\\n\\n            // check for servers that need to be rooted\\n            // simultaneously compare our current target to potential targets\\n            for (var i = 0; i < targetingOrder.length; i++) {\\n                if ((Date.now() - start) >= maxLoopTime) { // To avoid lagging the game, completely break out of the loop if we start to run over\\n                    skipped.push(...targetingOrder.slice(i));\\n                    workCapped = true;\\n                    break;\\n                }\\n\\n                const server = targetingOrder[i];\\n                server.resetCaches(); // For each new loop, reset any cached properties\\n                // Attempt to root any servers that are not yet rooted\\n                if (!server.hasRoot() && server.canCrack())\\n                    await doRoot(ns, server);\\n\\n                // Check whether we can / should attempt any actions on this server\\n                if (!server.shouldHack()) { // Ignore servers we own (bought servers / home / no money)\\n                    noMoney.push(server);\\n                } else if (!server.hasRoot()) { // Can't do anything to servers we have not yet cracked\\n                    notRooted.push(server);\\n                } else if (!server.canHack()) { // Note servers above our Hack skill. We can prep them a little if we have spare RAM at the end.\\n                    cantHack.push(server);\\n                    lowestUnhackable = Math.min(lowestUnhackable, server.requiredHackLevel);\\n                    // New logic allows for unhackable servers to be prepping. Keep tabs on how many we have of each\\n                    if (server.isPrepped())\\n                        cantHackButPrepped.push(server);\\n                    else if (await server.isPrepping())\\n                        cantHackButPrepping.push(server);\\n                } else if (await server.isTargeting()) { // Note servers already being targeted from a prior loop\\n                    targeting.push(server); // TODO: Switch to continuously queing batches in the seconds leading up instead of far in advance with large delays\\n                } else if (await server.isPrepping()) { // Note servers already being prepped from a prior loop\\n                    prepping.push(server);\\n                } else if (isWorkCapped() || xpOnly) { // Various conditions for which we'll postpone any additional work on servers\\n                    if (xpOnly && (((nextXpCycleEnd[server.name] || 0) > start - 10000) || (await server.isXpFarming())))\\n                        targeting.push(server); // A server counts as \\\"targeting\\\" if in XP mode and its due to be farmed or was in the past 10 seconds\\n                    else\\n                        skipped.push(server);\\n                } else if (!hackOnly && true == await prepServer(ns, server)) { // Returns true if prepping, false if prepping failed, null if prepped\\n                    if (server.previouslyPrepped)\\n                        log(ns, `WARNING ${server.prepRegressions++}: Server was prepped, but now at security: ${formatNumber(server.getSecurity())} ` +\\n                            `(min ${formatNumber(server.getMinSecurity())}) money: ${formatMoney(server.getMoney(), 3)} (max ${formatMoney(server.getMaxMoney(), 3)}). ` +\\n                            `Prior cycle: ${server.previousCycle}. ETA now (Hack ${playerHackSkill()}) is ${formatDuration(server.timeToWeaken())}`, true, 'warning');\\n                    prepping.push(server); // Perform weakening and initial growth until the server is \\\"perfected\\\" (unless in hack-only mode)\\n                } else if (!hackOnly && !server.isPrepped()) { // If prepServer returned false or null. Check ourselves whether it is prepped\\n                    log(ns, 'Prep failed for \\\"' + server.name + '\\\" (RAM Utilization: ' + (getTotalNetworkUtilization() * 100).toFixed(2) + '%)');\\n                    failed.push(server);\\n                } else if (targeting.length >= maxTargets) { // Hard cap on number of targets, changes with utilization\\n                    server.previouslyPrepped = true;\\n                    preppedButNotTargeting.push(server);\\n                } else { // Otherwise, server is prepped at min security & max money and ready to target\\n                    var performanceSnapshot = optimizePerformanceMetrics(ns, server); // Adjust the percentage to steal for optimal scheduling\\n                    if (server.actualPercentageToSteal() === 0) { // Not enough RAM for even one hack thread of this next-best target.\\n                        failed.push(server);\\n                    } else if (true == await performScheduling(ns, server, performanceSnapshot)) { // once conditions are optimal, fire barrage after barrage of cycles in a schedule\\n                        targeting.push(server);\\n                    } else {\\n                        log(ns, 'Targeting failed for \\\"' + server.name + '\\\" (RAM Utilization: ' + (getTotalNetworkUtilization() * 100).toFixed(2) + '%)');\\n                        failed.push(server);\\n                    }\\n                }\\n\\n                // Hack: Quickly ramp up our max-targets without waiting for the next loop if we are far below the low-utilization threshold\\n                if (lowUtilizationIterations >= 5 && targeting.length == maxTargets && maxTargets < allHostNames.length - noMoney.length) {\\n                    let network = getNetworkStats();\\n                    let utilizationPercent = network.totalUsedRam / network.totalMaxRam;\\n                    if (utilizationPercent < lowUtilizationThreshold / 2) maxTargets++;\\n                }\\n            }\\n\\n            // Mini-loop for servers that we can't hack yet, but might have access to soon, we can at least prep them.\\n            if (!isWorkCapped() && cantHack.length > 0 && !hackOnly && !xpOnly) {\\n                // Prep in order of soonest to become available to us\\n                cantHack.sort(function (a, b) {\\n                    var diff = a.requiredHackLevel - b.requiredHackLevel;\\n                    return diff != 0.0 ? diff : b.getMoneyPerRamSecond() - a.getMoneyPerRamSecond(); // Break ties by sorting by max-money\\n                });\\n                // Try to prep them all unless one of our capping rules are hit\\n                // TODO: Something was not working right here (might be working now that prep code is fixed) so we can probably start prepping more than 1 server again.\\n                for (var j = 0; j < 1 /*cantHack.length*/; j++) {\\n                    const server = cantHack[j];\\n                    if (isWorkCapped()) break;\\n                    if (cantHackButPrepped.includes(server) || cantHackButPrepping.includes(server))\\n                        continue;\\n                    var prepResult = await prepServer(ns, server);\\n                    if (prepResult == true) {\\n                        cantHackButPrepping.push(server);\\n                    } else if (prepResult == null) {\\n                        cantHackButPrepped.push(server);\\n                    } else {\\n                        log(ns, 'Pre-Prep failed for \\\"' + server.name + '\\\" with ' + server.requiredHackLevel +\\n                            ' hack requirement (RAM Utilization: ' + (getTotalNetworkUtilization() * 100).toFixed(2) + '%)');\\n                        failed.push(server);\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            let network = getNetworkStats();\\n            let utilizationPercent = network.totalUsedRam / network.totalMaxRam;\\n            highUtilizationIterations = utilizationPercent >= maxUtilization ? highUtilizationIterations + 1 : 0;\\n            lowUtilizationIterations = utilizationPercent <= lowUtilizationThreshold ? lowUtilizationIterations + 1 : 0;\\n\\n            // If we've been at low utilization for longer than the cycle of all our targets, we can add a target\\n            let intervalsPerTargetCycle = targeting.length == 0 ? 120 :\\n                Math.ceil((targeting.reduce((max, t) => Math.max(max, t.timeToWeaken()), 0) + cycleTimingDelay) / loopInterval);\\n            //log(ns, `intervalsPerTargetCycle: ${intervalsPerTargetCycle} lowUtilizationIterations: ${lowUtilizationIterations} loopInterval: ${loopInterval}`);\\n            if (lowUtilizationIterations > intervalsPerTargetCycle && skipped.length > 0) {\\n                maxTargets++;\\n                log(ns, `Increased max targets to ${maxTargets} since utilization (${formatNumber(utilizationPercent * 100, 3)}%) has been quite low for ${lowUtilizationIterations} iterations.`);\\n                lowUtilizationIterations = 0; // Reset the counter of low-utilization iterations\\n            } else if (highUtilizationIterations > 60) { // Decrease max-targets by 1 ram utilization is too high (prevents scheduling efficient cycles)\\n                maxTargets -= 1;\\n                log(ns, `Decreased max targets to ${maxTargets} since utilization has been > ${formatNumber(maxUtilization * 100, 3)}% for 60 iterations and scheduling failed.`);\\n                highUtilizationIterations = 0; // Reset the counter of high-utilization iterations\\n            }\\n            maxTargets = Math.max(maxTargets, targeting.length - 1, 1); // Ensure that after a restart, maxTargets start off with no less than 1 fewer max targets\\n            allTargetsPrepped = skipped.length == 0 && prepping.length == 0;\\n\\n            // If there is still unspent utilization, we can use a chunk of it it to farm XP\\n            if (xpOnly) { // If all we want to do is gain hack XP\\n                let time = await farmHackXp(ns, 1.00, verbose);\\n                loopInterval = Math.min(1000, time || 1000); // Wake up earlier if we're almost done an XP cycle\\n            } else if (!isWorkCapped() && lowUtilizationIterations > 10) {\\n                let expectedRunTime = getBestXPFarmTarget().timeToHack();\\n                let freeRamToUse = (expectedRunTime < loopInterval) ? // If expected runtime is fast, use as much RAM as we want, it'll all be free by our next loop.\\n                    1 - (1 - lowUtilizationThreshold) / (1 - utilizationPercent) : // Take us just up to the threshold for 'lowUtilization' so we don't cause unecessary server purchases\\n                    1 - (1 - maxUtilizationPreppingAboveHackLevel - 0.05) / (1 - utilizationPercent); // Otherwise, leave more room (e.g. for scheduling new batches.)\\n                await farmHackXp(ns, freeRamToUse, verbose && (expectedRunTime > 10000 || lowUtilizationIterations % 10 == 0), 1);\\n            }\\n\\n            // Use any unspent RAM on share if we are currently working for a faction\\n            const maxShareUtilization = options['share-max-utilization']\\n            if (failed.length <= 0 && utilizationPercent < maxShareUtilization && // Only share RAM if we have succeeded in all hack cycle scheduling and have RAM to space\\n                (Date.now() - lastShareTime) > options['share-cooldown'] && // Respect the share rate-limit if configured to leave gaps for scheduling\\n                !options['no-share'] && (options['share'] || network.totalMaxRam > 1024)) // If not explicitly enabled or disabled, auto-enable share at 1TB of network RAM\\n            {\\n                // Figure out if the player is currently working (no point in RAM share if we aren't currently working for a faction)\\n                let workInfo = await getCurrentWorkInfo(ns);\\n                if (workInfo.type == \\\"FACTION\\\") {\\n                    let shareTool = getTool(\\\"share\\\");\\n                    let maxThreads = shareTool.getMaxThreads(); // This many threads would use up 100% of the (1-utilizationPercent)% RAM remaining\\n                    if (xpOnly) maxThreads -= Math.floor(getServerByName('home').ramAvailable() / shareTool.cost); // Reserve home ram entirely for XP cycles when in xpOnly mode\\n                    network = getNetworkStats(); // Update network stats since they may have changed after scheduling xp cycles above\\n                    utilizationPercent = network.totalUsedRam / network.totalMaxRam;\\n                    let shareThreads = Math.floor(maxThreads * (maxShareUtilization - utilizationPercent) / (1 - utilizationPercent)); // Ensure we don't take utilization above (1-maxShareUtilization)%\\n                    if (shareThreads > 0) {\\n                        if (verbose) log(ns, `Creating ${shareThreads.toLocaleString('en')} share threads to improve faction rep gain rates. Using ${formatRam(shareThreads * 4)} of ${formatRam(network.totalMaxRam)} ` +\\n                            `(${(400 * shareThreads / network.totalMaxRam).toFixed(1)}%) of all RAM). Final utilization will be ${(100 * (4 * shareThreads + network.totalUsedRam) / network.totalMaxRam).toFixed(1)}%`);\\n                        await arbitraryExecution(ns, getTool('share'), shareThreads, [Date.now()], null, true) // Note: Need a unique argument to facilitate multiple parallel share scripts on the same server\\n                        lastShareTime = Date.now();\\n                    }\\n                } //else log(ns, `Not Sharing. (Not working for faction. Work is ${JSON.stringify(workInfo)})`);\\n            } //else log(ns, `Not Sharing. workCapped: ${isWorkCapped()} utilizationPercent: ${utilizationPercent} maxShareUtilization: ${maxShareUtilization} cooldown: ${formatDuration(Date.now() - lastShareTime)} networkRam: ${network.totalMaxRam}`);\\n\\n            // Log some status updates\\n            let keyUpdates = `Of ${allHostNames.length} total servers:\\\\n > ${noMoney.length} were ignored (owned or no money)`;\\n            if (notRooted.length > 0 || ownedCracks.length < 5)\\n                keyUpdates += `, ${notRooted.length} are not rooted (missing ${crackNames.filter(c => !ownedCracks.includes(c)).join(', ')})`;\\n            if (cantHack.length > 0)\\n                keyUpdates += `\\\\n > ${cantHack.length} cannot be hacked (${cantHackButPrepping.length} prepping, ` +\\n                    `${cantHackButPrepped.length} prepped, next unlock at Hack ${lowestUnhackable})`;\\n            if (preppedButNotTargeting.length > 0)\\n                keyUpdates += `\\\\n > ${preppedButNotTargeting.length} are prepped but are not a priority target`;\\n            if (skipped.length > 0)\\n                keyUpdates += `\\\\n > ${skipped.length} were skipped for now (time, RAM, or target + prepping cap reached)`;\\n            if (failed.length > 0)\\n                keyUpdates += `\\\\n > ${failed.length} servers failed to be scheduled (insufficient RAM?).`;\\n            keyUpdates += `\\\\n > Targeting: ${targeting.length} servers, Prepping: ${prepping.length + cantHackButPrepping.length}`;\\n            if (xpOnly)\\n                keyUpdates += `\\\\n > Grinding XP from ${targeting.map(s => s.name).join(\\\", \\\")}`;\\n            // To reduce log spam, only log if some key status changes, or if it's been a minute\\n            if (keyUpdates != lastUpdate || (Date.now() - lastUpdateTime) > 60000) {\\n                log(ns, (lastUpdate = keyUpdates) +\\n                    '\\\\n > RAM Utilization: ' + formatRam(Math.ceil(network.totalUsedRam)) + ' of ' + formatRam(network.totalMaxRam) + ' (' + (utilizationPercent * 100).toFixed(1) + '%) ' +\\n                    `for ${lowUtilizationIterations || highUtilizationIterations} its, Max Targets: ${maxTargets}, Loop Took: ${Date.now() - start}ms`);\\n                lastUpdateTime = Date.now();\\n            }\\n            //log(ns, 'Prepping: ' + prepping.map(s => s.name).join(', '))\\n            //log(ns, 'targeting: ' + targeting.map(s => s.name).join(', '))\\n        } catch (err) {\\n            // Sometimes a script is shut down by throwing an object contianing internal game script info. Detect this and exit silently\\n            if (err?.env?.stopFlag) return;\\n            // Note netscript errors are raised as a simple string (no message property)\\n            var errorMessage = typeof err === 'string' ? err : err.message || JSON.stringify(err);\\n            if (err?.stack) errorMessage += '\\\\n' + err.stack;\\n            log(ns, `WARNING: daemon.js Caught an error in the targeting loop: ${errorMessage}`, true, 'warning');\\n            continue;\\n        }\\n    } while (!runOnce);\\n}\\n\\n// How much a weaken thread is expected to reduce security by\\nlet actualWeakenPotency = () => bitnodeMults.ServerWeakenRate * weakenThreadPotency;\\n\\n// Get a dictionary from retrieving the same infromation for every server name\\nasync function getServersDict(ns, command, serverNames) {\\n    return await getNsDataThroughFile(ns, `Object.fromEntries(ns.args.map(server => [server, ns.${command}(server)]))`,\\n        `/Temp/${command}-all.txt`, serverNames);\\n}\\n\\nlet dictInitialServerInfos = (/**@returns{{[serverName: string]: number;}}*/() => undefined)();\\nlet dictServerRequiredHackinglevels = (/**@returns{{[serverName: string]: number;}}*/() => undefined)();\\nlet dictServerNumPortsRequired = (/**@returns{{[serverName: string]: number;}}*/() => undefined)();\\nlet dictServerMinSecurityLevels = (/**@returns{{[serverName: string]: number;}}*/() => undefined)();\\nlet dictServerMaxMoney = (/**@returns{{[serverName: string]: number;}}*/() => undefined)();\\nlet dictServerProfitInfo = (/**@returns{{[serverName: string]: {gainRate: number, expRate: number}}}*/() => undefined)();\\nlet dictServerGrowths = (/**@returns{{[serverName: string]: number;}}*/() => undefined)();\\n\\n/** Gathers up arrays of server data via external request to have the data written to disk.\\n * @param {NS} ns */\\nasync function getStaticServerData(ns, serverNames) {\\n    dictServerRequiredHackinglevels = await getServersDict(ns, 'getServerRequiredHackingLevel', serverNames);\\n    dictServerNumPortsRequired = await getServersDict(ns, 'getServerNumPortsRequired', serverNames);\\n    dictServerGrowths = await getServersDict(ns, 'getServerGrowth', serverNames);\\n    // The \\\"GetServer\\\" object result is now required to use the formulas API (due to type checking that the parameter is a valid \\\"server\\\" instance)\\n    // TODO: See if in the future they add a \\\"ns.formulas.dummyServer()\\\" function or similar, then we no longer need this.    \\n    // TODO: Iff this becomes permanent, might as well get other static server data from the resulting server objectswhy is it that every keystroke\\n    dictInitialServerInfos = await getServersDict(ns, 'getServer', serverNames);\\n    await refreshDynamicServerData(ns, serverNames);\\n}\\n\\n/** Refresh data that might change over time, but for which having precice up-to-date information isn't critical.\\n * @param {NS} ns **/\\nasync function refreshDynamicServerData(ns, serverNames) {\\n    if (verbose) log(ns, \\\"refreshDynamicServerData\\\");\\n    // Min Security / Max Money can be affected by Hashnet purchases, so we should update this occasionally\\n    dictServerMinSecurityLevels = await getServersDict(ns, 'getServerMinSecurityLevel', serverNames);\\n    dictServerMaxMoney = await getServersDict(ns, 'getServerMaxMoney', serverNames);\\n    // Get the information about the relative profitability of each server (affects targetting order)\\n    const pid = await exec(ns, getFilePath('analyze-hack.js'), daemonHost, 1, '--all', '--silent');\\n    await waitForProcessToComplete_Custom(ns, getHomeProcIsAlive(ns), pid);\\n    const analyzeHackResult = dictServerProfitInfo = ns.read('/Temp/analyze-hack.txt');\\n    if (!analyzeHackResult)\\n        log(ns, \\\"WARNING: analyze-hack info unavailable. Will use fallback approach.\\\");\\n    else\\n        dictServerProfitInfo = Object.fromEntries(JSON.parse(analyzeHackResult).map(s => [s.hostname, s]));\\n    // Determine whether we have purchased stock API accesses yet (affects reserving and attempts to manipulate stock markets)\\n    haveTixApi = haveTixApi || await getNsDataThroughFile(ns, `ns.stock.hasTIXAPIAccess()`);\\n    have4sApi = have4sApi || await getNsDataThroughFile(ns, `ns.stock.has4SDataTIXAPI()`);\\n    // If required, determine the current terminal server (used when intelligence farming)\\n    if (options.i)\\n        currentTerminalServer = getServerByName(await getNsDataThroughFile(ns, 'ns.singularity.getCurrentServer()'));\\n}\\n\\nclass Server {\\n    /** @param {NS} ns\\n     * @param {string} node - a.k.a host / server **/\\n    constructor(ns, node) {\\n        this.ns = ns;\\n        this.name = node;\\n        this.server = dictInitialServerInfos[node];\\n        this.requiredHackLevel = dictServerRequiredHackinglevels[node];\\n        this.portsRequired = dictServerNumPortsRequired[node];\\n        this.serverGrowth = dictServerGrowths[node];\\n        this.percentageToSteal = 1.0 / 16.0; // This will get tweaked automatically based on RAM available and the relative value of this server\\n        this.previouslyPrepped = false;\\n        this.prepRegressions = 0;\\n        this.previousCycle = null;\\n        this._isPrepped = null;\\n        this._isPrepping = null;\\n        this._isTargeting = null;\\n        this._isXpFarming = null;\\n        this._percentStolenPerHackThread = null;\\n        this._hasRootCached = null; // Once we get root, we never lose it, so we can stop asking\\n    }\\n    resetCaches() {\\n        // Reset any caches that can change over time\\n        this._isPrepped = this._isPrepping = this._isTargeting = this._isXpFarming =\\n            this._percentStolenPerHackThread = null;\\n        // Once true - Does not need to be reset, because once rooted, this fact will never change\\n        if (this._hasRootCached == false) this._hasRootCached = null;\\n    }\\n    getMinSecurity() { return dictServerMinSecurityLevels[this.name] ?? 0; } // Servers not in our dictionary were purchased, and so undefined is okay\\n    getMaxMoney() { return dictServerMaxMoney[this.name] ?? 0; }\\n    getMoneyPerRamSecond() { return dictServerProfitInfo ? dictServerProfitInfo[this.name]?.gainRate ?? 0 : (dictServerMaxMoney[this.name] ?? 0); }\\n    getExpPerSecond() { return dictServerProfitInfo ? dictServerProfitInfo[this.name]?.expRate ?? 0 : (1 / dictServerMinSecurityLevels[this.name] ?? 0); }\\n    getMoney() { return this.ns.getServerMoneyAvailable(this.name); }\\n    getSecurity() { return this.ns.getServerSecurityLevel(this.name); }\\n    canCrack() { return ownedCracks.length >= this.portsRequired; }\\n    canHack() { return this.requiredHackLevel <= playerHackSkill(); }\\n    shouldHack() {\\n        return this.getMaxMoney() > 0 && this.name !== \\\"home\\\" && !this.name.startsWith('hacknet-server-') && !this.name.startsWith('hacknet-node-') &&\\n            !this.name.startsWith(purchasedServersName); // Hack, but beats wasting 2.25 GB on ns.getPurchasedServers()\\n    }\\n    // \\\"Prepped\\\" means current security is at the minimum, and current money is at the maximum\\n    isPrepped() {\\n        if (this._isPrepped != null) return this._isPrepped;\\n        let currentSecurity = this.getSecurity();\\n        let currentMoney = this.getMoney();\\n        // Logic for whether we consider the server \\\"prepped\\\" (tolerate a 1% discrepancy)\\n        this._isPrepped = (currentSecurity == 0 || ((this.getMinSecurity() / currentSecurity) >= 0.99)) &&\\n            (this.getMaxMoney() != 0 && ((currentMoney / this.getMaxMoney()) >= 0.99) || stockFocus /* Only prep security in stock-focus mode */);\\n        return this._isPrepped;\\n    }\\n    // Function to tell if the sever is running any tools, with optional filtering criteria on the tool being run\\n    async isSubjectOfRunningScript(filter, useCache = true, count = false) {\\n        let total = 0;\\n        for (const hostname of allHostNames) // For each server that could be running scripts (TODO: Maintain a smaller list of only servers with more than 1.6GB RAM)\\n            for (const process of processList(this.ns, hostname, useCache)) // For all scripts on the server\\n                // Does the script's arguments suggest it is targetting this server and matches the filter criteria?\\n                if (process.args.length > 0 && process.args[0] == this.name && (!filter || filter(process))) {\\n                    if (count)\\n                        total++;\\n                    else\\n                        return true;\\n                }\\n        return count ? total : false;\\n    }\\n    async isPrepping(useCache = true) {\\n        this._isPrepping ??= await this.isSubjectOfRunningScript(process => process.args.length > 4 && process.args[4] == \\\"prep\\\", useCache);\\n        return this._isPrepping;\\n    }\\n    async isTargeting(useCache = true) {\\n        this._isTargeting ??= await this.isSubjectOfRunningScript(process => process.args.length > 4 && process.args[4].startsWith('Batch'), useCache);\\n        return this._isTargeting;\\n    }\\n    async isXpFarming(useCache = true) {\\n        this._isXpFarming ??= await this.isSubjectOfRunningScript(process => process.args.length > 4 && process.args[4] == 'FarmXP', useCache);\\n        return this._isXpFarming;\\n    }\\n    serverGrowthPercentage() {\\n        return this.serverGrowth * bitnodeMults.ServerGrowthRate * getPlayerHackingGrowMulti() / 100;\\n    }\\n    adjustedGrowthRate() {\\n        return Math.min(maxGrowthRate, 1 + ((unadjustedGrowthRate - 1) / this.getMinSecurity()));\\n    }\\n    actualServerGrowthRate() {\\n        return Math.pow(this.adjustedGrowthRate(), this.serverGrowthPercentage());\\n    }\\n    // this is the target growth coefficient *immediately*\\n    targetGrowthCoefficient() {\\n        return this.getMaxMoney() / Math.max(this.getMoney(), 1);\\n    }\\n    // this is the target growth coefficient per cycle, based on theft\\n    targetGrowthCoefficientAfterTheft() {\\n        return 1 / (1 - (this.getHackThreadsNeeded() * this.percentageStolenPerHackThread()));\\n    }\\n    cyclesNeededForGrowthCoefficient() {\\n        return Math.log(this.targetGrowthCoefficient()) / Math.log(this.adjustedGrowthRate());\\n    }\\n    cyclesNeededForGrowthCoefficientAfterTheft() {\\n        return Math.log(this.targetGrowthCoefficientAfterTheft()) / Math.log(this.adjustedGrowthRate());\\n    }\\n    percentageStolenPerHackThread() {\\n        if (this._percentStolenPerHackThread !== null) return this._percentStolenPerHackThread;\\n        if (hasFormulas) {\\n            try {\\n                // Mock the properties required to determine the hackPercent at minimum security\\n                this.server.hackDifficulty = this.getMinSecurity();\\n                this.server.requiredHackingSkill = this.requiredHackLevel;\\n                return this._percentStolenPerHackThread =\\n                    this.ns.formulas.hacking.hackPercent(this.server, _cachedPlayerInfo); // hackAnalyzePercent(this.name) / 100;\\n            } catch {\\n                hasFormulas = false;\\n            }\\n        }\\n        return this._percentStolenPerHackThread =\\n            Math.min(1, Math.max(0, (((100 - Math.min(100, this.getMinSecurity())) / 100) *\\n                ((playerHackSkill() - (this.requiredHackLevel - 1)) / playerHackSkill()) / 240)));\\n    }\\n    actualPercentageToSteal() {\\n        return this.getHackThreadsNeeded() * this.percentageStolenPerHackThread();\\n    }\\n    getHackThreadsNeeded() {\\n        // Force rounding of low-precision digits before taking the floor, to avoid double imprecision throwing us way off.\\n        return Math.floor((this.percentageToSteal / this.percentageStolenPerHackThread()).toPrecision(14));\\n    }\\n    getGrowThreadsNeeded() {\\n        return Math.min(this.getMaxMoney(),\\n            // TODO: Not true! Worst case is 1$ per thread and *then* it multiplies. We can return a much lower number here.\\n            Math.ceil((this.cyclesNeededForGrowthCoefficient() / this.serverGrowthPercentage()).toPrecision(14)));\\n    }\\n    getWeakenThreadsNeeded() {\\n        return Math.ceil(((this.getSecurity() - this.getMinSecurity()) / actualWeakenPotency()).toPrecision(14));\\n    }\\n    getGrowThreadsNeededAfterTheft() {\\n        return Math.min(this.getMaxMoney(),\\n            Math.ceil((this.cyclesNeededForGrowthCoefficientAfterTheft() / this.serverGrowthPercentage() * recoveryThreadPadding).toPrecision(14)));\\n    }\\n    getWeakenThreadsNeededAfterTheft() {\\n        return Math.ceil((this.getHackThreadsNeeded() * hackThreadHardening / actualWeakenPotency() * recoveryThreadPadding).toPrecision(14));\\n    }\\n    getWeakenThreadsNeededAfterGrowth() {\\n        return Math.ceil((this.getGrowThreadsNeededAfterTheft() * growthThreadHardening / actualWeakenPotency() * recoveryThreadPadding).toPrecision(14));\\n    }\\n    hasRoot() { return this._hasRootCached ??= this.ns.hasRootAccess(this.name); }\\n    isHost() { return this.name == daemonHost; }\\n    totalRam() {\\n        let maxRam = this.ns.getServerMaxRam(this.name);\\n        if (this.name == \\\"home\\\")\\n            maxRam = Math.max(0, maxRam - homeReservedRam); // Complete HACK: but for most planning purposes, we want to pretend home has less ram to leave room for temp scripts to run\\n        return maxRam;\\n    }\\n    usedRam() { return this.ns.getServerUsedRam(this.name); }\\n    ramAvailable() { return this.totalRam() - this.usedRam(); }\\n    growDelay() { return this.timeToWeaken() - this.timeToGrow() + cycleTimingDelay; }\\n    hackDelay() { return this.timeToWeaken() - this.timeToHack(); }\\n    timeToWeaken() { return this.ns.getWeakenTime(this.name); }\\n    timeToGrow() { return this.ns.getGrowTime(this.name); }\\n    timeToHack() { return this.ns.getHackTime(this.name); }\\n}\\n\\n// Helpers to get slices of info / cumulative stats across all rooted servers\\nfunction getNetworkStats() {\\n    const rootedServers = getAllServers().filter(server => server.hasRoot());\\n    const listOfServersFreeRam = rootedServers.map(s => s.ramAvailable()).filter(ram => ram > 1.6); // Servers that can't run a script don't count\\n    const totalMaxRam = rootedServers.map(s => s.totalRam()).reduce((a, b) => a + b, 0);\\n    const totalFreeRam = Math.max(0, listOfServersFreeRam.reduce((a, b) => a + b, 0)); // Hack, free ram can be negative due to \\\"pretending\\\" reserved home ram doesn't exist. Clip to 0\\n    return {\\n        listOfServersFreeRam: listOfServersFreeRam,\\n        totalMaxRam: totalMaxRam,\\n        totalFreeRam: totalFreeRam,\\n        totalUsedRam: totalMaxRam - totalFreeRam,\\n        // The money we could make if we took 100% from every currently hackable server, to help us guage how relatively profitable each server is\\n        //totalMaxMoney: rootedServers.filter(s => s.canHack() && s.shouldHack()).map(s => s.getMaxMoney()).reduce((a, b) => a + b, 0)\\n    };\\n}\\n// Simpler function to get current total percentage of ram used across the network\\nfunction getTotalNetworkUtilization() {\\n    const utilizationStats = getNetworkStats();\\n    return utilizationStats.totalUsedRam / utilizationStats.totalMaxRam;\\n}\\n\\n/** return a \\\"performance snapshot\\\" (Ram required for the cycle) to compare against optimal, or another snapshot\\n * TODO: Better gauge of performance might be money stolen per (RAM * time) cost\\n * @param {} currentTarget\\n * @param {{ listOfServersFreeRam: number[]; totalMaxRam: number; totalFreeRam: number; totalUsedRam: number; }} networkStats */\\nfunction getPerformanceSnapshot(currentTarget, networkStats) {\\n    // The total RAM cost of running one weaken/hack/grow cycle to steal `currentTarget.percentageToSteal` of `currentTarget.money`\\n    const weaken1Cost = currentTarget.getWeakenThreadsNeededAfterTheft() * getTool(\\\"weak\\\").cost;\\n    const weaken2Cost = currentTarget.getWeakenThreadsNeededAfterGrowth() * getTool(\\\"weak\\\").cost;\\n    const growCost = currentTarget.getGrowThreadsNeededAfterTheft() * getTool(\\\"grow\\\").cost;\\n    const hackCost = currentTarget.getHackThreadsNeeded() * getTool(\\\"hack\\\").cost;\\n    // Simulate how many times we could schedule this batch given current server ram availability\\n    // (and hope that whatever executes the tasks in this batch is clever enough to slot them in as such (TODO: simulate using our actual executor logic?)\\n    const jobs = [weaken1Cost, weaken2Cost, growCost, hackCost].sort((a, b) => b - a); // Sort jobs largest to smallest\\n    const simulatedRemainingRam = networkStats.listOfServersFreeRam.slice()\\n        // Scheduler would sort servers by largest to smallest before slotting jobs\\n        // Technically, we should re-sort after each simulated job, but for performance (and because this is an estimate), don't bother.\\n        .sort((a, b) => b - a);\\n    var maxScheduled = -1;\\n    var canScheduleAnother = true;\\n    while (canScheduleAnother && maxScheduled++ <= maxBatches) {\\n        for (const job of jobs) {\\n            // Find a free slot for this job, starting with largest servers as the scheduler tends to do\\n            const freeSlot = simulatedRemainingRam/*.sort((a, b) => b - a)*/.findIndex(ram => ram >= job);\\n            if (freeSlot === -1)\\n                canScheduleAnother = false;\\n            else\\n                simulatedRemainingRam[freeSlot] -= job;\\n        }\\n    }\\n    return {\\n        percentageToSteal: currentTarget.actualPercentageToSteal(),\\n        canBeScheduled: maxScheduled > 0,\\n        // Given our timing delay, **approximately** how many cycles can we initiate before the first batch's first task fires?\\n        // TODO: Do a better job of calculating this *outside* of the performance snapshot, and only calculate it once.\\n        optimalPacedCycles: Math.min(maxBatches, Math.max(1, Math.floor(((currentTarget.timeToWeaken()) / cycleTimingDelay).toPrecision(14))\\n            - 1)), // Fudge factor, this isnt an exact science\\n        // Given RAM availability, how many cycles could we schedule across all hosts?\\n        maxCompleteCycles: Math.max(maxScheduled - 1, 1) // Fudge factor. The executor isn't perfect\\n    };\\n}\\n\\n// Produce a summary string containing information about a hack batch for a given target configuration\\nlet getTargetSummary = currentTarget =>\\n    `(H:${currentTarget.getHackThreadsNeeded()} W:${currentTarget.getWeakenThreadsNeededAfterTheft()} ` +\\n    `G:${currentTarget.getGrowThreadsNeededAfterTheft()} W²:${currentTarget.getWeakenThreadsNeededAfterGrowth()}) ` +\\n    (stockMode && shouldManipulateGrow[currentTarget.name] ? 'with grow stock ' : stockMode && shouldManipulateHack[currentTarget.name] ? 'with hack stock ' : '') +\\n    `to steal ${formatNumber(currentTarget.actualPercentageToSteal() * 100)}% ` +\\n    `(${formatMoney(currentTarget.actualPercentageToSteal() * currentTarget.getMaxMoney(), 3, 1)}) ` +\\n    `ETA: ${formatDuration(currentTarget.timeToWeaken())} at Hack ${playerHackSkill()} (${currentTarget.name})`;\\n\\n// Adjusts the \\\"percentage to steal\\\" for a target based on its respective cost and the current network RAM available\\nfunction optimizePerformanceMetrics(ns, currentTarget) {\\n    const maxAdjustments = 1000;\\n    const start = Date.now();\\n    const networkStats = getNetworkStats();\\n    const percentPerHackThread = currentTarget.percentageStolenPerHackThread();\\n    const oldHackThreads = currentTarget.getHackThreadsNeeded();\\n    const oldActualPercentageToSteal = currentTarget.percentageToSteal = currentTarget.actualPercentageToSteal();\\n\\n    if (percentPerHackThread >= 1) {\\n        currentTarget.percentageToSteal = percentPerHackThread;\\n        currentTarget.percentageToSteal = 1;\\n        return getPerformanceSnapshot(currentTarget, networkStats);\\n    }\\n\\n    let lastAdjustmentSign = 1;\\n    let attempts = 0;\\n    let increment = Math.ceil((0.01 / percentPerHackThread).toPrecision(14)); // Initialize the adjustment increment to be the number of hack threads to steal roughly 1%\\n    let newHackThreads = oldHackThreads;\\n    currentTarget.percentageToSteal = Math.max(currentTarget.percentageToSteal, percentPerHackThread); // If the initial % to steal is below the minimum, raise it\\n    // Make adjustments to the number of hack threads until we zero in on the best amount\\n    while (++attempts < maxAdjustments) {\\n        var performanceSnapshot = getPerformanceSnapshot(currentTarget, networkStats);\\n        const adjustment = analyzeSnapshot(ns, performanceSnapshot, currentTarget, networkStats, increment);\\n        if (runOnce && verbose)\\n            log(ns, `Adjustment ${attempts} (increment ${increment}): ${adjustment} to ${newHackThreads} hack threads ` +\\n                `(from ${formatNumber(currentTarget.actualPercentageToSteal() * 100)}% or ${currentTarget.getHackThreadsNeeded()} hack threads)`);\\n        if (adjustment === 0.00 && increment == 1) break; // We've zeroed in on the exact number of hack threads we want\\n        if (adjustment === 0.00 || Math.sign(adjustment) != lastAdjustmentSign) { // Each time we change the direction of adjustments, slow the adjustment rate\\n            increment = Math.max(1, Math.floor((increment / 2.0).toPrecision(14)));\\n            lastAdjustmentSign = adjustment === 0.00 ? lastAdjustmentSign : Math.sign(adjustment);\\n        }\\n        newHackThreads = Math.max(newHackThreads + adjustment, 0); // Adjust the percentage to steal with pefect precision by actually adjusting the number of hack threads\\n        currentTarget.percentageToSteal = Math.max(0, newHackThreads * percentPerHackThread);\\n    }\\n    if (attempts >= maxAdjustments || verbose && currentTarget.actualPercentageToSteal() != oldActualPercentageToSteal) {\\n        log(ns, `Tuned % to steal from ${formatNumber(oldActualPercentageToSteal * 100)}% (${oldHackThreads} threads) to ` +\\n            `${formatNumber(currentTarget.actualPercentageToSteal() * 100)}% (${currentTarget.getHackThreadsNeeded()} threads) ` +\\n            `(${currentTarget.name}) Iterations: ${attempts} Took: ${Date.now() - start} ms`);\\n    }\\n    if (verbose && currentTarget.actualPercentageToSteal() == 0) {\\n        currentTarget.percentageToSteal = percentPerHackThread;\\n        log(ns, `Insufficient RAM for min cycle: ${getTargetSummary(currentTarget)}`);\\n        currentTarget.percentageToSteal = 0.0;\\n    }\\n    if (currentTarget.percentageToSteal != 0 && (currentTarget.actualPercentageToSteal() == 0 ||\\n        Math.abs(currentTarget.actualPercentageToSteal() - currentTarget.percentageToSteal) / currentTarget.percentageToSteal > 0.5))\\n        log(ns, `WARNING: Big difference between %ToSteal (${formatNumber(currentTarget.percentageToSteal * 100)}%) ` +\\n            `and actual%ToSteal (${formatNumber(currentTarget.actualPercentageToSteal() * 100)}%) after ${attempts} attempts. ` +\\n            `Min is: ${formatNumber(currentTarget.percentageStolenPerHackThread() * 100)}%`, false, 'warning');\\n    return performanceSnapshot;\\n}\\n\\n// Suggests an adjustment to the percentage to steal based on how much ram would be consumed if attempting the current percentage.\\nfunction analyzeSnapshot(ns, snapshot, currentTarget, networkStats, incrementalHackThreads) {\\n    const maxPercentageToSteal = options['max-steal-percentage'];\\n    const lastP2steal = currentTarget.percentageToSteal;\\n    // Priority is to use as close to the target ram as possible overshooting.\\n    const isOvershot = s => !s.canBeScheduled || s.maxCompleteCycles < s.optimalPacedCycles;\\n    if (verbose && runOnce)\\n        log(ns, `canBeScheduled: ${snapshot.canBeScheduled},  maxCompleteCycles: ${snapshot.maxCompleteCycles}, optimalPacedCycles: ${snapshot.optimalPacedCycles}`);\\n    if (isOvershot(snapshot)) {\\n        return -incrementalHackThreads;\\n    } else if (snapshot.maxCompleteCycles > snapshot.optimalPacedCycles && lastP2steal < maxPercentageToSteal) {\\n        // Test increasing by the increment, but if it causes us to go over maximum desired utilization, do not suggest it\\n        currentTarget.percentageToSteal = (currentTarget.getHackThreadsNeeded() + incrementalHackThreads) * currentTarget.percentageStolenPerHackThread();\\n        var comparisonSnapshot = getPerformanceSnapshot(currentTarget, networkStats);\\n        currentTarget.percentageToSteal = lastP2steal;\\n        return isOvershot(comparisonSnapshot) ? 0.00 : incrementalHackThreads;\\n    }\\n    return 0.00;\\n}\\n\\n/** @param {NS} ns **/\\nasync function performScheduling(ns, currentTarget, snapshot) {\\n    const start = Date.now();\\n    const scheduledTasks = [];\\n    const maxCycles = Math.min(snapshot.optimalPacedCycles, snapshot.maxCompleteCycles);\\n    if (!snapshot) return;\\n    if (maxCycles === 0)\\n        return log(ns, `WARNING: Attempt to schedule ${getTargetSummary(currentTarget)} returned 0 max cycles? ${JSON.stringify(snapshot)}`, false, 'warning');\\n    if (currentTarget.getHackThreadsNeeded() === 0)\\n        return log(ns, `WARNING: Attempted to schedule empty cycle ${maxCycles} x ${getTargetSummary(currentTarget)}? ${JSON.stringify(snapshot)}`, false, 'warning');\\n    let firstEnding = null, lastStart = null, lastBatch = 0, cyclesScheduled = 0;\\n    while (cyclesScheduled < maxCycles) {\\n        const newBatchStart = new Date((cyclesScheduled === 0) ? Date.now() + queueDelay : lastBatch.getTime() + cycleTimingDelay);\\n        lastBatch = new Date(newBatchStart.getTime());\\n        const batchTiming = getScheduleTiming(newBatchStart, currentTarget);\\n        if (verbose && runOnce) logSchedule(batchTiming, currentTarget); // Special log for troubleshooting batches\\n        const newBatch = getScheduleObject(batchTiming, currentTarget, scheduledTasks.length);\\n        if (firstEnding === null) { // Can't start anything after this first hack completes (until back at min security), or we risk throwing off timing\\n            firstEnding = new Date(newBatch.hackEnd.valueOf());\\n        }\\n        if (lastStart === null || lastStart < newBatch.firstFire) {\\n            lastStart = new Date(newBatch.lastFire.valueOf());\\n        }\\n        if (cyclesScheduled > 0 && lastStart >= firstEnding) {\\n            if (verbose) log(ns, `Had to stop scheduling at ${cyclesScheduled} of ${maxCycles} desired cycles (lastStart: ${lastStart} >= firstEnding: ${firstEnding}) ${JSON.stringify(snapshot)}`);\\n            break;\\n        }\\n        scheduledTasks.push(newBatch);\\n        cyclesScheduled++;\\n    }\\n\\n    for (const schedObj of scheduledTasks) {\\n        for (const schedItem of schedObj.scheduleItems) {\\n            const discriminationArg = `Batch ${schedObj.batchNumber}-${schedItem.description}`;\\n            // Args spec: [0: Target, 1: DesiredStartTime (used to delay tool start), 2: ExpectedEndTime (informational), 3: Duration (informational), 4: DoStockManipulation, 5: DisableWarnings]\\n            const args = [currentTarget.name, schedItem.start.getTime(), schedItem.end.getTime(), schedItem.end - schedItem.start, discriminationArg];\\n            args.push(...getFlagsArgs(schedItem.toolShortName, currentTarget.name));\\n            if (options.i && currentTerminalServer?.name == currentTarget.name && schedItem.toolShortName == \\\"hack\\\")\\n                schedItem.toolShortName = \\\"manualhack\\\";\\n            const result = await arbitraryExecution(ns, getTool(schedItem.toolShortName), schedItem.threadsNeeded, args)\\n            if (result == false) { // If execution fails, we have probably run out of ram.\\n                log(ns, `WARNING: Scheduling failed for ${getTargetSummary(currentTarget)} ${discriminationArg} of ${cyclesScheduled} Took: ${Date.now() - start}ms`, false, 'warning');\\n                currentTarget.previousCycle = `INCOMPLETE. Tried: ${cyclesScheduled} x ${getTargetSummary(currentTarget)}`;\\n                return false;\\n            }\\n        }\\n    }\\n    if (verbose)\\n        log(ns, `Scheduled ${cyclesScheduled} x ${getTargetSummary(currentTarget)} Took: ${Date.now() - start}ms`);\\n    currentTarget.previousCycle = `${cyclesScheduled} x ${getTargetSummary(currentTarget)}`\\n    return true;\\n}\\n\\n/** Produces a special log for troubleshooting cycle schedules */\\nlet logSchedule = (schedule, currentTarget) =>\\n    log(ns, `Current Time: ${formatDateTime(new Date())} Established a schedule for ${getTargetSummary(currentTarget)} from requested startTime ${formatDateTime(schedule.batchStart)}:` +\\n        `\\\\n  Hack - End: ${formatDateTime(schedule.hackEnd)}  Start: ${formatDateTime(schedule.hackStart)}  Time: ${formatDuration(currentTarget.timeToHack())}` +\\n        `\\\\n  Weak1- End: ${formatDateTime(schedule.firstWeakenEnd)}  Start: ${formatDateTime(schedule.firstWeakenStart)}  Time: ${formatDuration(currentTarget.timeToWeaken())}` +\\n        `\\\\n  Grow - End: ${formatDateTime(schedule.growEnd)}  Start: ${formatDateTime(schedule.growStart)}  Time: ${formatDuration(currentTarget.timeToGrow())}` +\\n        `\\\\n  Weak2- End: ${formatDateTime(schedule.secondWeakenEnd)}  Start: ${formatDateTime(schedule.secondWeakenStart)}  Time: ${formatDuration(currentTarget.timeToWeaken())}`);\\n\\n/** Produce additional args based on the hack tool name and command line flags set */\\nfunction getFlagsArgs(toolName, target, allowLooping = true) {\\n    const args = []\\n    if ([\\\"hack\\\", \\\"grow\\\"].includes(toolName)) // Push an arg used by remote hack/grow tools to determine whether it should manipulate the stock market\\n        args.push(stockMode && (toolName == \\\"hack\\\" && shouldManipulateHack[target] || toolName == \\\"grow\\\" && shouldManipulateGrow[target]) ? 1 : 0);\\n    if ([\\\"hack\\\", \\\"weak\\\"].includes(toolName))\\n        args.push(options['silent-misfires'] || // Optional arg to disable toast warnings about a failed hack if hacking money gain is disabled\\n            (toolName == \\\"hack\\\" && (bitnodeMults.ScriptHackMoneyGain == 0 || isInBn8)) ? 1 : 0); // Disable automatically in BN8 (hack income disabled)\\n    args.push(allowLooping && loopingMode ? 1 : 0); // Argument to indicate whether the cycle should loop perpetually\\n    return args;\\n}\\n\\n// returns an object that contains all 4 timed events start and end times as dates\\nfunction getScheduleTiming(fromDate, currentTarget) {\\n    const delayInterval = cycleTimingDelay / 4; // spacing interval used to pace our script resolution\\n    const hackTime = currentTarget.timeToHack(); // first to fire\\n    const weakenTime = currentTarget.timeToWeaken(); // second to fire\\n    const growTime = currentTarget.timeToGrow(); // third to fire\\n    const slowestTool = Math.max(hackTime, weakenTime, growTime);\\n    // Determine the times we want tasks to complete at, working backwards, and plan the execution start time accordingly\\n    const t4_secondWeakenResolvesAt = new Date(fromDate.getTime() + slowestTool + delayInterval * 3); // step 4 - weaken after grow fires last\\n    const t4_fireSecondWeakenAt = new Date(t4_secondWeakenResolvesAt.getTime() - weakenTime);\\n    const t3_growResolvesAt = new Date(t4_secondWeakenResolvesAt.getTime() - delayInterval); // step 3 (grow back) should resolve \\\"delay\\\" before the final weaken\\n    const t3_fireGrowAt = new Date(t3_growResolvesAt.getTime() - growTime);\\n    const t2_firstWeakenResolvesAt = new Date(t3_growResolvesAt.getTime() - delayInterval); // step 2 (weaken after hack) should resolve \\\"delay\\\" before the grow.\\n    const t2_fireFirstWeakenAt = new Date(t2_firstWeakenResolvesAt.getTime() - weakenTime);\\n    const t1_hackResolvesAt = new Date(t2_firstWeakenResolvesAt.getTime() - delayInterval); // step 1 (steal a bunch of money) should resolve \\\"delay\\\" before its respective weaken.\\n    const t1_fireHackAt = new Date(hackOnly ? fromDate.getTime() : t1_hackResolvesAt.getTime() - hackTime);\\n    // Track when the last task would be start (we need to ensure this doesn't happen after a prior batch has begun completing tasks)\\n    const lastThingThatFires = new Date(Math.max(t4_fireSecondWeakenAt.getTime(), t3_fireGrowAt.getTime(), t2_fireFirstWeakenAt.getTime(), t1_fireHackAt.getTime()));\\n    let schedule = {\\n        batchStart: fromDate,\\n        lastFire: lastThingThatFires,\\n        hackStart: t1_fireHackAt,\\n        hackEnd: t1_hackResolvesAt,\\n        firstWeakenStart: t2_fireFirstWeakenAt,\\n        firstWeakenEnd: t2_firstWeakenResolvesAt,\\n        growStart: t3_fireGrowAt,\\n        growEnd: t3_growResolvesAt,\\n        secondWeakenStart: t4_fireSecondWeakenAt,\\n        secondWeakenEnd: t4_secondWeakenResolvesAt\\n    };\\n    return schedule;\\n}\\n\\nfunction getScheduleObject(batchTiming, currentTarget, batchNumber) {\\n    var schedItems = [];\\n\\n    var schedHack = getScheduleItem(\\\"hack\\\", \\\"hack\\\", batchTiming.hackStart, batchTiming.hackEnd, currentTarget.getHackThreadsNeeded());\\n    var schedWeak1 = getScheduleItem(\\\"weak1\\\", \\\"weak\\\", batchTiming.firstWeakenStart, batchTiming.firstWeakenEnd, currentTarget.getWeakenThreadsNeededAfterTheft());\\n    // Special end-game case, if we have no choice but to hack a server to zero money, schedule back-to-back grows to restore money\\n    // TODO: This approach isn't necessary if we simply include the `growThreadsNeeded` logic to take into account the +1$ added before grow.\\n    if (currentTarget.percentageStolenPerHackThread() >= 1) {\\n        // Use math and science to minimize total threads required to inject 1 dollar per threads, then grow that to max.\\n        let calcThreadsForGrow = money => Math.ceil(((Math.log(1 / (money / currentTarget.getMaxMoney())) / Math.log(currentTarget.adjustedGrowthRate()))\\n            / currentTarget.serverGrowthPercentage()).toPrecision(14));\\n        let stepSize = Math.floor(currentTarget.getMaxMoney() / 4), injectThreads = stepSize, schedGrowThreads = calcThreadsForGrow(injectThreads);\\n        for (let i = 0; i < 100 && stepSize > 0; i++) {\\n            if (injectThreads + schedGrowThreads > (injectThreads + stepSize) + calcThreadsForGrow(injectThreads + stepSize))\\n                injectThreads += stepSize;\\n            else if (injectThreads + schedGrowThreads > (injectThreads - stepSize) + calcThreadsForGrow(injectThreads - stepSize))\\n                injectThreads -= stepSize;\\n            schedGrowThreads = calcThreadsForGrow(injectThreads);\\n            stepSize = Math.floor(stepSize / 2);\\n        }\\n        schedItems.push(getScheduleItem(\\\"grow-from-zero\\\", \\\"grow\\\", new Date(batchTiming.growStart.getTime() - (cycleTimingDelay / 8)),\\n            new Date(batchTiming.growEnd.getTime() - (cycleTimingDelay / 8)), injectThreads)); // Will put $injectThreads on the server\\n        // This will then grow from whatever % $injectThreads is back to 100%\\n        var schedGrow = getScheduleItem(\\\"grow\\\", \\\"grow\\\", batchTiming.growStart, batchTiming.growEnd, schedGrowThreads);\\n        var schedWeak2 = getScheduleItem(\\\"weak2\\\", \\\"weak\\\", batchTiming.secondWeakenStart, batchTiming.secondWeakenEnd,\\n            Math.ceil(((injectThreads + schedGrowThreads) * growthThreadHardening / actualWeakenPotency()).toPrecision(14)));\\n        if (verbose) log(_ns, `INFO: Special grow strategy since percentage stolen per hack thread is 100%: G1: ${injectThreads}, G1: ${schedGrowThreads}, W2: ${schedWeak2.threadsNeeded} (${currentTarget.name})`);\\n    } else {\\n        var schedGrow = getScheduleItem(\\\"grow\\\", \\\"grow\\\", batchTiming.growStart, batchTiming.growEnd, currentTarget.getGrowThreadsNeededAfterTheft());\\n        var schedWeak2 = getScheduleItem(\\\"weak2\\\", \\\"weak\\\", batchTiming.secondWeakenStart, batchTiming.secondWeakenEnd, currentTarget.getWeakenThreadsNeededAfterGrowth());\\n    }\\n\\n    if (hackOnly) {\\n        schedItems.push(schedHack);\\n    } else {\\n        // Schedule hack/grow first, because they cannot be split, and start with whichever requires the biggest chunk of free RAM\\n        schedItems.push(...(schedHack.threadsNeeded > schedGrow.threadsNeeded ? [schedHack, schedGrow] : [schedGrow, schedHack]));\\n        // Scheduler should ensure there's room for both, but splitting threads is annoying, so schedule the biggest first again to avoid fragmentation\\n        schedItems.push(...(schedWeak1.threadsNeeded > schedWeak2.threadsNeeded ? [schedWeak1, schedWeak2] : [schedWeak2, schedWeak1]));\\n    }\\n\\n    var scheduleObject = {\\n        batchNumber: batchNumber,\\n        batchStart: batchTiming.batchStart,\\n        lastFire: batchTiming.lastFire,\\n        hackEnd: batchTiming.hackEnd,\\n        batchFinish: hackOnly ? batchTiming.hackEnd : batchTiming.secondWeakenEnd,\\n        scheduleItems: schedItems\\n    };\\n    return scheduleObject;\\n}\\n\\n// initialize a new incomplete schedule item\\nfunction getScheduleItem(description, toolShortName, start, end, threadsNeeded) {\\n    var schedItem = {\\n        description: description,\\n        toolShortName: toolShortName,\\n        start: start,\\n        end: end,\\n        threadsNeeded: threadsNeeded\\n    };\\n    return schedItem;\\n}\\n\\n// Intended as a high-powered \\\"figure this out for me\\\" run command.\\n// If it can't run all the threads at once, it runs as many as it can across the spectrum of daemons available.\\n/** @param {NS} ns\\n * @param {Tool} tool - An object representing the script being executed **/\\nexport async function arbitraryExecution(ns, tool, threads, args, preferredServerName = null, useSmallestServerPossible = false, allowThreadSplitting = null) {\\n    // We will be using the list of servers that is sorted by most available ram\\n    var rootedServersByFreeRam = getAllServersByFreeRam().filter(server => server.hasRoot() && server.totalRam() > 1.6 || server.name == \\\"home\\\");\\n    // Sort servers by total ram, and try to fill these before utilizing another server.\\n    var preferredServerOrder = getAllServersByMaxRam().filter(server => server.hasRoot() && server.totalRam() > 1.6 || server.name == \\\"home\\\");\\n    if (useSmallestServerPossible) // If so-configured, fill up small servers before utilizing larger ones (can be laggy)\\n        preferredServerOrder.reverse();\\n    // IDEA: \\\"home\\\" is more effective at grow() and weaken() than other nodes (has multiple cores) (TODO: By how much?)\\n    //       so if this is one of those tools, put it at the front of the list of preferred candidates, otherwise keep home ram free if possible\\n    //       TODO: This effort is wasted unless we also scale down the number of threads \\\"needed\\\" when running on home. We will overshoot grow/weaken\\n    var home = preferredServerOrder.splice(preferredServerOrder.findIndex(i => i.name == \\\"home\\\"), 1)[0];\\n    if (tool.shortName == \\\"grow\\\" || tool.shortName == \\\"weak\\\" || preferredServerName == \\\"home\\\")\\n        preferredServerOrder.unshift(home); // Send to front\\n    else\\n        preferredServerOrder.push(home); // Otherwise, send it to the back (reserve home for scripts that benefit from cores) and use only if there's no room on any other server.\\n    // Push all \\\"hacknet servers\\\" to the end of the preferred list, since they will lose productivity if used\\n    var anyHacknetNodes = [];\\n    let hnNodeIndex;\\n    while (-1 !== (hnNodeIndex = preferredServerOrder.indexOf(s => s.name.startsWith('hacknet-server-') || s.name.startsWith('hacknet-node-'))))\\n        anyHacknetNodes.push(preferredServerOrder.splice(hnNodeIndex, 1));\\n    preferredServerOrder.push(...anyHacknetNodes.sort((a, b) => b.totalRam != a.totalRam ? b.totalRam - a.totalRam : a.name.localeCompare(b.name)));\\n\\n    // Allow for an overriding \\\"preferred\\\" server to be used in the arguments, and slot it to the front regardless of the above\\n    if (preferredServerName && preferredServerName != \\\"home\\\" /*home is handled above*/) {\\n        const preferredServerIndex = preferredServerOrder.findIndex(i => i.name == preferredServerName);\\n        if (preferredServerIndex != -1)\\n            preferredServerOrder.unshift(preferredServerOrder.splice(preferredServerIndex, 1)[0]);\\n        else\\n            log(ns, `ERROR: Configured preferred server \\\"${preferredServerName}\\\" for ${tool.name} is not a valid server name`, true, 'error');\\n    }\\n    //log(ns, `Preferred Server ${preferredServerName} for ${tool.name} resulted in preferred order: ${preferredServerOrder.map(srv => srv.name)}`);\\n    //log(ns, `Servers by free ram: ${rootedServersByFreeRam.map(svr => svr.name + \\\" (\\\" + svr.ramAvailable() + \\\")\\\")}`);\\n\\n    // Helper function to compute the most threads a server can run\\n    let computeMaxThreads = function (server) {\\n        if (tool.cost == 0) return 1;\\n        let ramAvailable = server.ramAvailable();\\n        // It's a hack, but we know that \\\"home\\\"'s reported ram available is lowered to leave room for \\\"preferred\\\" jobs,\\n        // so if this is a preferred job, ignore what the server object says and get it from the source\\n        if (server.name == \\\"home\\\" && preferredServerName == \\\"home\\\")\\n            ramAvailable = ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\");\\n        // Note: To be conservative, we allow double imprecision to cause this floor() to return one less than should be possible,\\n        //       because the game likely doesn't account for this imprecision (e.g. let 1.9999999999999998 return 1 rather than 2)\\n        return Math.floor((ramAvailable / tool.cost)/*.toPrecision(14)*/);\\n    };\\n\\n    let remainingThreads = threads;\\n    let splitThreads = false;\\n    for (var i = 0; i < rootedServersByFreeRam.length && remainingThreads > 0; i++) {\\n        var targetServer = rootedServersByFreeRam[i];\\n        var maxThreadsHere = Math.min(remainingThreads, computeMaxThreads(targetServer));\\n        if (maxThreadsHere <= 0)\\n            continue; //break; HACK: We don't break here because there are cases when sort order can change (e.g. we've reserved home RAM)\\n\\n        // If this server can handle all required threads, see if a server that is more preferred also has room.\\n        // If so, we prefer to pack that server with more jobs before utilizing another server.\\n        if (maxThreadsHere == remainingThreads) {\\n            for (var j = 0; j < preferredServerOrder.length; j++) {\\n                var nextMostPreferredServer = preferredServerOrder[j];\\n                // If the next largest server is also the current server with the most capacity, then it's the best one to pack\\n                if (nextMostPreferredServer == targetServer)\\n                    break;\\n                // If the job can just as easily fit on this server, prefer to put the job there\\n                if (remainingThreads <= computeMaxThreads(nextMostPreferredServer)) {\\n                    //log(ns, 'Opted to exec ' + tool.name + ' on preferred server ' + nextMostPreferredServer.name + ' rather than the one with most ram (' + targetServer.name + ')');\\n                    targetServer = nextMostPreferredServer;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // If running on a non-daemon host, do a script copy check before running\\n        if (targetServer.name != daemonHost && !doesFileExist(ns, tool.name, targetServer.name)) {\\n            let missing_scripts = [tool.name];\\n            if (!doesFileExist(ns, getFilePath('helpers.js'), targetServer.name))\\n                missing_scripts.push(getFilePath('helpers.js')); // Some tools require helpers.js. Best to copy it around.\\n            if (verbose)\\n                log(ns, `Copying ${tool.name} from ${daemonHost} to ${targetServer.name} so that it can be executed remotely.`);\\n            await getNsDataThroughFile(ns, `ns.scp(ns.args.slice(2), ns.args[0], ns.args[1])`, '/Temp/copy-scripts.txt', [targetServer.name, daemonHost, ...missing_scripts])\\n            //await ns.sleep(5); // Workaround for Bitburner bug https://github.com/danielyxie/bitburner/issues/1714 - newly created/copied files sometimes need a bit more time, even if awaited\\n        }\\n        let pid = await exec(ns, tool.name, targetServer.name, maxThreadsHere, ...(args || []));\\n        if (pid == 0) {\\n            log(ns, `ERROR: Failed to exec ${tool.name} on server ${targetServer.name} with ${maxThreadsHere} threads`, false, 'error');\\n            return false;\\n        }\\n        // Decrement the threads that have been successfully scheduled\\n        remainingThreads -= maxThreadsHere;\\n        if (remainingThreads > 0) {\\n            if (!(allowThreadSplitting || tool.isThreadSpreadingAllowed)) break;\\n            // No need to warn if it's allowed? log(ns, `WARNING: Had to split ${threads} ${tool.name} threads across multiple servers. ${maxThreadsHere} on ${targetServer.name}`);\\n            splitThreads = true;\\n        }\\n    }\\n    // The run failed if there were threads left to schedule after we exhausted our pool of servers\\n    if (remainingThreads > 0 && threads < Number.MAX_SAFE_INTEGER)\\n        log(ns, `ERROR: Ran out of RAM to run ${tool.name} on ${splitThreads ? 'all servers (split)' : `${targetServer?.name} `}- ` +\\n            `${threads - remainingThreads} of ${threads} threads were spawned.`, false, 'error');\\n    if (splitThreads && !tool.isThreadSpreadingAllowed)\\n        return false;\\n    return remainingThreads == 0;\\n}\\n\\n/** Brings the server to minimum security and maximum money to prepare for cycling scheduler activity\\n * @param {NS} ns\\n * @param {Server} currentTarget */\\nasync function prepServer(ns, currentTarget) {\\n    // Check if already prepped or in targeting mode, in which case presume prep server is to be skipped.\\n    if (currentTarget.isPrepped() || (await currentTarget.isTargeting())) return null;\\n    let start = Date.now();\\n    let now = new Date(start.valueOf());\\n    let weakenTool = getTool(\\\"weak\\\"), growTool = getTool(\\\"grow\\\");\\n    // Note: We must prioritize weakening before growing, or hardened security will make everything take longer\\n    let weakenThreadsAllowable = weakenTool.getMaxThreads(); // Note: Max is based on total ram across all servers (since thread spreading is allowed)\\n    let weakenThreadsNeeded = currentTarget.getWeakenThreadsNeeded();\\n    // Plan grow if needed, but don't bother if we didn't have enough ram to schedule all weaken threads to reach min security\\n    let growThreadsNeeded, growThreadsScheduled;\\n    if (weakenThreadsNeeded < weakenThreadsAllowable && (growThreadsNeeded = currentTarget.getGrowThreadsNeeded())) {\\n        let growThreadsAllowable = growTool.getMaxThreads(true) - weakenThreadsNeeded; // Take into account RAM that will be consumed by weaken threads scheduled\\n        growThreadsScheduled = Math.min(growThreadsAllowable, growThreadsNeeded);\\n        // Calculate additional weaken threads which should be fired after the grow completes.\\n        let weakenForGrowthThreadsNeeded = Math.ceil((growThreadsScheduled * growthThreadHardening / actualWeakenPotency()).toPrecision(14));\\n        // If we don't have enough room for the new weaken threads, release grow threads to make room\\n        const subscription = (growThreadsScheduled + weakenForGrowthThreadsNeeded) / growThreadsAllowable;\\n        if (subscription > 1) { // Scale down threads to schedule until we are no longer over-subscribed\\n            log(ns, `INFO: Insufficient RAM to schedule all ${weakenForGrowthThreadsNeeded} required weaken threads to recover from ` +\\n                `${growThreadsScheduled} prep grow threads. Scaling both down by ${subscription} (${currentTarget.name})`);\\n            growThreadsScheduled = Math.floor((growThreadsScheduled / subscription).toPrecision(14));\\n            weakenForGrowthThreadsNeeded = Math.floor((weakenForGrowthThreadsNeeded / subscription).toPrecision(14));\\n        }\\n        weakenThreadsNeeded += weakenForGrowthThreadsNeeded;\\n    }\\n\\n    // Schedule weaken first, in case ram conditions change, it's more important (security affects speed of future tools)\\n    let prepSucceeding = true;\\n    let weakenThreadsScheduled = Math.min(weakenThreadsAllowable, weakenThreadsNeeded);\\n    if (weakenThreadsScheduled) {\\n        if (weakenThreadsScheduled < weakenThreadsNeeded)\\n            log(ns, `At this time, we only have enough RAM to schedule ${weakenThreadsScheduled} of the ${weakenThreadsNeeded} ` +\\n                `prep weaken threads needed to lower the target from current security (${formatNumber(currentTarget.getSecurity())}) ` +\\n                `to min security (${formatNumber(currentTarget.getMinSecurity())}) (${currentTarget.name})`);\\n        prepSucceeding = await arbitraryExecution(ns, weakenTool, weakenThreadsScheduled,\\n            [currentTarget.name, now.getTime(), now.getTime(), 0, \\\"prep\\\", ...getFlagsArgs(\\\"weak\\\", currentTarget.name, false)]);\\n        if (prepSucceeding == false)\\n            log(ns, `Failed to schedule all ${weakenThreadsScheduled} prep weaken threads (${currentTarget.name})`);\\n    }\\n    // Schedule any prep grow threads next\\n    if (prepSucceeding && growThreadsScheduled > 0) {\\n        prepSucceeding = await arbitraryExecution(ns, growTool, growThreadsScheduled,\\n            [currentTarget.name, now.getTime(), now.getTime(), 0, \\\"prep\\\", ...getFlagsArgs(\\\"grow\\\", currentTarget.name, false)],\\n            undefined, undefined, /*allowThreadSplitting*/ true); // Special case: for prep we allow grow threads to be split\\n        if (prepSucceeding == false)\\n            log(ns, `Failed to schedule all ${growThreadsScheduled} prep grow threads (${currentTarget.name})`);\\n    }\\n\\n    // Log a summary of what we did here today\\n    if (verbose && prepSucceeding && (weakenThreadsScheduled > 0 || growThreadsScheduled > 0))\\n        log(ns, `Prepping with ${weakenThreadsScheduled} weaken, ${growThreadsScheduled} grow threads (${weakenThreadsNeeded || 0} / ${growThreadsNeeded || 0} needed)` +\\n            ' ETA ' + Math.floor((currentTarget.timeToWeaken() + queueDelay) / 1000) + 's (' + currentTarget.name + ')' +\\n            ' Took: ' + (Date.now() - start) + 'ms');\\n    return prepSucceeding;\\n}\\n\\n/** @returns {Server[]} All hackable servers, in order of best Hack Exp to worst */\\nfunction getXPFarmTargetsByExp() {\\n    return getAllServers().filter(server => (server.hasRoot() || server.canCrack()) && server.canHack() && server.shouldHack())\\n        .sort((a, b) => b.getExpPerSecond() - a.getExpPerSecond());\\n}\\n\\n/** @returns {Server} The best server to target for Hack Exp */\\nfunction getBestXPFarmTarget() {\\n    return getXPFarmTargetsByExp()[0];\\n}\\n\\nlet singleServerLimit; // If prior cycles failed to be scheduled, force one additional server into single-server mode until we aqcuire more RAM\\nlet lastCycleTotalRam = 0; // Cache of total ram on the server to check whether we should attempt to lift the above restriction.\\n\\n/** @param {NS} ns\\n * Grind hack XP by filling a bunch of RAM with hack() / grow() / weaken() against a relatively easy target */\\nasync function farmHackXp(ns, fractionOfFreeRamToConsume = 1, verbose = false, numTargets = undefined) {\\n    if (!xpOnly || loopingMode) // Only use basic single-target hacking unless we're in XP mode (and not looping)\\n        return await scheduleHackExpCycle(ns, getBestXPFarmTarget(), fractionOfFreeRamToConsume, verbose, false); // Grind some XP from the single best target for farming XP\\n    // Otherwise, target multiple servers until we can't schedule any more. Each next best host should get the next best (biggest) server\\n    getTool(\\\"grow\\\").isThreadSpreadingAllowed = true; // Only true when in XP mode - where each grow thread is expected to give 1$. \\\"weak\\\" can always spread.\\n    const serversByMaxRam = getAllServersByMaxRam();\\n    var jobHosts = serversByMaxRam.filter(s => s.hasRoot() && s.totalRam() > 128); // Get the set of servers that can be reasonably expected to host decent-sized jobs\\n    if (jobHosts.length == 0) jobHosts = serversByMaxRam.filter(s => s.hasRoot() && s.totalRam() > 16); // Lower our standards if we're early-game and nothing qualifies\\n    var homeRam = Math.max(0, ns.getServerMaxRam(\\\"home\\\") - homeReservedRam); // If home ram is large enough, the XP contributed by additional targets is insignificant compared to the risk of increased lag/latency.\\n    let targetsByExp = getXPFarmTargetsByExp();\\n    numTargets = Math.min(maxTargets, targetsByExp.length, Math.floor(jobHosts.filter(s => s.totalRam() > 0.01 * homeRam).length)); // Limit targets (too many creates lag which worsens performance, and need a dedicated server for each)\\n    if (options.i) { // To farm intelligence, use manual hack on only the current connected server\\n        if (currentTerminalServer.name != \\\"home\\\") {\\n            numTargets = 1;\\n            targetsByExp = [currentTerminalServer];\\n        }\\n    }\\n    const etas = [];\\n    const totalServerRam = jobHosts.reduce((total, s) => total + s.totalRam(), 0);\\n    if (totalServerRam > lastCycleTotalRam) { // If we've aqcuired more ram, remove restrictions and discover the new best balance\\n        singleServerLimit = 0;\\n        lastCycleTotalRam = totalServerRam;\\n    }\\n    let tryAdvanceMode = bitnodeMults.ScriptHackMoneyGain != 0; // We can't attempt hack-based XP if it's impossible to gain hack income (XP will always be 1/4)\\n    let singleServerMode = false; // Start off maximizing hack threads for best targets by spreading their weaken/grow threads to other servers\\n    for (let i = 0; i < numTargets; i++) {\\n        let lastSchedulingResult;\\n        singleServerMode = singleServerMode || (i >= (jobHosts.length - 1 - singleServerLimit) || jobHosts[i + 1].totalRam() < 1000); // Switch to single-server mode if running out of hosts with high ram\\n        etas.push(lastSchedulingResult = (await scheduleHackExpCycle(ns, targetsByExp[i], fractionOfFreeRamToConsume, verbose, tryAdvanceMode, jobHosts[i], singleServerMode)) || Number.MAX_SAFE_INTEGER);\\n        if (lastSchedulingResult == Number.MAX_SAFE_INTEGER) break; // Stop scheduling targets if the last attempt failed\\n    }\\n    // Wait for all job scheduling threads to return, and sleep for the smallest cycle time remaining\\n    return Math.max(0, Math.min(...etas));\\n}\\n\\n// In case we've misfired a bit, this helper can wait a short while to see if we can start a new cycle right as the last one completes.\\nasync function waitForCycleEnd(ns, server, maxWaitTime = 200, waitInterval = 5) {\\n    const eta = nextXpCycleEnd[server.name];\\n    if (verbose) return log(ns, `WARNING: ${server.name} FarmXP process is still in progress from a prior run. Completion time is unknown...`);\\n    const activeCycleTimeLeft = (eta || 0) - Date.now();\\n    let stillBusy;\\n    if (verbose) log(ns, `Waiting for last ${server.name} FarmXP process to complete... (ETA ${eta ? formatDuration(activeCycleTimeLeft) : 'unknown'})`);\\n    while (stillBusy = server.isXpFarming(false) && maxWaitTime > 0) {\\n        await ns.sleep(waitInterval); // Sleep a very short while, then get a fresh process list to check again whether the process is done\\n        maxWaitTime -= waitInterval;\\n    }\\n    if (stillBusy)\\n        log(ns, `WARNING: ${server.name} FarmXP process is ` + (eta ? `more than ${formatDuration(-activeCycleTimeLeft)} overdue...` : 'still in progress from a prior run...'));\\n    return !stillBusy;\\n}\\n\\nlet farmXpReentryLock = []; // A dictionary of server names and whether we're currently scheduling / polling for its cycle to end\\nlet nextXpCycleEnd = []; // A dictionary of server names and when their next XP farming cycle is expected to end\\n/** @param {NS} ns\\n * @param {Server} server - The server that will be targetted\\n * @param {Server} allocatedServer - You may designate a specific server on which to execute scripts. **/\\nasync function scheduleHackExpCycle(ns, server, percentOfFreeRamToConsume, verbose, advancedMode, allocatedServer = null, singleServer = false) {\\n    if (!server.hasRoot() && server.canCrack()) await doRoot(ns, server); // Get root if we do not already have it.\\n    if (!server.hasRoot()) return log(ns, `ERROR: Cannot farm XP from unrooted server ${server.name}`, true, 'error');\\n    // If we are already farming XP from this server, wait for it to complete (if the last cycle is almost done) or skip scheduling more work\\n    const eta = nextXpCycleEnd[server.name];\\n    const activeCycleTimeLeft = (eta || 0) - Date.now();\\n    if (activeCycleTimeLeft > 1000) return activeCycleTimeLeft; // If we're more than 1s away from the expected fire time, just wait for the next loop, don't even check for early completion\\n    if (farmXpReentryLock[server.name] == true) return; // Ensure more than one concurrent callback isn't trying to schedule this server's faming cycle\\n    try {\\n        farmXpReentryLock[server.name] = true;\\n        let expTool; // The tool we will use to farm XP (can be hack, grow, or weaken depending on the situation)\\n        let expTime; // The time this tool will take to run\\n        if (advancedMode) { // We get the most XP by using max possible hack threads while keeping money just above 0 (so that we get full hack() exp)\\n            expTool = options.i ? getTool(\\\"manualhack\\\") : getTool(\\\"hack\\\");\\n            expTime = server.timeToHack();\\n        } else if (server.getSecurity() > server.getMinSecurity()) { // If the server isn't at min-security, we should do that (to reduce hack/grow/weaken time to the minimum)\\n            expTool = getTool(\\\"weak\\\");\\n            expTime = server.timeToWeaken();\\n        } else { // If the server is at min-security, we should farm grow(), since it takes less time (80%) than weaken(). Once at max-money, grow will no longer reduce security.\\n            expTool = getTool(\\\"grow\\\");\\n            expTime = server.timeToGrow();\\n        }\\n        let loopRunning = false;\\n        if (await server.isXpFarming()) {\\n            if (loopingMode)\\n                loopRunning = true;\\n            else {\\n                if (verbose && activeCycleTimeLeft < -50) // Warn about big misfires (sign of lag)\\n                    log(ns, `WARNING: ${server.name} FarmXP process is ` + (eta ? `more than ${formatDuration(-activeCycleTimeLeft)} overdue...` :\\n                        `still in progress from a prior run. ETA unknown, assuming '${expTool.name}' time: ${formatDuration(expTime)}`));\\n                return eta ? (activeCycleTimeLeft > 0 ? activeCycleTimeLeft : 10 /* If we're overdue, sleep only 10 ms before checking again */) : expTime /* Have no ETA, sleep for expTime */;\\n            }\\n        }\\n        let threads = Math.floor(((allocatedServer == null ? expTool.getMaxThreads() : allocatedServer.ramAvailable() / expTool.cost) * percentOfFreeRamToConsume).toPrecision(14));\\n        if (threads == 0)\\n            return log(ns, `WARNING: Cannot farm XP from ${server.name}, threads == 0 for allocated server ` + (allocatedServer == null ? '(any server)' :\\n                `${allocatedServer.name} with ${formatRam(allocatedServer.ramAvailable())} free RAM`), false, 'warning');\\n\\n        if (advancedMode) { // Need to keep server money above zero, and security at minimum to farm xp from hack();\\n            const effectiveHackThreads = Math.ceil(1 / server.percentageStolenPerHackThread()); // Only this many hack threads \\\"count\\\" for stealing/hardening. The rest get a 'free ride'\\n            if (threads <= effectiveHackThreads) {\\n                farmXpReentryLock[server.name] = false;\\n                // We don't have enough ram for advanced XP grind (no hack threads would get a 'free ride'). Revert to simple weak/grow farming mode.\\n                return await scheduleHackExpCycle(ns, server, percentOfFreeRamToConsume, verbose, false, allocatedServer, singleServer);\\n            }\\n            var growThreadsNeeded = effectiveHackThreads * recoveryThreadPadding; // To hack for money, server must have at least 1$ per thread that \\\"counts\\\" for the steal (threads required to steal 100%)\\n            const securityHardeningToCombat = Math.max(effectiveHackThreads * hackThreadHardening + growThreadsNeeded * growthThreadHardening, // Security that will be incurred hack() + grow() threads\\n                server.getSecurity() - server.getMinSecurity()); // If the current security level is higher than this, add enough weaken threads to correct it\\n            var weakenThreadsNeeded = Math.ceil(securityHardeningToCombat / actualWeakenPotency()) * recoveryThreadPadding;\\n            // TODO: If the remaining hosts on the network can't fit 4 sets of grow + weaken recovery threads needed, switch to single-server mode! (should take into account already-scheduled cycles)\\n            if (singleServer) // If set to only use a single server, free up the hack threads to make room for recovery threads\\n                threads = Math.max(0, threads - Math.ceil((growThreadsNeeded + weakenThreadsNeeded) * 1.75 / expTool.cost)); // Make room for recovery threads\\n            if (threads == 0)\\n                return log(ns, `Cannot farm XP from ${server.name} on ` + (allocatedServer == null ? '(any server)' : `${allocatedServer.name} with ${formatRam(allocatedServer.ramAvailable())} free RAM`) +\\n                    `: hack threads == 0 after releasing for ${growThreadsNeeded} grow threads and ${weakenThreadsNeeded} weaken threads for ${effectiveHackThreads} effective hack threads.`);\\n        }\\n\\n        let scheduleDelay = 10; // Assume it will take this long a script fired immediately to start running\\n        let now = Date.now();\\n        let scheduleTime = now + scheduleDelay;\\n        let cycleTime = scheduleDelay + expTime + 10; // Wake up this long after a hack has fired (to ensure we don't wake up too early)\\n        nextXpCycleEnd[server.name] = now + cycleTime; // Store when this server's next cycle is expected to end\\n        const allowLoop = advancedMode && singleServer && allTargetsPrepped; // Allow looping mode only once all targets are prepped\\n        // Schedule the FarmXP threads first, ensuring that they are not split (if they our split, our hack threads above 'effectiveHackThreads' lose their free ride)\\n        let success = loopRunning ? true : await arbitraryExecution(ns, expTool, threads,\\n            [server.name, scheduleTime, 0, expTime, \\\"FarmXP\\\"].concat(getFlagsArgs(expTool.shortName, server.name, allowLoop)), allocatedServer?.name);\\n\\n        if (advancedMode) { // Need to keep server money above zero, and security at minimum to farm xp from hack();\\n            const scheduleGrow = scheduleTime + cycleTime * 2 / 15 - scheduleDelay; // Time this to resolve at 1/3 * cycleTime after each hack fires\\n            const scheduleWeak = scheduleTime + cycleTime * 2 / 3 - scheduleDelay; //  Time this to resolve at 2/3 * cycleTime after each hack fires\\n            // TODO: We can set these up in looping mode as well as long as we keep track and spawn no more than 4 running instances.\\n            success &&= await arbitraryExecution(ns, getTool(\\\"grow\\\"), growThreadsNeeded,\\n                [server.name, scheduleGrow, 0, server.timeToGrow(), \\\"growForXp\\\"].concat(getFlagsArgs(\\\"grow\\\", server.name, false)), // Note: looping disabled for now\\n                singleServer ? allocatedServer?.name : null, !singleServer);\\n            success &&= await arbitraryExecution(ns, getTool(\\\"weak\\\"), weakenThreadsNeeded,\\n                [server.name, scheduleWeak, 0, server.timeToWeaken(), \\\"weakenForXp\\\"].concat(getFlagsArgs(\\\"weak\\\", server.name, false)),\\n                singleServer ? allocatedServer?.name : null, !singleServer);\\n            //log(ns, `XP Farm ${server.name} money available is ${formatMoney(server.getMoney())} and security is ` +\\n            //    `${server.getSecurity().toPrecision(3)} of ${server.getMinSecurity().toPrecision(3)}`);\\n            //log(ns, `Planned start: Hack: ${Math.round(scheduleTime - now)} Grow: ${Math.round(scheduleGrow - now)} ` +\\n            //    `Weak: ${Math.round(scheduleWeak - now)} Tick: ${Math.round(cycleTime)} Cycle: ${threads} / ${growThreadsNeeded} / ${weakenThreadsNeeded}`);\\n            if (verbose) log(ns, `Exp Cycle: ${threads} x Hack in ${Math.round(scheduleTime - now + expTime)}ms, ` +\\n                `${growThreadsNeeded} x Grow in ${Math.round((scheduleGrow - now + server.timeToGrow()) % cycleTime)}ms, ` +\\n                `${weakenThreadsNeeded} x Weak in ${Math.round((scheduleWeak - now + server.timeToWeaken()) % cycleTime)}ms, ` +\\n                `Tick: ${Math.round(cycleTime)}ms on ${allocatedServer?.name ?? '(any server)'} targeting \\\"${server.name}\\\"`);\\n        } else if (verbose)\\n            log(ns, `In ${formatDuration(cycleTime)}, ${threads} ${expTool.shortName} threads will fire against ${server.name} (for Hack Exp)`);\\n        if (!success) { // If some aspect scheduling fails, we should try adjusting our future scheduling tactics to attempt to use less RAM\\n            if (singleServerLimit >= maxTargets && maxTargets > 1)\\n                maxTargets--;\\n            else\\n                singleServerLimit++;\\n        }\\n        // Note: Next time we tick, Hack will have *just* fired, so for the moment we will be at 0 money and above min security. Trust that all is well\\n        return success ? cycleTime : false; // Ideally we wake up right after hack has fired so we can schedule another immediately\\n    } finally {\\n        farmXpReentryLock[server.name] = false;\\n    }\\n}\\n\\n// In \\\"-s\\\" mode, we collect information about our current stock positions and hack/grow with stock manipulation enabled in order to boost that stock's position.\\nconst serverStockSymbols = Object.fromEntries([\\n    [\\\"foodnstuff\\\", \\\"FNS\\\"], [\\\"sigma-cosmetics\\\", \\\"SGC\\\"], [\\\"omega-net\\\", \\\"OMGA\\\"], [\\\"comptek\\\", \\\"CTK\\\"], [\\\"netlink\\\", \\\"NTLK\\\"], [\\\"syscore\\\", \\\"SYSC\\\"], [\\\"catalyst\\\", \\\"CTYS\\\"], [\\\"lexo-corp\\\", \\\"LXO\\\"], [\\\"alpha-ent\\\", \\\"APHE\\\"], [\\\"rho-construction\\\", \\\"RHOC\\\"],\\n    [\\\"aerocorp\\\", \\\"AERO\\\"], [\\\"global-pharm\\\", \\\"GPH\\\"], [\\\"omnia\\\", \\\"OMN\\\"], [\\\"defcomm\\\", \\\"DCOMM\\\"], [\\\"solaris\\\", \\\"SLRS\\\"], [\\\"icarus\\\", \\\"ICRS\\\"], [\\\"univ-energy\\\", \\\"UNV\\\"], [\\\"nova-med\\\", \\\"NVMD\\\"], [\\\"titan-labs\\\", \\\"TITN\\\"], [\\\"microdyne\\\", \\\"MDYN\\\"], [\\\"stormtech\\\", \\\"STM\\\"],\\n    [\\\"helios\\\", \\\"HLS\\\"], [\\\"vitalife\\\", \\\"VITA\\\"], [\\\"fulcrumtech\\\", \\\"FLCM\\\"], [\\\"4sigma\\\", \\\"FSIG\\\"], [\\\"kuai-gong\\\", \\\"KGI\\\"], [\\\"omnitek\\\", \\\"OMTK\\\"], [\\\"blade\\\", \\\"BLD\\\"], [\\\"clarkinc\\\", \\\"CLRK\\\"], [\\\"ecorp\\\", \\\"ECP\\\"], [\\\"megacorp\\\", \\\"MGCP\\\"], [\\\"fulcrumassets\\\", \\\"FLCM\\\"]\\n]);\\nlet serversWithOwnedStock = []; // Dict of server names, with a value of \\\"true\\\" if we should turn on stock-manipulation when growing this server\\nlet shouldManipulateGrow = []; // Dict of server names, with a value of \\\"true\\\" if we should turn on stock-manipulation when growing this server\\nlet shouldManipulateHack = []; // Dict of server names, with a value of \\\"true\\\" if we should turn on stock-manipulation when hacking this server\\nlet failedStockUpdates = 0;\\n/** @param {NS} ns **/\\nasync function updateStockPositions(ns) {\\n    if (!haveTixApi) return; // No point in attempting anything here if the user doesn't have stock market access yet.\\n    let updatedPositions = ns.read(`/Temp/stock-probabilities.txt`); // Should be a dict of stock symbol -> prob left by the stockmaster.js script.\\n    if (!updatedPositions) {\\n        failedStockUpdates++;\\n        if (failedStockUpdates % 60 == 10) // Periodically warn if stockmaster is not running (or not generating the required file)\\n            log(ns, `WARNING: The file \\\"/Temp/stock-probabilities.txt\\\" has been missing or empty the last ${failedStockUpdates} attempts.` +\\n                `\\\\nEnsure stockmaster.js is running, or turn off the --stock-manipulation flag when running.`, false, 'warning');\\n        return\\n    }\\n    failedStockUpdates = 0;\\n    updatedPositions = JSON.parse(updatedPositions); // Should be a dict of stock symbol -> prob left by the stockmaster.js script.\\n    // Strengthen whatever trend a stock currently has, whether we own it or not\\n    const newShouldManipulateGrow = {}, newShouldManipulateHack = {}, newServersWithOwnedStock = [];\\n    Object.keys(serverStockSymbols).forEach(server => {\\n        const sym = serverStockSymbols[server];\\n        const pos = updatedPositions[sym];\\n        newShouldManipulateGrow[server] = pos.sharesLong > 0 ? true : pos.prob >= 0.5; // If bullish, grow should be made to influence stock\\n        newShouldManipulateHack[server] = pos.sharesShort > 0 ? true : pos.prob < 0.5; // If bearish, hack should be made to influence stock\\n        if (pos.sharesLong > 0 || pos.sharesShort > 0) newServersWithOwnedStock.push(server); // Keep track of servers we own stock in so we can prioritize hacking them in stockFocus mode\\n    });\\n    if (stockFocus) { // Detect any positions that have reversed and kill all active hack/grow scripts against that server set to manipulate in the wrong direction\\n        const newLongPositions = Object.keys(serverStockSymbols).filter(server => newShouldManipulateGrow[server] && !shouldManipulateGrow[server]);\\n        if (newLongPositions.length > 0) await terminateScriptsManipulatingStock(ns, newLongPositions, getTool(\\\"hack\\\").name); // Make sure no hacks are set to manipulate our long positions down!\\n        const newShortPositions = Object.keys(serverStockSymbols).filter(server => newShouldManipulateHack[server] && !shouldManipulateHack[server]);\\n        if (newShortPositions.length > 0) await terminateScriptsManipulatingStock(ns, newShortPositions, getTool(\\\"grow\\\").name); // Make sure no grows are set to manipulate our short positions up!\\n    }\\n    shouldManipulateGrow = newShouldManipulateGrow;\\n    shouldManipulateHack = newShouldManipulateHack;\\n    serversWithOwnedStock = newServersWithOwnedStock;\\n}\\n\\n// Kills all scripts running the specified tool and targeting one of the specified servers if stock market manipulation is enabled\\nasync function terminateScriptsManipulatingStock(ns, servers, toolName) {\\n    const processes = await Promise.all(allHostNames.flatMap(hostname => processList(ns, hostname)));\\n    // TODO: This is unmaintanable AF\\n    const problematicProcesses = processes.filter(process => servers.includes(process.args[0]) &&\\n        (loopingMode || toolName == process.filename && process.args.length > 5 && process.args[5])).map(process => process.pid);\\n    if (problematicProcesses.length > 0) {\\n        log(ns, `INFO: Killing ${problematicProcesses.length} pids running ${toolName} with stock manipulation in the wrong direction.`);\\n        await killProcessIds(ns, problematicProcesses);\\n    }\\n}\\n\\n/** Helper to kill a list of process ids\\n * @param {NS} ns **/\\nasync function killProcessIds(ns, processIds) {\\n    return await runCommand(ns, `ns.args.forEach(ns.kill)`, '/Temp/kill-pids.js', processIds);\\n}\\n\\n/** @param {Server} server **/\\nfunction addServer(ns, server, verbose) {\\n    if (verbose) log(ns, `Adding a new server to all lists: ${server}`);\\n    allHostNames.push(server.name);\\n    _allServers.push(server);\\n    resetServerSortCache(); // Reset the cached sorted lists of objects\\n}\\n\\nfunction removeServerByName(ns, deletedHostName) {\\n    // Remove from the list of server names\\n    let findIndex = allHostNames.indexOf(deletedHostName)\\n    if (findIndex === -1)\\n        log(ns, `ERROR: Failed to find server with the name \\\"${deletedHostName}\\\" in the allHostNames list.`, true, 'error');\\n    else\\n        allHostNames.splice(findIndex, 1);\\n    // Remove from the list of server objects\\n    const arrAllServers = getAllServers();\\n    findIndex = arrAllServers.findIndex(s => s.name === deletedHostName);\\n    if (findIndex === -1)\\n        log(ns, `ERROR: Failed to find server by name \\\"${deletedHostName}\\\".`, true, 'error');\\n    else {\\n        arrAllServers.splice(findIndex, 1);\\n        log(ns, `\\\"${deletedHostName}\\\" was found at index ${findIndex} of servers and removed leaving ${arrAllServers.length} items.`);\\n    }\\n    resetServerSortCache(); // Reset the cached sorted lists of objects\\n}\\n\\n// Helper to construct our server lists from a list of all host names\\nasync function buildServerList(ns, verbose = false, allServers = undefined) {\\n    // Get list of servers (i.e. all servers on first scan, or newly purchased servers on subsequent scans)\\n    allServers ??= await getNsDataThroughFile(ns, 'scanAllServers(ns)');\\n    let scanResult = allServers;\\n    // Ignore hacknet node servers if we are not supposed to run scripts on them (reduces their hash rate when we do)\\n    if (!useHacknetNodes)\\n        scanResult = scanResult.filter(hostName => !hostName.startsWith('hacknet-server-') && !hostName.startsWith('hacknet-node-'))\\n    // Remove all servers we currently have added that are no longer being returned by the above query\\n    for (const hostName of allHostNames.filter(hostName => !scanResult.includes(hostName)))\\n        removeServerByName(ns, hostName);\\n    // Add any servers that are new\\n    for (const hostName of scanResult.filter(hostName => !allHostNames.includes(hostName)))\\n        addServer(ns, new Server(ns, hostName, verbose));\\n}\\n\\n/** @returns {Server[]} A list of all server objects */\\nfunction getAllServers() { return _allServers; }\\n\\n/** @returns {Server} A list of all server objects */\\nfunction getServerByName(hostname) { return getAllServers().find(s => s.name == hostname); }\\n\\n// Note: We maintain copies of the list of servers, in different sort orders, to reduce re-sorting time on each iteration\\nlet _serverListByFreeRam = (/**@returns{Server[]}*/() => undefined)();\\nlet _serverListByMaxRam = (/**@returns{Server[]}*/() => undefined)();\\nlet _serverListByTargetOrder = (/**@returns{Server[]}*/() => undefined)();\\nconst resetServerSortCache = () => _serverListByFreeRam = _serverListByMaxRam = _serverListByTargetOrder = undefined;\\n\\n/** @param {Server[]} toSort\\n * @param {(a: Server, b: Server) => number} compareFn\\n * @returns {Server[]} List sorted by the specified compare function */\\nfunction _sortServersAndReturn(toSort, compareFn) {\\n    toSort.sort(compareFn);\\n    return toSort;\\n}\\n\\n/** @returns {Server[]} Sorted by most free (available) ram to least */\\nfunction getAllServersByFreeRam() {\\n    return _sortServersAndReturn(_serverListByFreeRam ??= getAllServers().slice(), function (a, b) {\\n        var ramDiff = b.ramAvailable() - a.ramAvailable();\\n        return ramDiff != 0.0 ? ramDiff : a.name.localeCompare(b.name); // Break ties by sorting by name\\n    });\\n}\\n\\n/** @returns {Server[]} Sorted by most max ram to least */\\nfunction getAllServersByMaxRam() {\\n    return _sortServersAndReturn(_serverListByMaxRam ??= getAllServers().slice(), function (a, b) {\\n        var ramDiff = b.totalRam() - a.totalRam();\\n        return ramDiff != 0.0 ? ramDiff : a.name.localeCompare(b.name); // Break ties by sorting by name\\n    });\\n}\\n\\n/** @returns {Promise<Server[]>} Sorted in the order we should prioritize spending ram on targeting them (for hacking) */\\nasync function getAllServersByTargetOrder() {\\n    _serverListByTargetOrder ??= getAllServers().slice(); // Take a fresh copy if not already cached\\n    // The check for whether a server is being targetted is async, so we must collect this info upfront before using in a sort function\\n    const dictIsTargeting = {};\\n    for (const server of _serverListByTargetOrder)\\n        dictIsTargeting[server.name] = await server.isTargeting();\\n    return _sortServersAndReturn(_serverListByTargetOrder, function (a, b) {\\n        // To ensure we establish some income, prep fastest-to-prep servers first, and target prepped servers before unprepped servers.\\n        if (a.canHack() != b.canHack()) return a.canHack() ? -1 : 1; // Sort all hackable servers first\\n        if (stockFocus) { // If focused on stock-market manipulation, sort up servers with a stock, prioritizing those we have some position in\\n            let stkCmp = serversWithOwnedStock.includes(a.name) == serversWithOwnedStock.includes(b.name) ? 0 : serversWithOwnedStock.includes(a.name) ? -1 : 1;\\n            if (stkCmp == 0) stkCmp = ((shouldManipulateGrow[a.name] || shouldManipulateHack[a.name]) == (shouldManipulateGrow[b.name] || shouldManipulateHack[b.name])) ? 0 :\\n                shouldManipulateGrow[a.name] || shouldManipulateHack[a.name] ? -1 : 1;\\n            if (stkCmp != 0) return stkCmp;\\n        }\\n        // Next, Sort prepped servers to the front. Assume that if we're targetting, we're prepped (between cycles)\\n        if ((a.isPrepped() || dictIsTargeting[a.name]) != (b.isPrepped() || dictIsTargeting[b.name]))\\n            return a.isPrepped() || dictIsTargeting[a.name] ? -1 : 1;\\n        if (!a.canHack()) return a.requiredHackLevel - b.requiredHackLevel; // Unhackable servers are sorted by lowest hack requirement\\n        //if (!a.isPrepped()) return a.timeToWeaken() - b.timeToWeaken(); // Unprepped servers are sorted by lowest time to weaken\\n        // For ready-to-hack servers, the sort order is based on money, RAM cost, and cycle time\\n        return b.getMoneyPerRamSecond() - a.getMoneyPerRamSecond(); // Prepped servers are sorted by most money/ram.second\\n    });\\n}\\n\\nasync function runCommand(ns, ...args) {\\n    return await runCommand_Custom(ns, getFnRunViaNsExec(ns, daemonHost), ...args);\\n}\\nasync function getNsDataThroughFile(ns, ...args) {\\n    return await getNsDataThroughFile_Custom(ns, getFnRunViaNsExec(ns, daemonHost), ...args);\\n}\\nfunction getHomeProcIsAlive(ns) {\\n    return (pid) => processList(ns, daemonHost, false).some(p => p.pid === pid);\\n}\\n\\nasync function establishMultipliers(ns) {\\n    log(ns, \\\"establishMultipliers\\\");\\n\\n    bitnodeMults = (await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile)) || {\\n        // prior to SF-5, bitnodeMults stays null and these mults are set to 1.\\n        ServerGrowthRate: 1,\\n        ServerWeakenRate: 1,\\n        FourSigmaMarketDataApiCost: 1,\\n        ScriptHackMoneyGain: 1\\n    };\\n    if (verbose)\\n        log(ns, `Bitnode mults:\\\\n  ${Object.keys(bitnodeMults).filter(k => bitnodeMults[k] != 1.0).map(k => `${k}: ${bitnodeMults[k]}`).join('\\\\n  ')}`);\\n}\\n\\nclass Tool {\\n    /** @param {({name: string; shortName: string; shouldRun: () => Promise<boolean>; args: string[]; tail: boolean; requiredServer: string; threadSpreadingAllowed: boolean; })} toolConfig\\n     * @param {Number} toolCost **/\\n    constructor(toolConfig, toolCost) {\\n        this.name = toolConfig.name;\\n        this.shortName = toolConfig.shortName;\\n        this.tail = toolConfig.tail || false;\\n        this.args = toolConfig.args || [];\\n        this.shouldRun = toolConfig.shouldRun;\\n        this.requiredServer = toolConfig.requiredServer;\\n        // Whether, in general, it's save to spread threads for this tool around to different servers (overridden in some cases)\\n        this.isThreadSpreadingAllowed = toolConfig.threadSpreadingAllowed === true;\\n        this.cost = toolCost;\\n    }\\n    /** @returns {boolean} true if the server has this tool and enough ram to run it. */\\n    canRun(server) {\\n        return doesFileExist(_ns, this.name, server.name) && server.ramAvailable() >= this.cost;\\n    };\\n    /** @param {boolean} allowSplitting - Whether max threads is computed across the largest server, or all servers (defaults to this.isThreadSpreadingAllowed)\\n     * @returns {number} The maximum number of threads we can run this tool with given the ram present. */\\n    getMaxThreads(allowSplitting = undefined) {\\n        if (allowSplitting === undefined)\\n            allowSplitting = this.isThreadSpreadingAllowed;\\n        // analyzes the servers array and figures about how many threads can be spooled up across all of them.\\n        let maxThreads = 0;\\n        for (const server of getAllServersByFreeRam().filter(s => s.hasRoot())) {\\n            // Note: To be conservative, we allow double imprecision to cause this floor() to return one less than should be possible,\\n            //       because the game likely doesn't account for this imprecision (e.g. let 1.9999999999999998 return 1 rather than 2)\\n            let threadsHere = Math.floor((server.ramAvailable() / this.cost) /*.toPrecision(14)*/);\\n            // HACK: Temp script firing before the script gets scheduled can cause home ram reduction, don't promise as much from home\\n            if (server.name == \\\"home\\\") // TODO: Revise this hack, it is technically messing further with the \\\"servers by free ram\\\" sort order\\n                threadsHere = Math.max(0, threadsHere - Math.ceil(homeReservedRam / this.cost)); // Note: Effectively doubles home reserved RAM in cases where we plan to consume all available RAM\\n            // TODO: Perhaps an alternative to the above is that the scheduler should not be so strict about home reserved ram enforcement if we use thread spreading and save scheduling on home for last?\\n            if (!allowSplitting)\\n                return threadsHere;\\n            maxThreads += threadsHere;\\n        }\\n        return maxThreads;\\n    }\\n}\\n\\n/** @param {NS} ns\\n * @param {({name: string; shortName: string; shouldRun: () => Promise<boolean>; args: string[]; tail: boolean; requiredServer: string; threadSpreadingAllowed: boolean; })[]} allTools **/\\nasync function buildToolkit(ns, allTools) {\\n    log(ns, \\\"buildToolkit\\\");\\n    let toolCosts = await getNsDataThroughFile(ns, `Object.fromEntries(ns.args.map(s => [s, ns.getScriptRam(s, 'home')]))`,\\n        '/Temp/script-costs.txt', allTools.map(t => t.name));\\n    const toolsTyped = allTools.map(toolConfig => new Tool(toolConfig, toolCosts[toolConfig.name]));\\n    toolsByShortName = Object.fromEntries(toolsTyped.map(tool => [tool.shortName || hashToolDefinition(tool), tool]));\\n    await updatePortCrackers(ns);\\n    return toolsTyped;\\n}\\n\\n/** @returns {string} */\\nconst hashToolDefinition = s => hashCode(s.name + (s.args?.toString() || ''));\\n\\n/** @returns {Tool} */\\nfunction getTool(s) {\\n    //return tools.find(t => t.shortName == (s.shortName || s) || hashToolDefinition(t) == hashToolDefinition(s))\\n    return toolsByShortName[s] || toolsByShortName[s.shortName || hashToolDefinition(s)];\\n}\\n\\nconst crackNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\nlet ownedCracks = [];\\n\\n/** Determine which port crackers we own\\n * @param {NS} ns */\\nasync function updatePortCrackers(ns) {\\n    const owned = await filesExist(ns, crackNames);\\n    ownedCracks = crackNames.filter((s, i) => owned[i]);\\n}\",\"filename\":\"daemon.js\",\"server\":\"home\"}}],[\"dump-ns-namespace.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { runCommand } from './helpers.js'\\n\\nexport function autocomplete(data, args) {\\n    return [\\n        \\\"bladeburner\\\", \\\"codingcontract\\\", \\\"corporation\\\", \\\"enums\\\", \\\"formulas\\\", \\\"gang\\\", \\\"grafting\\\", \\\"hacknet\\\",\\n        \\\"infiltration\\\", \\\"singularity\\\", \\\"sleeve\\\", \\\"stanek\\\", \\\"stock\\\", \\\"ui\\\"\\n    ];\\n}\\n\\n/** Intended to help me explore the NS namespace by dumping properties and function results. \\n * @param {NS} ns */\\nexport async function main(ns) {\\n    const obj = ns.args.length > 0 ? ns[ns.args[0]] : ns;\\n    const strObj = ns.args.length > 0 ? `ns.${ns.args[0]}` : 'ns';\\n    // Print all keys\\n    ns.tprint(Object.keys(obj));\\n    // Attempt to print the contents of all keys that are either properties or parameterless function calls.\\n    // TODO: Need a blacklist of functions that should not be called because they will screw with the current game\\n    //       (e.g. softReset, ui.resetTheme, stopAction, etc...)\\n    for (const k of Object.keys(obj)) {\\n        const strMember = `${strObj}.${k}`\\n        await runCommand(ns, `try {\\n\\t\\t\\tconst member = ${strMember};\\n\\t\\t\\tif(typeof member === 'function')\\n\\t\\t\\t\\tns.tprint('${strMember}(): ' + '(function)'); // JSON.stringify(member())); // Turns out running arbitrary functions has consequences\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprint('${strMember}: ' + JSON.stringify(member));\\n\\t\\t} catch { /* Ignore failures when calling functions that require parameters */ }`);\\n    }\\n}\",\"filename\":\"dump-ns-namespace.js\",\"server\":\"home\"}}],[\"faction-manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    log, getConfiguration, instanceCount, formatNumberShort, formatMoney,\\n    getNsDataThroughFile, getActiveSourceFiles, tryGetBitNodeMultipliers, getStocksValue\\n} from './helpers.js'\\n\\n// PLAYER CONFIGURATION CONSTANTS\\n// This acts as a list of default \\\"easy\\\" factions to always show even if the user has --hide-locked-factions\\nconst easyAccessFactions = [\\n    \\\"Tian Di Hui\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Aevum\\\", \\\"Volhaven\\\", // Location-Based\\n    \\\"BitRunners\\\", \\\"CyberSec\\\", \\\"NiteSec\\\", /* Hack Based */ \\\"Netburners\\\", /* Hacknet-based */ \\\"Slum Snakes\\\", \\\"Tetrads\\\", /* Early Crime */\\n];\\nconst default_priority_augs = [\\\"The Red Pill\\\", \\\"The Blade's Simulacrum\\\", \\\"Neuroreceptor Management Implant\\\"]; // By default, take these augs when they are accessible\\nconst default_desired_augs = [\\\"CashRoot Starter Kit\\\"] // By default, mark these augs as \\\"desired\\\" regardless of their stats\\n// If not in a gang, and we are nearing unlocking gangs (54K Karma) we will attempt to join any/all of these factions\\nconst potentialGangFactions = [\\\"Slum Snakes\\\", \\\"Tetrads\\\", \\\"The Black Hand\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\"];\\nconst default_hidden_stats = ['bladeburner', 'hacknet']; // Hide from the summary table by default because they clearly all come from one faction.\\nconst output_file = \\\"/Temp/affordable-augs.txt\\\";\\nconst staneksGift = \\\"Stanek's Gift - Genesis\\\";\\nconst factionsWithoutDonation = [\\\"Bladeburners\\\", \\\"Church of the Machine God\\\", \\\"Shadows of Anarchy\\\"]; // Not allowed to donate to these factions for rep\\n\\n// Factors used in calculations\\nconst nfCountMult = 1.14; // Factors that control how neuroflux prices scale\\nlet augCountMult = 1.9; // The multiplier for the cost increase of augmentations (changes based on SF11 level)\\nlet favorToDonate; // Based on the current BitNode Multipliers, the favour required to donate to factions for reputation.\\n// Various globals because this script does not do modularity well\\nlet playerData = null, bitNode = 0, gangFaction = null;\\nlet augsAwaitingInstall, startingPlayerMoney, stockValue = 0; // If the player holds stocks, their liquidation value will be determined\\nlet factionNames = [], joinedFactions = [], desiredStatsFilters = [], purchaseFactionDonations = [];\\nlet ownedAugmentations = [], simulatedOwnedAugmentations = [], effectiveSourceFiles = [], allAugStats = [], priorityAugs = [], purchaseableAugs = [];\\nlet factionData = {}, augmentationData = {};\\nlet printToTerminal, ignorePlayerData;\\nlet _ns; // Used to avoid passing ns to functions that don't need it except for some logs.\\n\\nlet options = null; // A copy of the options used at construction time\\nconst argsSchema = [ // The set of all command line arguments\\n    ['all', false], // Display all factions (spoilers), not just accessible factions\\n    ['a', false], // Flag-style alias for --all.\\n    ['hide-locked-factions', false], // Don't show factions that we don't currently have access to\\n    ['verbose', null], // Print the terminal as well as the script logs. If left null, this defaults to true in code now, but can be disabled with an explicit `--verbose false`\\n    ['v', false], // (Kept for backwards compatilily) this was an alias flag for setting --verbose to true when it previously defaulted to false.\\n    ['ignore-player-data', false], // Display stats for all factions and augs, despite what we already have (kind of a \\\"mock\\\" mode)\\n    ['i', false], // Flag alias for --ignore-player-data\\n    // By default, we ignore \\\"Shadows of Anarchy\\\" because they are tied to infiltration (manual action) and their aug prices don't follow normal conventions\\n    ['ignore-faction', [\\\"Shadows of Anarchy\\\"]], // Factions to omit from all data, stats, and calcs, (e.g.) if you do not want to purchase augs from them, or do not want to see them because they are impractical to join at this time\\n    ['after-faction', []], // Pretend we were to buy all augs offered by these factions. Show us only what remains.\\n    ['force-join', null], // Always join these factions if we have an invite (useful to force join a gang faction)\\n    // Augmentation purchasing-related options. Controls what augmentations are included in cost calculations, and optionally purchased\\n    ['priority-aug', []], // If accessible, every effort is made not to drop these from the sort purchase order.\\n    ['omit-aug', []], // Augmentations to exclude from the augmentation list (e.g. because we do not wish to purchase it yet)\\n    ['aug-desired', []], // These augs will be marked as \\\"desired\\\" whether or not they match desired-stats\\n    ['stat-desired', []], // Augs that give these will be starred (marked as desired and staged for purchase). If empty, defaults are picked based on your situation.\\n    ['neuroflux-disabled', false], // Set to true to skip including as many neuroflux upgrades as we can afford\\n    ['disable-donations', false], // When displaying \\\"obtainable\\\" augs and prices, don't include augs that require a donation to meet their rep requirements\\n    ['purchase', false], // Set to true to pull the trigger on purchasing all desired augs in the order specified\\n    ['ignore-stocks', false], // Set to true to ignore the liquidation value of stocks currently held when running\\n    ['ignore-stanek', false], // Set to true to ignore the fact that stanek is not yet taken before purchasing your first augs\\n    ['show-unavailable-aug-purchase-order', false], // Set to true to print the list of unavailable augmentations in optimal purchase order. (Note: Always displayed when no augs are available)\\n    ['show-all-purchase-lists', false], // Set to true to re-print the list of augmentations each time it changes\\n    // Display-related options - controls what information is displayed in the final \\\"cumulative stats by faction\\\" table\\n    ['sort', null], // What stat is the table of total faction stats sorted by. Defaults to your first --stat-desired\\n    ['hide-stat', []], // Stats to exclude from the final table (partial matching works)\\n    ['unique', false], // When displaying cumulative stats by faction, only include augs not given by a faction further up the list\\n    ['u', false], // Flag alias for --unique\\n];\\n\\n// For convenience, these lists provide command-line <tab> auto-complete values\\nconst stat_multis = [\\\"agility_exp\\\", \\\"agility\\\", \\\"charisma_exp\\\", \\\"charisma\\\", \\\"company_rep\\\", \\\"crime_money\\\", \\\"crime_success\\\", \\\"defense_exp\\\", \\\"defense\\\", \\\"dexterity_exp\\\", \\\"dexterity\\\",\\n    \\\"faction_rep\\\", \\\"hacking_chance\\\", \\\"hacking_exp\\\", \\\"hacking_grow\\\", \\\"hacking_money\\\", \\\"hacking\\\", \\\"hacking_speed\\\", \\\"strength_exp\\\", \\\"strength\\\", \\\"work_money\\\",\\n    \\\"bladeburner_analysis\\\", \\\"bladeburner_max_stamina\\\", \\\"bladeburner_stamina_gain\\\", \\\"bladeburner_success_chance\\\",\\n    \\\"hacknet_node_core_cost\\\", \\\"hacknet_node_level_cost\\\", \\\"hacknet_node_money\\\", \\\"hacknet_node_purchase_cost\\\", \\\"hacknet_node_ram_cost\\\"];\\nconst statShortcuts = [\\\"agi_exp\\\", \\\"agi\\\", \\\"cha_exp\\\", \\\"cha\\\", \\\"cmp_rep\\\", \\\"crm_$\\\", \\\"crm_prob\\\", \\\"def_exp\\\", \\\"def\\\", \\\"dex_exp\\\", \\\"dex\\\", \\\"fac_rep\\\", \\\"hack_prob\\\", \\\"hack_exp\\\", \\\"hack_grow\\\", \\\"hack_$\\\", \\\"hack\\\", \\\"hack_speed\\\", \\\"str_exp\\\", \\\"str\\\", \\\"work_$\\\", 'bladeburner', 'hacknet'];\\nconst allFactions = [\\\"Illuminati\\\", \\\"Daedalus\\\", \\\"The Covenant\\\", \\\"ECorp\\\", \\\"MegaCorp\\\", \\\"Bachman & Associates\\\", \\\"Blade Industries\\\", \\\"NWO\\\", \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\",\\n    \\\"Four Sigma\\\", \\\"KuaiGong International\\\", \\\"Fulcrum Secret Technologies\\\", \\\"BitRunners\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Sector-12\\\",\\n    \\\"Volhaven\\\", \\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Silhouette\\\", \\\"Tetrads\\\", \\\"Slum Snakes\\\", \\\"Netburners\\\", \\\"Tian Di Hui\\\", \\\"CyberSec\\\", \\\"Bladeburners\\\", \\\"Church of the Machine God\\\", \\\"Shadows of Anarchy\\\"];\\n// TODO: This list is missing augmentations. Regenerate.\\nconst augmentations = [\\\"ADR-V1 Pheromone Gene\\\", \\\"ADR-V2 Pheromone Gene\\\", \\\"Artificial Bio-neural Network Implant\\\", \\\"Artificial Synaptic Potentiation\\\", \\\"Augmented Targeting I\\\", \\\"Augmented Targeting II\\\", \\\"Augmented Targeting III\\\", \\\"BLADE-51b Tesla Armor\\\", \\\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\\\", \\\"BLADE-51b Tesla Armor: IPU Upgrade\\\", \\\"BLADE-51b Tesla Armor: Omnibeam Upgrade\\\", \\\"BLADE-51b Tesla Armor: Power Cells Upgrade\\\", \\\"BLADE-51b Tesla Armor: Unibeam Upgrade\\\", \\\"Bionic Arms\\\", \\\"Bionic Legs\\\", \\\"Bionic Spine\\\", \\\"BitRunners Neurolink\\\", \\\"BitWire\\\", \\\"Blade's Runners\\\", \\\"BrachiBlades\\\", \\\"CRTX42-AA Gene Modification\\\", \\\"CashRoot Starter Kit\\\", \\\"Combat Rib I\\\", \\\"Combat Rib II\\\", \\\"Combat Rib III\\\", \\\"CordiARC Fusion Reactor\\\", \\\"Cranial Signal Processors - Gen I\\\", \\\"Cranial Signal Processors - Gen II\\\", \\\"Cranial Signal Processors - Gen III\\\", \\\"Cranial Signal Processors - Gen IV\\\", \\\"Cranial Signal Processors - Gen V\\\", \\\"DataJack\\\", \\\"DermaForce Particle Barrier\\\", \\\"ECorp HVMind Implant\\\", \\\"EMS-4 Recombination\\\", \\\"Embedded Netburner Module\\\", \\\"Embedded Netburner Module Analyze Engine\\\", \\\"Embedded Netburner Module Core Implant\\\", \\\"Embedded Netburner Module Core V2 Upgrade\\\", \\\"Embedded Netburner Module Core V3 Upgrade\\\", \\\"Embedded Netburner Module Direct Memory Access Upgrade\\\", \\\"Enhanced Myelin Sheathing\\\", \\\"Enhanced Social Interaction Implant\\\", \\\"EsperTech Bladeburner Eyewear\\\", \\\"FocusWire\\\", \\\"GOLEM Serum\\\", \\\"Graphene Bionic Arms Upgrade\\\", \\\"Graphene Bionic Legs Upgrade\\\", \\\"Graphene Bionic Spine Upgrade\\\", \\\"Graphene Bone Lacings\\\", \\\"Graphene BrachiBlades Upgrade\\\", \\\"Hacknet Node CPU Architecture Neural-Upload\\\", \\\"Hacknet Node Cache Architecture Neural-Upload\\\", \\\"Hacknet Node Core Direct-Neural Interface\\\", \\\"Hacknet Node Kernel Direct-Neural Interface\\\", \\\"Hacknet Node NIC Architecture Neural-Upload\\\", \\\"HemoRecirculator\\\", \\\"Hydroflame Left Arm\\\", \\\"HyperSight Corneal Implant\\\", \\\"Hyperion Plasma Cannon V1\\\", \\\"Hyperion Plasma Cannon V2\\\", \\\"I.N.T.E.R.L.I.N.K.E.D\\\", \\\"INFRARET Enhancement\\\", \\\"LuminCloaking-V1 Skin Implant\\\", \\\"LuminCloaking-V2 Skin Implant\\\", \\\"NEMEAN Subdermal Weave\\\", \\\"Nanofiber Weave\\\", \\\"Neotra\\\", \\\"Neural Accelerator\\\", \\\"Neural-Retention Enhancement\\\", \\\"Neuralstimulator\\\", \\\"Neuregen Gene Modification\\\", \\\"NeuroFlux Governor\\\", \\\"Neuronal Densification\\\", \\\"Neuroreceptor Management Implant\\\", \\\"Neurotrainer I\\\", \\\"Neurotrainer II\\\", \\\"Neurotrainer III\\\", \\\"Nuoptimal Nootropic Injector Implant\\\", \\\"NutriGen Implant\\\", \\\"ORION-MKIV Shoulder\\\", \\\"OmniTek InfoLoad\\\", \\\"PC Direct-Neural Interface\\\", \\\"PC Direct-Neural Interface NeuroNet Injector\\\", \\\"PC Direct-Neural Interface Optimization Submodule\\\", \\\"PCMatrix\\\", \\\"Photosynthetic Cells\\\", \\\"Power Recirculation Core\\\", \\\"SPTN-97 Gene Modification\\\", \\\"SmartJaw\\\", \\\"SmartSonar Implant\\\", \\\"Social Negotiation Assistant (S.N.A)\\\", \\\"Speech Enhancement\\\", \\\"Speech Processor Implant\\\", \\\"Synaptic Enhancement Implant\\\", \\\"Synfibril Muscle\\\", \\\"Synthetic Heart\\\", \\\"TITN-41 Gene-Modification Injection\\\", \\\"The Black Hand\\\", \\\"The Blade's Simulacrum\\\", \\\"The Red Pill\\\", \\\"The Shadow's Simulacrum\\\", \\\"Unstable Circadian Modulator\\\", \\\"Vangelis Virus\\\", \\\"Vangelis Virus 3.0\\\", \\\"Wired Reflexes\\\", \\\"Xanipher\\\", \\\"nextSENS Gene Modification\\\"]\\nconst strNF = \\\"NeuroFlux Governor\\\"\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--sort\\\" || lastFlag == \\\"--stat-desired\\\" || lastFlag == \\\"--hide-stat\\\")\\n        return statShortcuts.concat(stat_multis);\\n    if (lastFlag == \\\"--ignore-faction\\\" || lastFlag == \\\"--after-faction\\\")\\n        return allFactions.map(f => f.replaceAll(\\\" \\\", \\\"_\\\")).sort(); // Command line doesn't like spaces\\n    if (lastFlag == \\\"--omit-aug\\\" || lastFlag == \\\"--aug-desired\\\" || lastFlag == \\\"--priority-aug\\\")\\n        return augmentations.map(f => f.replaceAll(\\\" \\\", \\\"_\\\"));\\n    return [];\\n}\\n\\n// Flags -a for all factions, -v to print to terminal\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions || await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n    _ns = ns;\\n\\n    // Ensure all globals are reset before we proceed with the script, in case we've done things out of order\\n    augCountMult = favorToDonate = playerData = gangFaction = startingPlayerMoney = stockValue = null;\\n    factionNames = [], joinedFactions = [], desiredStatsFilters = [], purchaseFactionDonations = [];\\n    ownedAugmentations = [], simulatedOwnedAugmentations = [], effectiveSourceFiles = [], allAugStats = [], priorityAugs = [], purchaseableAugs = [];\\n    factionData = {}, augmentationData = {};\\n\\n    printToTerminal = (options.v || options.verbose === true || options.verbose === null) && !options['join-only'];\\n    ignorePlayerData = options.i || options['ignore-player-data'];\\n    const afterFactions = options['after-faction'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const omitAugs = options['omit-aug'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    // Set up augs which should take priority (in our purchase budget) over all others\\n    priorityAugs = options['priority-aug']?.map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    if (priorityAugs.length == 0) priorityAugs = default_priority_augs;\\n    // Set up \\\"desired augs\\\" to always include in our purhase order (but with standard priority). Should include priority-augs as well\\n    let desiredAugs = options['aug-desired'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\"));\\n    if (desiredAugs.length == 0) desiredAugs = default_desired_augs;\\n    desiredAugs = priorityAugs.concat(desiredAugs);\\n\\n    // Determine which source files are active, which, for one, lets us determine how the cost of augmentations will scale\\n    playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n    bitNode = (await getNsDataThroughFile(ns, `ns.getResetInfo()`)).currentNode;\\n    const ownedSourceFiles = await getActiveSourceFiles(ns, false);\\n    effectiveSourceFiles = await getActiveSourceFiles(ns, true);\\n    const sf4Level = bitNode == 4 ? 3 : ownedSourceFiles[4] || 0; // If in BN4, singularity costs are as though you had SF4.3\\n    if (sf4Level == 0)\\n        return log(ns, `ERROR: This script requires SF4 (singularity) functions to work.`, true, 'error');\\n    else if (sf4Level < 3)\\n        log(ns, `WARNING: This script makes heavy use of singularity functions, which are quite expensive before you have SF4.3. ` +\\n            `Unless you have a lot of free RAM for temporary scripts, you may get runtime errors.`);\\n    const sf11Level = ownedSourceFiles[11] || 0;\\n    augCountMult = [1.9, 1.824, 1.786, 1.767][sf11Level];\\n    log(ns, `Player has sf11Level ${sf11Level}, so the multiplier after each aug purchased is ${augCountMult}.`);\\n\\n    // Collect information about the player\\n    const gangInfo = await getGangInfo(ns);\\n    gangFaction = gangInfo ? gangInfo.faction : false;\\n    favorToDonate = await getNsDataThroughFile(ns, 'ns.getFavorToDonate()');\\n    startingPlayerMoney = playerData.money;\\n    stockValue = options['ignore-stocks'] ? 0 : await getStocksValue(ns);\\n    joinedFactions = ignorePlayerData ? [] : playerData.factions;\\n    log(ns, 'In factions: ' + joinedFactions);\\n    // Get owned augmentations (whether they've been installed or not). Ignore strNF because you can always buy more.\\n    ownedAugmentations = await getNsDataThroughFile(ns, 'ns.singularity.getOwnedAugmentations(true)', '/Temp/player-augs-purchased.txt');\\n    const installedAugmentations = await getNsDataThroughFile(ns, 'ns.singularity.getOwnedAugmentations()', '/Temp/player-augs-installed.txt');\\n    augsAwaitingInstall = ownedAugmentations.length - installedAugmentations.length;\\n    if (options['neuroflux-disabled']) omitAugs.push(strNF);\\n    simulatedOwnedAugmentations = ignorePlayerData ? [] : ownedAugmentations.filter(a => a != strNF);\\n    // Clear \\\"priority\\\" / \\\"desired\\\" lists of any augs we already own\\n    priorityAugs = priorityAugs.filter(name => !simulatedOwnedAugmentations.includes(name));\\n    desiredAugs = desiredAugs.filter(name => !simulatedOwnedAugmentations.includes(name));\\n    // Determine the set of desired augmentation stats. If not specified by the user, it's based on our situation\\n    desiredStatsFilters = options['stat-desired'];\\n    if ((desiredStatsFilters?.length ?? 0) == 0) // If the user does has not specified stats or augmentations to prioritize, use sane defaults\\n        desiredStatsFilters = ownedAugmentations.length > 40 ? ['*'] : // Once we have more than N augs, switch to buying up anything and everything\\n            bitNode == 6 || bitNode == 7 || playerData.factions.includes(\\\"Bladeburners\\\") ? ['*'] : // If doing bladeburners, combat augs matter too, so just get everything\\n                ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet', 'crime_money']; // Otherwise get hacking + rep boosting, etc. for unlocking augs more quickly\\n    log(ns, 'Desired stats filter: ' + JSON.stringify(desiredStatsFilters));\\n\\n    // Prepare global data sets of faction and augmentation information\\n    log(ns, 'Getting all faction data...');\\n    await updateFactionData(ns, options['ignore-faction'].map(f => f.replaceAll(\\\"_\\\", \\\" \\\")));\\n    log(ns, 'Getting all augmentation data...');\\n    await updateAugmentationData(ns, desiredAugs);\\n\\n    // Join available factions that would give access to additional desired augmentations\\n    if (ignorePlayerData)\\n        log(ns, 'INFO: Skipping joining available factions due to the --ignore-player-data flag set.');\\n    else {\\n        log(ns, 'Joining available factions...');\\n        let forceJoinFactions = options['force-join'] || [];\\n        if (!forceJoinFactions && !gangFaction && 2 in ownedSourceFiles && ns.heart.break() <= -53000) {\\n            forceJoinFactions.push(potentialGangFactions); // Try to join all gang factions as we near unlocking gangs, regardless of their augmentations\\n            log(ns, `INFO: Will join any gang faction because Karma is at ${formatNumberShort(ns.heart.break())}`, printToTerminal, printToTerminal ? 'info' : undefined);\\n        }\\n        let joined = await joinFactions(ns, forceJoinFactions);\\n        if (joined) log(ns, `SUCCESS: Joined ${joined} factions.`);\\n        displayJoinedFactionSummary(ns);\\n    }\\n\\n    // Display the summary of all factions and total aug stats available from each\\n    let hideSummaryStats = options['hide-stat'];\\n    if (hideSummaryStats.length == 0) hideSummaryStats = default_hidden_stats;\\n    const sort = unshorten(options.sort || desiredStatsFilters[0]);\\n    displayFactionSummary(ns, sort, options.u || options.unique, afterFactions, hideSummaryStats);\\n\\n    // Create the table of all augmentations, and the breakdown of what we can afford\\n    await manageUnownedAugmentations(ns, omitAugs);\\n\\n    if (options.purchase && ownedAugmentations.length <= 1 && 13 in ownedSourceFiles && !ownedAugmentations.includes(staneksGift) && !options['ignore-stanek'])\\n        log(ns, `WARNING: You have not yet accepted Stanek's Gift from the church in Chongqing. Purchasing augs will ` +\\n            `prevent you from doing so for the rest of this BN. (Run with '--ignore-stanek' to bypass this warning.)`, true);\\n    else if (options.purchase && purchaseableAugs) {\\n        await purchaseDesiredAugs(ns);\\n        await ns.write(output_file, \\\"\\\", \\\"w\\\"); // Clear the file so it isn't misinterpreted on next reset.\\n    } else if (!ignorePlayerData) // Write a temp file that summarizes what augs we could afford if we could ascend right now.\\n        await ns.write(output_file, JSON.stringify({\\n            affordable_nf_count: purchaseableAugs.filter(a => a.name == strNF).length,\\n            affordable_augs: [...new Set(purchaseableAugs.map(a => a.name))],\\n            owned_count: Object.values(augmentationData).filter(a => a.owned).length,\\n            unowned_count: Object.values(augmentationData).filter(a => !a.owned).length,\\n            total_rep_cost: Object.values(purchaseFactionDonations).reduce((t, r) => t + r, 0),\\n            total_aug_cost: getTotalCost(purchaseableAugs),\\n        }), \\\"w\\\");\\n}\\n\\n/** @param {NS} ns\\n *  @returns {Promise<GangGenInfo|boolean>} Gang information, if we're in a gang, or False */\\nasync function getGangInfo(ns) {\\n    return await getNsDataThroughFile(ns, 'ns.gang.inGang() ? ns.gang.getGangInformation() : false', '/Temp/gang-stats.txt')\\n}\\n\\n// Helper function to make multi names shorter for display in a table\\nfunction shorten(mult) {\\n    return mult.replace(\\\"_mult\\\", \\\"\\\").replace(\\\"company\\\", \\\"cmp\\\").replace(\\\"faction\\\", \\\"fac\\\").replace(\\\"money\\\", \\\"$\\\").replace(\\\"crime\\\", \\\"crm\\\")\\n        .replace(\\\"agility\\\", \\\"agi\\\").replace(\\\"strength\\\", \\\"str\\\").replace(\\\"charisma\\\", \\\"cha\\\").replace(\\\"defense\\\", \\\"def\\\").replace(\\\"dexterity\\\", \\\"dex\\\").replace(\\\"hacking\\\", \\\"hack\\\")\\n        .replace(\\\"hacknet_node\\\", \\\"hn\\\").replace(\\\"bladeburner\\\", \\\"bb\\\").replace(\\\"stamina\\\", \\\"stam\\\")\\n        .replace(\\\"success_chance\\\", \\\"success\\\").replace(\\\"success\\\", \\\"prob\\\").replace(\\\"chance\\\", \\\"prob\\\");\\n}\\n\\n// Helper function to take a shortened multi name provided by the user and map it to a real multi\\nfunction unshorten(strMult) {\\n    if (!strMult) return strMult;\\n    if (stat_multis.includes(strMult)) return strMult; // They just omitted the \\\"_mult\\\" suffix shared by all\\n    if (stat_multis.includes(strMult.replace(\\\"_mult\\\", \\\"\\\"))) return strMult.replace(\\\"_mult\\\", \\\"\\\"); // _mult suffix no longer appears\\n    if (strMult == \\\"*\\\") return \\\"hacking\\\"; // Default if no one stat was provided (* is the wildcard)\\n    let match = stat_multis.find(m => m == strMult || shorten(m) == strMult) || // Match exactly on the short-form of a multiplier\\n        stat_multis.find(m => m.startsWith(strMult)) || // Otherwise match on the first multiplier that starts with the provided string\\n        stat_multis.find(m => m.includes(strMult)); // Otherwise match on the first multiplier that contains the provided string\\n    if (find !== undefined) return match;\\n    throw `The specified stat name '${strMult}' does not match any of the known stat names: ${stat_multis.join(', ')}`;\\n}\\n\\nlet factionSortOrder = (a, b) => factionSortValue(a) - factionSortValue(b);\\nlet factionSortValue = faction => {\\n    let preferredIndex = factionNames.indexOf(faction.name || faction);\\n    return preferredIndex == -1 ? 99 : preferredIndex;\\n};\\n\\n// Ram-dodging helper, runs a command for all items in a list and returns a dictionary.\\nconst dictCommand = (command) => `Object.fromEntries(ns.args.map(o => [o, ${command}]))`;\\n\\n// Get a dictionary from retrieving the same infromation for every server name\\nasync function getSingularityDict(ns, command, listItems) {\\n    return await getNsDataThroughFile(ns, dictCommand(`ns.singularity.${command}(o)`),\\n        `/Temp/singularity-${command}-all.txt`, listItems);\\n}\\n\\n/** @param {NS} ns **/\\nasync function updateFactionData(ns, factionsToOmit) {\\n    // Gather a list of all faction names to collect information about. Start with any player joined and invited factions\\n    const invitations = await getNsDataThroughFile(ns, 'ns.singularity.checkFactionInvitations()');\\n    factionNames = joinedFactions.concat(invitations);\\n    // Add in factions the user hasn't seen. All factions by default, or a small subset of easy-access factions if --hide-locked-factions is set\\n    factionNames.push(...(options['hide-locked-factions'] ? easyAccessFactions : allFactions).filter(f => !factionNames.includes(f)));\\n    // Unless \\\"all factions\\\" is requested, omit factions that are in no way accessible on this reset\\n    if (!(options.a || options.all)) {\\n        if (!(13 in effectiveSourceFiles)) factionsToOmit.push(\\\"Church of the Machine God\\\");\\n        if (!(6 in effectiveSourceFiles || 7 in effectiveSourceFiles)) factionsToOmit.push(\\\"Bladeburners\\\");\\n    }\\n    // Finally, remove all factions marked as omitted\\n    log(ns, `We \\\"know\\\" about ${factionNames.length} factions, and will omit ${factionsToOmit.length} of them.`);\\n    factionNames = factionNames.filter(f => !factionsToOmit.includes(f));\\n\\n    let dictFactionAugs = await getSingularityDict(ns, 'getAugmentationsFromFaction', factionNames);\\n    let dictFactionReps = await getSingularityDict(ns, 'getFactionRep', factionNames);\\n    let dictFactionFavors = await getSingularityDict(ns, 'getFactionFavor', factionNames);\\n\\n    // Need information about our gang to work around a TRP bug - gang faction appears to have it available, but it's not (outside of BN2)  \\n    if (gangFaction && bitNode != 2)\\n        dictFactionAugs[gangFaction] = dictFactionAugs[gangFaction]?.filter(a => a != \\\"The Red Pill\\\");\\n\\n    factionData = Object.fromEntries(factionNames.map(faction => [faction, {\\n        name: faction,\\n        invited: invitations.includes(faction),\\n        joined: joinedFactions.includes(faction),\\n        reputation: dictFactionReps[faction] || 0,\\n        favor: dictFactionFavors[faction],\\n        donationsUnlocked: dictFactionFavors[faction] >= favorToDonate &&\\n            // As a rule, cannot donate to gang factions or any of the below factions - need to use other mechanics to gain rep.\\n            ![gangFaction, ...factionsWithoutDonation].includes(faction),\\n        augmentations: dictFactionAugs[faction],\\n        unownedAugmentations: function (includeNf = false) { return this.augmentations.filter(aug => !simulatedOwnedAugmentations.includes(aug) && (aug != strNF || includeNf)) },\\n        mostExpensiveAugCost: function () { return this.augmentations.map(augName => augmentationData[augName]).reduce((max, aug) => Math.max(max, aug.price), 0) },\\n        totalUnownedMults: function () {\\n            return this.unownedAugmentations().map(augName => augmentationData[augName])\\n                .reduce((arr, aug) => Object.keys(aug.stats).forEach(stat => arr[stat] = ((arr[stat] || 1) * aug.stats[stat])) || arr, new Map);\\n        }\\n    }]));\\n}\\n\\n/** @param {NS} ns **/\\nasync function updateAugmentationData(ns, desiredAugs) {\\n    const augmentationNames = [...new Set(Object.values(factionData).flatMap(f => f.augmentations))]; // augmentations.slice();\\n    const dictAugRepReqs = await getSingularityDict(ns, 'getAugmentationRepReq', augmentationNames);\\n    const dictAugPrices = await getSingularityDict(ns, 'getAugmentationPrice', augmentationNames);\\n    const dictAugStats = await getSingularityDict(ns, 'getAugmentationStats', augmentationNames);\\n    const dictAugPrereqs = await getSingularityDict(ns, 'getAugmentationPrereq', augmentationNames);\\n    augmentationData = Object.fromEntries(augmentationNames.map(aug => [aug, {\\n        name: aug,\\n        displayName: aug,\\n        owned: simulatedOwnedAugmentations.includes(aug),\\n        reputation: dictAugRepReqs[aug],\\n        price: dictAugPrices[aug],\\n        stats: Object.fromEntries(Object.entries(dictAugStats[aug]).filter(([k, v]) => v != 1)),\\n        prereqs: dictAugPrereqs[aug] || [],\\n        desired: desiredAugs.includes(aug) ||  // Mark as \\\"desired\\\" augs explicitly requested, or those with stats in the 'stat-desired' command line options\\n            desiredStatsFilters.includes('*') || desiredStatsFilters.includes('_') || // Wildcards - all stats are desired (_ is for backwards compatibility when all stat names ended with '_mult')\\n            Object.entries(dictAugStats[aug]).some(([k, v]) => v != 1 && desiredStatsFilters.some(filter => k.includes(filter))),\\n        // Get the name of the \\\"most-early-game\\\" faction from which we can buy this augmentation. Estimate this by cost of the most expensive aug the offer\\n        getFromAny: factionNames.map(f => factionData[f]).sort((a, b) => a.mostExpensiveAugCost - b.mostExpensiveAugCost)\\n            .filter(f => f.augmentations.includes(aug))[0]?.name ?? \\\"(unknown)\\\",\\n        // Get a list of joined factions that have this augmentation\\n        joinedFactionsWithAug: function () {\\n            return factionNames.map(f => factionData[f]).filter(f => f.joined && f.augmentations.includes(this.name));\\n        },\\n        // Whether there is some joined faction which already has enough reputation to buy this augmentation\\n        canAfford: function () { return this.joinedFactionsWithAug().some(f => f.reputation >= this.reputation); },\\n        canAffordWithDonation: function () { return this.joinedFactionsWithAug().some(f => f.donationsUnlocked); },\\n        // Get the name of the **joined** faction from which we can buy this augmentation (sorted by which is closest to being able to afford it, then by most preferred)\\n        getFromJoined: function () {\\n            return (this.joinedFactionsWithAug().filter(f => f.reputation >= this.reputation)[0] ||\\n                this.joinedFactionsWithAug().filter(f => f.donationsUnlocked).sort((a, b) => getReqDonationForAug(this, a) - getReqDonationForAug(this, b))[0] ||\\n                this.joinedFactionsWithAug()[0])?.name;\\n        },\\n        toString: function () {\\n            const factionColWidth = 16, augColWidth = 40, statsColWidth = 60;\\n            const statKeys = Object.keys(this.stats);\\n            const statsString = `Stats:${statKeys.length.toFixed(0).padStart(2)}` + (statKeys.length == 0 ? '' :\\n                ` { ${statKeys.map(prop => shorten(prop) + ': ' + Math.round((this.stats[prop] + Number.EPSILON) * 100) / 100).join(', ')} }`);\\n            const factionName = this.getFromJoined() || this.getFromAny;\\n            const fCreep = Math.max(0, factionName.length - factionColWidth);\\n            const budget = playerData.money + stockValue;\\n            const augNameShort = this.displayName.length <= (augColWidth - fCreep) ? this.displayName :\\n                `${this.displayName.slice(0, Math.ceil(augColWidth / 2 - 3 - fCreep))}...${this.displayName.slice(this.displayName.length - Math.floor(augColWidth / 2))}`;\\n            return `${this.desired ? '*' : ' '} Price: ${formatMoney(this.price, 4).padEnd(7)} ${this.price <= budget ? '✓' : '✗'}  ` +\\n                `Rep: ${formatNumberShort(this.reputation, 4).padEnd(6)} ${this.canAfford() ? '✓' : this.canAffordWithDonation() ? '$' : '✗'}  ` +\\n                `Faction: ${factionName.padEnd(factionColWidth)}  Aug: ${augNameShort.padEnd(augColWidth - fCreep)}  ` +\\n                `${statsString.length <= statsColWidth ? statsString : (statsString.substring(0, statsColWidth - 4) + '... }')}`;\\n        }\\n    }]));\\n    // Propagate desired/priority status to any dependencies of desired augs. Note when --all-factions mode is not enabled, it's possible some prereqs are not in our list\\n    let propagateDesired = (aug) => !aug.desired || !aug.prereqs || aug.prereqs.forEach(prereqName => {\\n        let pa = augmentationData[prereqName];\\n        if (!pa) return log(ns, `WARNING: Missing info about aug ${aug.name} prerequisite ${prereqName}. We likely don't have access.`);\\n        if (pa.owned) return;\\n        if (!pa.desired) {\\n            log(ns, `INFO: Promoting aug \\\"${prereqName}\\\" to \\\"desired\\\" status, because desired aug \\\"${aug.name}\\\" depends on it.`);\\n            pa.desired = true;\\n        } // Also propagate the \\\"priority\\\" status to any dependencies of priority augs (dependency must be made a higher priority)\\n        if (priorityAugs.includes(aug.name) && !priorityAugs.includes(prereqName)) {\\n            log(ns, `INFO: Promoting aug \\\"${prereqName}\\\" to \\\"priority\\\" status, because priority aug \\\"${aug.name}\\\" depends on it.`, true);\\n            priorityAugs.splice(priorityAugs.indexOf(aug.name), 0, prereqName);\\n        }\\n        propagateDesired(pa); // Recurse on any nested prerequisites of this prerequisite aug.\\n    });\\n    Object.values(augmentationData).forEach(a => propagateDesired(a));\\n    // Prepare a collection of all augmentations' statistics\\n    allAugStats = Object.values(augmentationData).flatMap(aug => Object.keys(aug.stats)).filter((v, i, a) => a.indexOf(v) === i).sort();\\n}\\n\\n/** @param {NS} ns **/\\nasync function joinFactions(ns, forceJoinFactions) {\\n    let manualJoin = [\\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Aevum\\\", \\\"Volhaven\\\"];\\n    // If we have already joined one of the \\\"precluding\\\" factions, we are free to join the remainder\\n    if (joinedFactions.some(f => manualJoin.includes(f)))\\n        manualJoin = [];\\n    // Collect the set of augmentations we already have access to given the factions we've joined\\n    const accessibleAugmentations = new Set(joinedFactions.flatMap(fac => factionData[fac]?.augmentations ?? []));\\n    log(ns, `${accessibleAugmentations.size} augmentations are already accessible from our ${joinedFactions.length} joined factions.`);\\n    // Check for faction invitations\\n    const invitations = Object.values(factionData).filter(f => f.invited);\\n    log(ns, `Outstanding invitations from ${invitations.length} factions: ${JSON.stringify(invitations.map(f => f.name))}`);\\n    let joined = 0;\\n    // Join all factions with remaining augmentations we care about\\n    for (const faction of invitations.sort(factionSortOrder)) {\\n        let unownedAugs = faction.unownedAugmentations(true); // Filter out augmentations we've already purchased\\n        let newAugs = unownedAugs.filter(aug => !accessibleAugmentations.has(aug)); //  Filter out augmentations we can purchase from another faction we've already joined\\n        let desiredAugs = newAugs.filter(aug => augmentationData[aug].desired); //  Filter out augmentations we have no interest in\\n        log(ns, `${faction.name} has ${faction.augmentations.length} augs, ${unownedAugs.length} unowned, ${newAugs.length} not offered by joined factions, ` +\\n            `${desiredAugs.length} with desirable stats` + (desiredAugs.length == 0 ? ' (not joining)' : `: ${JSON.stringify(desiredAugs)}`));\\n        if (desiredAugs.length == 0 && !forceJoinFactions.includes(faction.name)) continue;\\n        if (manualJoin.includes(faction.name) && !forceJoinFactions.includes(faction.name))\\n            log(ns, `INFO: You have an invite from faction ${faction.name}, but it will not be automatically joined, ` +\\n                `because this would prevent you from joining some other factions.`, printToTerminal, printToTerminal ? 'info' : undefined);\\n        else {\\n            log(ns, `Joining faction ${faction.name} which has ${desiredAugs.length} desired augmentations: ${desiredAugs}`);\\n            let response;\\n            if (response = await getNsDataThroughFile(ns, `ns.singularity.joinFaction(ns.args[0])`, null, [faction.name])) {\\n                faction.joined = true;\\n                faction.augmentations.forEach(aug => accessibleAugmentations.add(aug));\\n                joinedFactions.push(faction.name);\\n                log(ns, `SUCCESS: Joined faction ${faction.name} (Response: ${response})`, true, 'success');\\n                joined++;\\n            } else\\n                log(ns, `ERROR: Error joining faction ${faction.name}. Response: ${response}`, false, 'error');\\n        }\\n    }\\n    return joined;\\n}\\n\\n/** Compute how much money must be donated to the faction to afford an augmentation. Faction can be either a faction object, or faction name */\\nlet getReqDonationForRep = (rep, faction) => Math.ceil(1e6 * (Math.max(0, rep - (faction.name ? faction : factionData[faction]).reputation)) / (playerData.mults.faction_rep));\\nlet getReqDonationForAug = (aug, faction) => getReqDonationForRep(aug.reputation, faction || aug.getFromJoined());\\n\\nlet getTotalCost = (augPurchaseOrder) => augPurchaseOrder.reduce((total, aug, i) => total + aug.price * augCountMult ** i, 0);\\n\\nlet augSortOrder = (a, b) =>\\n    // Hack: Multiple NF have to be from most least expensive to most expensive\\n    (a.name == strNF && b.name == strNF ? a.price - b.price : 0) ||\\n    (b.price - a.price) || (b.reputation - a.reputation) ||\\n    (b.desired != a.desired ? (a.desired ? -1 : 1) : a.name.localeCompare(b.name));\\n\\n// Sort augmentations such that they are in order of price, except when there are prerequisites to worry about\\nfunction sortAugs(ns, augs = []) {\\n    augs.sort(augSortOrder);\\n    // Bubble up prerequisites to the top\\n    for (let i = 0; i < augs.length; i++) {\\n        for (let j = 0; j < augs[i].prereqs.length; j++) {\\n            const prereqIndex = augs.findIndex(a => a.name == augs[i].prereqs[j]);\\n            if (prereqIndex === -1 /* Already bought */ || prereqIndex < i /* Already sorted up */) continue;\\n            augs.splice(i, 0, augs.splice(prereqIndex, 1)[0]);\\n            i -= 1; // Back up i so that we revisit the prerequisites' own prerequisites\\n            break;\\n        }\\n    }\\n    // TODO: Logic below is **almost** working, except that the \\\"batch detection\\\" is flawed - it does not detect when multiple separate\\n    //       \\\"trees\\\" of dependencies with a common root are side-by-side (e.g. \\\"Embedded Netburner Module\\\" tree). Until fixed, we cannot bubble.\\n    return augs;\\n    // Since we are no longer most-expensive to least-expensive, the \\\"ideal purchase order\\\" is more complicated.\\n    // So now see if moving each chunk of prereqs down a slot reduces the overall price.\\n    let initialCost = getTotalCost(augs);\\n    let totalMoves = 0;\\n    for (let i = augs.length - 1; i > 0; i--) {\\n        let batchLengh = 1; // Look for a \\\"batch\\\" of prerequisites, evidenced by augs above this one being cheaper instead of more expensive\\n        while (i - batchLengh >= 0 && augs[i].price > augs[i - batchLengh].price) batchLengh++;\\n        if (batchLengh == 1) continue; // Not the start of a batch of prerequisites\\n        //log(ns, `Detected a batch of length ${batchLengh} from ${augs[i - batchLengh + 1].name} to ${augs[i].name}`);\\n        let moved = 0, bestCost = initialCost;\\n        while (i + moved + 1 < augs.length) { // See if promoting augs from below the batch to above the batch reduces the overall cost\\n            let testOrder = augs.slice(), moveIndex = i + moved + 1, insertionIndex = i - batchLengh + 1 + moved;\\n            testOrder.splice(insertionIndex, 0, testOrder.splice(moveIndex, 1)[0]); // Try moving it above the batch\\n            let newCost = getTotalCost(testOrder);\\n            //log(ns, `Cost would change by ${((newCost - bestCost) / bestCost * 100).toPrecision(2)}% from ${formatMoney(bestCost)} to ${formatMoney(newCost)} by buying ${augs[moveIndex].name} before ${augs[insertionIndex].name}`);\\n            if (bestCost < newCost) break; // If the cost is worse or the same, stop shifting augs\\n            //log(ns, `Cost reduced by ${formatMoney(bestCost - newCost)} from ${formatMoney(bestCost)} to ${formatMoney(newCost)} by buying ${augs[moveIndex].name} before ${augs[insertionIndex].name}`);\\n            bestCost = newCost;\\n            augs.splice(insertionIndex, 0, augs.splice(moveIndex, 1)[0]); // Found a cheaper sort order - lock in the move!\\n            moved++;\\n        }\\n        i = i - batchLengh + 1; // Decrement i to past the batch so it doesn't try to change the batch's own order\\n        totalMoves += moved;\\n    }\\n    let finalCost = getTotalCost(augs);\\n    if (totalMoves > 0) log(ns, `Cost reduced by ${formatMoney(initialCost - finalCost)} (from ${formatMoney(initialCost)} to ${formatMoney(finalCost)}) by bubbling ${totalMoves} augs up above batches of dependencies.`);\\n    return augs;\\n}\\n\\n/** @param {NS} ns \\n * Display all information about all augmentations, including lists of available / desired / affordable augmentations in their optimal purchase order.  */\\nasync function manageUnownedAugmentations(ns, ignoredAugs) {\\n    const bitNodeMults = await tryGetBitNodeMultipliers(ns, false) || { DaedalusAugsRequirement: 1 };\\n    // Note: A change coming soon will convert DaedalusAugsRequirement from a fractional multiplier, to an integer number of augs. This should support both for now.\\n    const reqDaedalusAugs = bitNodeMults.DaedalusAugsRequirement < 2 ? Math.round(30 * bitNodeMults.DaedalusAugsRequirement) : bitNodeMults.DaedalusAugsRequirement;\\n    let outputRows = [`Currently have ${ownedAugmentations.length}/${reqDaedalusAugs} Augmentations required for Daedalus.`];\\n    const unownedAugs = Object.values(augmentationData).filter(aug => (!aug.owned || aug.name == strNF) && !ignoredAugs.includes(aug.name));\\n    if (unownedAugs.length == 0) return log(ns, `All ${Object.keys(augmentationData).length} augmentations are either owned or ignored!`, printToTerminal)\\n    let unavailableAugs = unownedAugs.filter(aug => aug.getFromJoined() == null);\\n    let availableAugs = unownedAugs.filter(aug => aug.getFromJoined() != null);\\n    // List unavailable augs only if there are none available, or if the user specifically requested to see this list.\\n    if (availableAugs.length == 0 || unavailableAugs.length > 0 && options['show-unavailable-aug-purchase-order'])\\n        await manageFilteredSubset(ns, outputRows, 'Unavailable', unavailableAugs, true, false);\\n    // Prepare and display a little legend of what symbols in our augmentation list mean\\n    const legendTitle = 'Optimized Purchase Order Legend';\\n    outputRows.push(legendTitle, '-'.repeat(legendTitle.length), \\\"✓  Can afford\\\", \\\"✗  Cannot afford\\\", \\\"$  Can donate for rep\\\",\\n        `*  Desired aug/stats (${desiredStatsFilters.join(\\\", \\\")})`, '-'.repeat(legendTitle.length));\\n    const countAvailable = availableAugs?.length || 0; // Get a count of available augs (including NF) to determine whether to prepare a purchase order\\n    // Display available augs. We use the return value to \\\"lock in\\\" the new sort order. If enabled, subsequent tables are displayed if the filtered sort order changes.\\n    availableAugs = ignorePlayerData ? unavailableAugs : // Note: We omit NF from available augs here because as many as we can afford are added at the end.\\n        await manageFilteredSubset(ns, outputRows, 'Available', availableAugs.filter(aug => aug.name != strNF), true);\\n    if (countAvailable > 0) {\\n        let augsWithRep = availableAugs.filter(aug => aug.canAfford() || (aug.canAffordWithDonation() && !options['disable-donations']));\\n        let desiredAugs = availableAugs.filter(aug => aug.desired);\\n        if (augsWithRep.length > desiredAugs.length) {\\n            augsWithRep = await manageFilteredSubset(ns, outputRows, 'Within Rep', augsWithRep)\\n            desiredAugs = await manageFilteredSubset(ns, outputRows, 'Desired', desiredAugs);\\n        } else {\\n            desiredAugs = await manageFilteredSubset(ns, outputRows, 'Desired', desiredAugs);\\n            augsWithRep = await manageFilteredSubset(ns, outputRows, 'Within Rep', augsWithRep);\\n        }\\n        let accessibleAugs = await manageFilteredSubset(ns, outputRows, 'Desired Within Rep', augsWithRep.filter(aug => aug.desired));\\n        await managePurchaseableAugs(ns, outputRows, accessibleAugs);\\n    }\\n    // Print all rows of output that were prepped. Keep as many rows in one log as possible to avoid scrolling the history too much\\n    log(ns, outputRows.join(\\\"\\\\n  \\\"), printToTerminal);\\n    if (purchaseableAugs.length > 0)\\n        log(ns, `INFO: The above ${purchaseableAugs.length} augmentations ${options.purchase ? 'will' : 'can'} be purchased ` +\\n            `${stockValue > 0 ? 'after liquidating stocks' : 'right now'}.` +\\n            (options.purchase ? '' : ' Run with the --purchase flag to make the purchase.'), printToTerminal);\\n}\\n\\n/** @param {[]} sortedAugs \\n * Helper to compute the total rep cost for augmentations, including the cost of donating for access. */\\nfunction computeCosts(sortedAugs) {\\n    const repCostByFaction = computeAugsRepReqDonationByFaction(sortedAugs);\\n    const totalRepCost = Object.values(repCostByFaction).reduce((t, r) => t + r, 0);\\n    const totalAugCost = getTotalCost(sortedAugs);\\n    return [repCostByFaction, totalRepCost, totalAugCost];\\n}\\n\\n/** Helper to produce a summary of the cost of augs with reputation. */\\nfunction getCostString(augCost, repCost) {\\n    return `${formatMoney(augCost + repCost, 4)}` + (repCost == 0 ? '' : ` (Augs: ${formatMoney(augCost, 4)} + Rep: ${formatMoney(repCost, 4)})`);\\n}\\n\\n/** Helper to remove augs that cannot be purchased because their prerequisites are not owned and have been filtered out */\\nfunction filterMissingPrereqs(ns, subset) {\\n    let subsetLength;\\n    do {\\n        subsetLength = subset.length\\n        for (const aug of subset) {\\n            const missingPreqs = aug.prereqs.filter(prereq => !(simulatedOwnedAugmentations.includes(prereq) || subset.some(a => a.name === prereq)))\\n            if (missingPreqs.length > 0) {\\n                log(ns, `INFO: Removing from aug \\\"${aug.name}\\\" (${aug.getFromAny}) due to prerequisites having been filtered out: ${missingPreqs}`)\\n                subset.splice(subset.indexOf(aug), 1);\\n            }\\n        }\\n        // If any augs were removed, we mut loop back to the start and see if that means other augs need removing\\n    } while (subsetLength !== subset.length);\\n    return subset;\\n}\\n\\n/** Helper to generate outputs for different subsets of the augmentations, each in optimal sort order\\n * @param {NS} ns \\n * @param {boolean|undefined} printList - if undefined => automatically print if sort order changed\\n *  */\\nasync function manageFilteredSubset(ns, outputRows, subsetName, subset, printList = undefined, removeMissingPrereqs = true, reorder = true) {\\n    subset = subset.slice(); // Take a copy so we don't mess up the original array sent in.\\n    // If enabled, filter out augs who are missing prerequisites\\n    if (removeMissingPrereqs)\\n        filterMissingPrereqs(ns, subset)\\n    let subsetLength = subset.length;\\n    if (subsetLength == 0) {\\n        outputRows.push(`There are 0 ${subsetName}`);\\n        return subset;\\n    }\\n    // Sort the filtered subset into its optimal purchase order\\n    let subsetSorted = reorder ? sortAugs(ns, subset.slice()) : subset;\\n    let [repCostByFaction, totalRepCost, totalAugCost] = computeCosts(subsetSorted);\\n    // By default, if the purchase order is unchanged after filtering out augmentations, don't bother reprinting the full list\\n    if (printList === true || printList !== false && options['show-all-purchase-lists'] && !subset.every((v, i) => v == subsetSorted[i]))\\n        outputRows.push(`${subset.length} ${subsetName} Augmentations in Optimized Purchase Order:\\\\n  ${subsetSorted.join('\\\\n  ')}`);\\n    outputRows.push(`Total Cost of ${subset.length} ${subsetName}:`.padEnd(37) + ` ${getCostString(totalAugCost, totalRepCost)}` +\\n        (totalRepCost == 0 ? '' : `  Donate: {${Object.keys(repCostByFaction).map(f => `\\\"${f}\\\":${formatNumberShort(repCostByFaction[f], 4)}`).join(\\\", \\\")}}`));\\n    return subsetSorted;\\n}\\n\\n/** @param {NS} ns \\n * Prepares a \\\"purchase order\\\" of augs that we can afford.\\n * Note: Stores this info in global properties `purchaseableAugs` and `purchaseFactionDonations` so that a final action in the main method will do the purchase. */\\nasync function managePurchaseableAugs(ns, outputRows, accessibleAugs) {\\n    // Refresh player data to get an accurate read of current money\\n    playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n    const budget = playerData.money + stockValue;\\n    let totalRepCost, totalAugCost, dropped, restart;\\n    // We will make every effort to keep \\\"priority\\\" augs in the purchase order, but start dropping them if we find we cannot afford them all\\n    const inaccessiblePriorityAugs = priorityAugs.filter(name => {\\n        const aug = augmentationData[name];\\n        return !aug || !accessibleAugs.includes(aug) || aug.price + getReqDonationForAug(aug) > budget;\\n    });\\n    const droppedPriorityAugs = inaccessiblePriorityAugs;\\n    do { // Outer loop is only repeated if we have to drop a priority aug and start over with our purchasable augs determination\\n        restart = false; // Flag as to whether we need to loop again with different starting set of priority augs\\n        dropped = [];\\n        purchaseableAugs = filterMissingPrereqs(ns, accessibleAugs.slice().filter(a => !droppedPriorityAugs.includes(a.name) && a.price + getReqDonationForAug(a) <= budget));\\n        [purchaseFactionDonations, totalRepCost, totalAugCost] = computeCosts(purchaseableAugs);\\n        // Remove the most expensive augmentation until we can afford all that remain\\n        while (totalAugCost + totalRepCost > budget && purchaseableAugs.length > 0) {\\n            let mostExpensiveAug = purchaseableAugs.filter(a => !priorityAugs.includes(a.name)).slice().sort((a, b) => b.price - a.price)[0];\\n            if (!mostExpensiveAug) { // If there is nothing but \\\"priority augs\\\" left, then we need the user to deprioritize one or the other\\n                const aPa = priorityAugs.filter(name => purchaseableAugs.some(a => a.name == name));\\n                const toDrop = aPa[aPa.length - 1];\\n                log(ns, `WARNING: We can afford ${aPa.length} priority augs on their own, but not together. We must drop the lowest-priority one: ${toDrop}`, true, 'warning');\\n                droppedPriorityAugs.push(toDrop);\\n                restart = true;\\n                break;\\n            }\\n            let costBefore = getCostString(totalAugCost, totalRepCost);\\n            purchaseableAugs = sortAugs(ns, purchaseableAugs.filter(aug => aug !== mostExpensiveAug));\\n            [purchaseFactionDonations, totalRepCost, totalAugCost] = computeCosts(purchaseableAugs);;\\n            let costAfter = getCostString(totalAugCost, totalRepCost);\\n            dropped.unshift({ aug: mostExpensiveAug, costBefore, costAfter });\\n            log(ns, `Dropping aug from the purchase order: \\\\\\\"${mostExpensiveAug.name}\\\\\\\". New total cost: ${costAfter}`);\\n        }\\n    } while (restart);\\n\\n    // Display unique affordable augs, but only show the full list if we aren't adding neuroflux levels below\\n    manageFilteredSubset(ns, outputRows, 'Unique Affordable', purchaseableAugs, options['neuroflux-disabled']);\\n\\n    // The the user know about some of the next upcoming augs / import augs that had to be dropped\\n    let nextUpAug = dropped.length == 0 ? null : `Next desired aug available at:`.padEnd(37) + ` ${dropped[0].costBefore}  ` +\\n        `for \\\\\\\"${dropped[0].aug.name}\\\\\\\" from \\\"${dropped[0].aug.getFromJoined()}\\\" (cheapest of ${dropped.length} dropped augs)`\\n    if (nextUpAug && options['neuroflux-disabled']) outputRows.push(nextUpAug); // Output this now if we will be exiting early, otherwise save for after the last table.\\n    if (augsAwaitingInstall > 0)\\n        outputRows.push(`WARNING: Prices all have a x ${formatNumberShort(augCountMult ** augsAwaitingInstall)} cost penalty, because ` +\\n            `${augsAwaitingInstall} Augmentations were previously purchased but are not yet installed.`);\\n    if (inaccessiblePriorityAugs.length > 0)\\n        outputRows.push(`INFO: ${inaccessiblePriorityAugs.length} 'priority' augs are not yet accessible: ${inaccessiblePriorityAugs.map(n => `\\\"${n}\\\"`).join(\\\", \\\")}`);\\n    const additionalDroppedPri = droppedPriorityAugs.filter(n => !inaccessiblePriorityAugs.includes(n));\\n    if (additionalDroppedPri.length > 0)\\n        outputRows.push(`INFO: ${additionalDroppedPri.length} 'priority' augs had to be droped: ${additionalDroppedPri.map(n => `\\\"${n}\\\"`).join(\\\", \\\")}`);\\n\\n    // NEXT STEP: Add as many NeuroFlux levels to our purchase as we can (unless disabled)\\n    if (options['neuroflux-disabled']) return;\\n    const augNf = augmentationData[strNF];\\n    let nfLevel = Math.round(Math.log(augNf.price / (augCountMult ** augsAwaitingInstall) / 750000) / Math.log(1.14));\\n    // Prefer to purchase NF first from whatever **joined** factions can currently afford the next NF level, next from factions with donations unlocked\\n    //   (allow us to continuously donate for more), finally by faction with the most current reputation.\\n    augNf.getFromJoined = function () { // NOTE: Must be a function (not a lambda) so that `this` is bound to the augmentation object.\\n        // This sort order prefers factions that already have enough reputation to buy at least one level of NF (whether they support donations or not)\\n        //return this.joinedFactionsWithAug().sort((a, b) => ((b.reputation >= this.reputation ? 1 : 0) - (a.reputation >= this.reputation ? 1 : 0)) ||\\n        //    ((b.donationsUnlocked ? 1 : 0) - (a.donationsUnlocked ? 1 : 0)) || (b.reputation - a.reputation))[0]?.name;\\n        // This sort order prefers factions that support donations over ones that already have sufficient rep for one or more NF levels.\\n        return this.joinedFactionsWithAug().sort((a, b) =>\\n            ((b.donationsUnlocked ? 1 : 0) - (a.donationsUnlocked ? 1 : 0)) || (b.reputation - a.reputation))[0]?.name;\\n    };\\n    let getFrom = augNf.getFromJoined();\\n    // If No currently joined factions can provide us with the next level of Neuroflux, look for the best joined **or unjoined** faction to get NF from.\\n    if (!augNf.canAfford() && !augNf.canAffordWithDonation()) {\\n        outputRows.push(`Cannot purchase any ${strNF} because the next level requires ${formatNumberShort(augNf.reputation)} reputation, but ` +\\n            (!getFrom ? `it isn't being offered by any of our factions` : `the best faction (${getFrom}) has insufficient rep (${formatNumberShort(factionData[getFrom].reputation)}).`));\\n        // Prefer factions that support donating for reputation, otherwise grinding rep takes a long time.\\n        const factionSort = (a, b) => ((b.donationsUnlocked ? 1 : 0) - (a.donationsUnlocked ? 1 : 0)) || (b.favor - a.favor);\\n        const factionsWithAug = Object.values(factionData).filter(f => f.augmentations.includes(augNf.name)).sort(factionSort);\\n        const factionsWithAugAndInvite = factionsWithAug.filter(f => f.invited || f.joined).sort(factionSort);\\n        const factionWithMostFavor = factionsWithAugAndInvite[0] ?? factionsWithAug[0];\\n        let joined = 0;\\n        if (getFrom != factionsWithAug[0].name && factionsWithAug[0] != factionsWithAugAndInvite[0])\\n            outputRows.push(`SUGGESTION: Earn an invitation to faction ${factionsWithAug[0].name} to make it easier to get rep for ${strNF} since it has the most favor (${factionsWithAug[0].favor}).`);\\n        else if (factionsWithAug[0].joined && !factionsWithAug[0].donationsUnlocked)\\n            outputRows.push(`SUGGESTION: Do some work for faction ${factionsWithAug[0].name} to quickly earn rep for ${strNF} since it has the most favor (${factionsWithAug[0].favor}).`);\\n        else if (!getFrom || (factionData[getFrom].favor < factionWithMostFavor.favor && factionWithMostFavor.invited)) {\\n            outputRows.push(`Attempting to join faction ${factionWithMostFavor.name} to make it easier to earn rep for ${strNF} since it has the most favor (${factionWithMostFavor.favor}).`);\\n            joined = await joinFactions(ns, [factionWithMostFavor.name]);\\n            if (!joinedFactions.includes(factionWithMostFavor.name)) {\\n                const invitedFactionsWithDonation = factionsWithAugAndInvite.filter(f => f.donationsUnlocked).map(f => f.name);\\n                if (invitedFactionsWithDonation.length > 0) {\\n                    outputRows.push(`Failed to join ${factionWithMostFavor.name}. Attempting to join any factions with whom we have enough favour to donate: ${invitedFactionsWithDonation.join(\\\", \\\")}.`);\\n                    joined = await joinFactions(ns, invitedFactionsWithDonation);\\n                } else\\n                    outputRows.push(`Failed to join ${factionWithMostFavor.name}. NeuroFlux will not be accessible.`);\\n            }\\n            // If after the above potential attempt to join a faction offering NF we still can't afford it, we're done here\\n            getFrom = augNf.getFromJoined();\\n            if (!getFrom) return log(ns, \\\"Cannot buy any NF due to no joined or joinable factions offering it.\\\");\\n        }\\n        if (!augNf.canAfford() && !augNf.canAffordWithDonation())\\n            log(ns, `Cannot buy any NF due to best provider faction ${getFrom} having insufficient rep, and donations are not unlocked.`);\\n        else if (joined)\\n            outputRows.push(`SUCCESS: Joined ${joined} factions just to gain access to additional NeuroFlux levels.`);\\n    }\\n    if (getFrom && !factionData[getFrom].donationsUnlocked) {\\n        // TODO: If the faction with the most reputation does not suport dontating for additional rep, and another faction with less rep does,\\n        //       we should be able to test both and see which one would let us buy the most additional levels of NF given our current money.\\n        if (factionData[getFrom].favor >= favorToDonate)\\n            outputRows.push(`WARNING: The current faction (${getFrom}) with the most rep for buying NeuroFlux levels does not support donating for reputation. ` +\\n                `Until logic is built to handle this, consider joining one or more factions that support donating for reputation.`);\\n    }\\n    // Temporarily remove free (money) augmentations from the purchase order, they can be added on after NF purchases.\\n    const cheapAugs = purchaseableAugs.filter(a => a.price == 0);\\n    purchaseableAugs = purchaseableAugs.filter(a => a.price > 0);\\n    const augsCheaperThanNF = purchaseableAugs.filter(a => a.price < augNf.price).length;\\n    // Start adding as many neuroflux levels as we can afford\\n    let nfPurchased = purchaseableAugs.filter(a => a.name === augNf.name).length;\\n    const augNfFaction = factionData[augNf.getFromJoined()];\\n    if (augNfFaction && (augNf.canAfford() || augNf.canAffordWithDonation()))\\n        log(ns, `Getting NF from faction ${augNfFaction.name} (rep: ${formatNumberShort(augNfFaction.reputation)}). Cost of NF 1 is ` +\\n            `${formatMoney(augNf.price)}, requires reputation: ${formatNumberShort(augNf.reputation)} ` +\\n            `(have ${formatNumberShort(augNfFaction.reputation)}, donate ${formatNumberShort(getReqDonationForRep(augNf.reputation, augNfFaction))})`);\\n    let nextUpNf; // Will tell the user when they will unlock the next NF level\\n    while (augNfFaction && nfPurchased < 200) { // Limit to 200 to avoid breaking the game if near infinite money.\\n        const nextNfCost = augNf.price * (nfCountMult ** nfPurchased) * (augCountMult ** purchaseableAugs.length);\\n        const nextNfRep = augNf.reputation * (nfCountMult ** nfPurchased);\\n        const currentNfFactionDonation = purchaseFactionDonations[augNfFaction.name] || 0;\\n        const nextNfTotalRepDonation = (nextNfRep <= augNfFaction.reputation) ? 0 : getReqDonationForRep(nextNfRep, augNfFaction);\\n        const nextNfRepCost = Math.max(0, nextNfTotalRepDonation - currentNfFactionDonation); // Compute the incremental cost of donating for rep\\n        const totalCostWithNextNf = totalAugCost + nextNfCost + totalRepCost + nextNfRepCost;\\n        log(ns, `NF ${String(nfPurchased + 1).padStart(2)} Requires ${formatNumberShort(nextNfRep, 4)} Reputation, ` +\\n            `Costs ${getCostString(nextNfCost, nextNfRepCost)} for a ` +\\n            `Total of ${getCostString(totalAugCost + nextNfCost, totalRepCost + nextNfRepCost)}`);\\n        if (totalCostWithNextNf > budget || nextNfRep > augNfFaction.reputation && !augNfFaction.donationsUnlocked) {\\n            nextUpNf = `Next NF (${nfPurchased + 1}) will be available at:`.padEnd(37) +\\n                ` ${getCostString(totalAugCost + nextNfCost, totalRepCost + nextNfRepCost)}  Money (` +\\n                `${(totalCostWithNextNf > budget ? '✗' : '✓')}) and ${formatNumberShort(nextNfRep)} Reputation with \\\"${augNfFaction.name}\\\" (` +\\n                (nextNfRep > augNfFaction.reputation && !augNfFaction.donationsUnlocked ? '✗' : '✓') +\\n                ` have ${formatNumberShort(augNfFaction.reputation)}` + (nextNfRep <= augNfFaction.reputation ? '' :\\n                    augNfFaction.donationsUnlocked ? ', can donate' : ', donations unavailable') + `)`;\\n            break; // If we cannot afford the next NF, break\\n        }\\n        // Otherwise, add the next NF to our purchase order, and see if we can afford any more.\\n        // TODO: Clone nf first, and possible buy from different factions as we move from ones with enough rep to ones that support donation\\n        const nfClone = { ...augNf };\\n        nfClone.displayName += ` Level ${++nfLevel}`\\n        nfClone.price = augNf.price * (nfCountMult ** nfPurchased); // Note this should be the base price, before scaling for number of augs purchased\\n        nfClone.reputation = nextNfRep;\\n        // Note, insert all NF purchases after the current NF purchase, in front of all augs cheaper than the first NF\\n        purchaseableAugs.splice(purchaseableAugs.length - augsCheaperThanNF, 0, nfClone);\\n        totalAugCost += nextNfCost;\\n        const newDonationForRep = Math.max(currentNfFactionDonation, nextNfTotalRepDonation);\\n        if (newDonationForRep > 0) purchaseFactionDonations[augNfFaction.name] = newDonationForRep;\\n        totalRepCost = Object.values(purchaseFactionDonations).reduce((t, r) => t + r, 0);\\n        nfPurchased++;\\n    }\\n    log(ns, `With ${formatMoney(budget)}, can afford to purchase ${nfPurchased} levels of ${strNF}. New total cost: ${getCostString(totalAugCost, totalRepCost)}`);\\n    // Add back free augmentations removed temporarily before inserting additional NF purchases\\n    purchaseableAugs.push(...cheapAugs);\\n    manageFilteredSubset(ns, outputRows, `(${purchaseableAugs.length - nfPurchased} Augs + ${nfPurchased} NF)`, purchaseableAugs, true, false, false);\\n    if (nextUpAug) outputRows.push(nextUpAug);\\n    if (nextUpNf) outputRows.push(nextUpNf);\\n};\\n\\n/** @param {NS} ns \\n * Find out the optimal set of factions and rep-donations required to access them */\\nfunction computeAugsRepReqDonationByFaction(augmentations) {\\n    const repCostByFaction = {};\\n    for (const aug of augmentations) {\\n        let faction = factionData[aug.getFromJoined() || aug.getFromAny];\\n        if (!faction.donationsUnlocked) continue; // getFromJoined() already ensures that we don't resort to faction requiring donations unless we must (and can)\\n        let reqDonation = getReqDonationForAug(aug, faction);\\n        // See if any other faction we're already planning to donate to offers the same augmentation, so we can avoid donating to multiple factions\\n        // Use the alternative faction if we're already planning on donating this much to them, or if they're closer to the donation requirement than this faction currently is\\n        let fDonationsIndex = Object.keys(repCostByFaction).findIndex(f => f == faction.name);\\n        let alternativeFaction = Object.keys(repCostByFaction).find((f, i) => f != faction.name && factionData[f].augmentations.includes(aug.name) && (\\n            (repCostByFaction[f] >= reqDonation && (fDonationsIndex == -1 || i < fDonationsIndex)) || // We're donating the same or more to the other faction, and were planning on donating to it before this one\\n            ((getReqDonationForAug(aug, f) - repCostByFaction[f]) < (reqDonation - (repCostByFaction[faction.name] || 0))))); // The amount we've committed to donating the other faction is closer to this requirement\\n        if (alternativeFaction) {\\n            log(_ns, `INFO: Using alternative faction \\\"${alternativeFaction}\\\" for \\\"${aug.name}\\\" rather than earlier faction \\\"${faction.name}\\\"`)\\n            aug.getFromJoined = () => alternativeFaction;\\n            reqDonation = getReqDonationForAug(aug, alternativeFaction);\\n            faction = factionData[alternativeFaction];\\n        }\\n        if (reqDonation > 0)\\n            repCostByFaction[faction.name] = Math.max(repCostByFaction[faction.name] || 0, reqDonation);\\n    }\\n    return repCostByFaction;\\n}\\n\\n/** @param {NS} ns \\n * Donate any required rep and purchase the desired augmentations */\\nasync function purchaseDesiredAugs(ns) {\\n    let totalRepCost = Object.values(purchaseFactionDonations).reduce((t, r) => t + r, 0);\\n    let totalAugCost = getTotalCost(purchaseableAugs);\\n    // Refresh player data to get an accurate read of current money\\n    playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n    if (stockValue > 0)\\n        return log(ns, `ERROR: For your own protection, --purchase will not run while you are holding stocks (current stock value: ${formatMoney(stockValue)}). ` +\\n            `Liquidate your shares before running (run stockmaster.js --liquidate) or run this script with --ignore-stocks to override this.`, printToTerminal, 'error')\\n    if (totalAugCost + totalRepCost > playerData.money && totalAugCost + totalRepCost > playerData.money * 1.1) // If we're way off affording this, something is probably wrong\\n        return log(ns, `ERROR: Purchase order total cost (${getCostString(totalAugCost, totalRepCost)})` +\\n            ` is far more than current player money (${formatMoney(playerData.money)}). Your money may have recently changed (It was ${formatMoney(startingPlayerMoney)} at startup), ` +\\n            `or there may be a bug in purchasing logic.`, printToTerminal, 'error');\\n    if (totalAugCost + totalRepCost > playerData.money) // If we're just a little off affording this, it could be because a bit of money was just spent? Just warn and buy what we can\\n        log(ns, `WARNING: Purchase order total cost (${getCostString(totalAugCost, totalRepCost)})` +\\n            ` is a bit more than current player money (${formatMoney(playerData.money)}). Did something else spend some money? ` +\\n            `(We had ${formatMoney(startingPlayerMoney)} at startup). Will proceed with buying most of the purchase order.`, printToTerminal, 'warning');\\n    // Donate to factions if necessary (using a ram-dodging script of course)\\n    if (Object.keys(purchaseFactionDonations).length > 0 && Object.values(purchaseFactionDonations).some(v => v > 0)) {\\n        if (await getNsDataThroughFile(ns, 'JSON.parse(ns.args[0]).reduce((success, o) => success && ns.singularity.donateToFaction(o.faction, o.repDonation), true)',\\n            '/Temp/facman-donate.txt', [JSON.stringify(Object.keys(purchaseFactionDonations).map(f => ({ faction: f, repDonation: purchaseFactionDonations[f] })))]))\\n            log(ns, `SUCCESS: Donated to ${Object.keys(purchaseFactionDonations).length} factions to gain access to desired augmentations.`, printToTerminal, 'success')\\n        else\\n            log(ns, `ERROR: One or more attempts to donate to factions for reputation failed. Go investigate!`, printToTerminal, 'error');\\n    }\\n    // Purchase desired augs (using a ram-dodging script of course)\\n    if (purchaseableAugs.length == 0)\\n        return log(ns, `INFO: Cannot afford to buy any augmentations at this time.`, printToTerminal)\\n    const purchased = await getNsDataThroughFile(ns, 'JSON.parse(ns.args[0]).reduce((total, o) => total + (ns.singularity.purchaseAugmentation(o.faction, o.augmentation) ? 1 : 0), 0)',\\n        '/Temp/facman-purchase-augs.txt', [JSON.stringify(purchaseableAugs.map(aug => ({ faction: aug.getFromJoined(), augmentation: aug.name })))]);\\n    if (purchased == purchaseableAugs.length)\\n        log(ns, `SUCCESS: Purchased ${purchased} desired augmentations in optimal order!`, printToTerminal, 'success')\\n    else\\n        log(ns, `ERROR: We were only able to purchase ${purchased} of our ${purchaseableAugs.length} augmentations. ` +\\n            `Expected cost was ${getCostString(totalAugCost, totalRepCost)}. Player money was ${formatMoney(playerData.money)} right before purchase, ` +\\n            `is now ${formatMoney(await getNsDataThroughFile(ns, 'ns.getPlayer().money'))}`, printToTerminal, 'error');\\n}\\n\\n/** @param {NS} ns **/\\nfunction displayJoinedFactionSummary(ns) {\\n    let joinedFactions = Object.values(factionData).filter(f => f.joined);\\n    let summary = `${joinedFactions.length} Joined Factions:`\\n    let noaugs = joinedFactions.filter(f => f.unownedAugmentations().length == 0)\\n    if (noaugs.length > 0)\\n        summary += `\\\\n  ${noaugs.length} joined factions have no unowned augs remaining: \\\"${noaugs.map(f => f.name).join('\\\", \\\"')}\\\"`;\\n    for (const faction of joinedFactions.filter(f => !noaugs.includes(f)))\\n        summary += `\\\\n  ${faction.name}: ${faction.unownedAugmentations().length} augs remaining (${faction.unownedAugmentations().join(\\\", \\\")})`;\\n    log(ns, summary, printToTerminal);\\n}\\n\\n/** @param {NS} ns **/\\nfunction displayFactionSummary(ns, sortBy, unique, overrideFinishedFactions, excludedStats) {\\n    let noAugs = Object.values(factionData).filter(f => f.unownedAugmentations().length == 0);\\n    let summary = \\\"\\\";\\n    if (noAugs.length > 0)\\n        summary += `${noAugs.length} factions have no augmentations to purchase (excluding NF): ${JSON.stringify(noAugs.map(a => a.name))}\\\\n`;\\n    let summaryFactions = Object.values(factionData).filter(f => f.unownedAugmentations().length > 0 && !overrideFinishedFactions.includes(f.name));\\n    if (summaryFactions.length == 0) return;\\n    // Apply any override faction options\\n    joinedFactions.push(...overrideFinishedFactions.filter(f => !joinedFactions.includes(f)));\\n    for (const faction of overrideFinishedFactions)\\n        simulatedOwnedAugmentations.push(...factionData[faction]?.unownedAugmentations() || []);\\n    // Grab disctinct augmentations stats \\n    const relevantAugStats = allAugStats.filter(s => !excludedStats.find(excl => s.includes(excl)) &&\\n        undefined !== summaryFactions.find(f => f.unownedAugmentations().find(aug => 1 != (augmentationData[aug].stats[s] || 1))));\\n    summary += `${summaryFactions.length} factions with augmentations (✓=Joined ✉=Invited ✗=Locked, sorted by total ${sortBy}):`;\\n    // Creates the table header row\\n    let getHeaderRow = countName => `\\\\n   Faction Name ${countName.padStart(9)} / Total Augs ` + relevantAugStats.map(key => shorten(key).padStart(4)).join(' ');\\n    // Creates the string to display a single faction's stats in the table\\n    let getFactionSummary = faction => {\\n        const totalMults = faction.totalUnownedMults();\\n        return `\\\\n ${faction.joined ? '✓' : faction.invited ? '✉' : '✗'} ${faction.name} `.padEnd(32) +\\n            `${String(faction.unownedAugmentations().length).padStart(2)} / ${String(faction.augmentations.length).padEnd(2)} ` +\\n            relevantAugStats.map(key => (totalMults[key] === undefined ? '-' : totalMults[key].toPrecision(3)).padStart(Math.max(shorten(key).length, 4))).join(' ');\\n    };\\n    // Helper to sort the factions in order of most-contributing to the desired multiplier\\n    let sortFunction = (a, b) => {\\n        let aMultiContrib = a.totalUnownedMults()[sortBy] || 1, bMultiContrib = b.totalUnownedMults()[sortBy] || 1;\\n        let sort1 = bMultiContrib - aMultiContrib; // Sort by the total amount of desired multi provided by this faction\\n        let sort2 = (a.joined ? 0 : 1) - (b.joined ? 0 : 1); // If tied, sort by which faction we've joined\\n        if (unique && bMultiContrib > 1 && aMultiContrib > 1 && sort2 != 0) return sort2; // When in \\\"unique\\\" mode it's important to first list contributing factions we've already joined\\n        if (sort1 != 0) return sort1;\\n        if (sort2 != 0) return sort2;\\n        let sort3 = b.reputation - a.reputation; // If tied, sort by which faction we have the most rep with\\n        if (sort3 != 0) return sort3;\\n        let sort4 = a.mostExpensiveAugCost().length - b.mostExpensiveAugCost().length; // If tied, \\\"soonest to unlock\\\", estimated by their most expensive aug cost\\n        if (sort4 != 0) return sort4;\\n        return (a.name).localeCompare(b.name) // If still tied, sort by naeme\\n    };\\n    // Helper to insert a table separator between factions that do and don't contribute to the specified stat\\n    let moreContributors = true;\\n    let getSeparator = faction => (moreContributors && !(moreContributors = faction.totalUnownedMults()[sortBy] !== undefined)) ?\\n        `\\\\n---------------------------  (Factions below offer no augs that contribute to '${sortBy}')` : '';\\n    summary += getHeaderRow(unique ? 'New' : 'Unowned');\\n    const unownedAugCount = Object.values(augmentationData).length - simulatedOwnedAugmentations.length;\\n    if (!unique) // Each faction is summarized based on all the unowned augs it has, regardless of whether a faction higher up the list has the same augs\\n        for (const faction of summaryFactions.sort(sortFunction))\\n            summary += getSeparator(faction) + getFactionSummary(faction);\\n    else { // Each faction's stats computed as though the faction sorted above it was joined and bought out first, so only showing new augs\\n        const actualOwnedAugs = simulatedOwnedAugmentations;\\n        const actualUnjoinedFactions = summaryFactions;\\n        do {\\n            summaryFactions.sort(sortFunction);\\n            const faction = summaryFactions.shift();\\n            summary += getSeparator(faction) + getFactionSummary(faction);\\n            joinedFactions.push(faction.name);  // Simulate that we've now joined and bought out all this factions augs\\n            simulatedOwnedAugmentations.push(...faction.unownedAugmentations())\\n        } while (summaryFactions.length > 0)\\n        simulatedOwnedAugmentations = actualOwnedAugs; // Restore the original lists once the simulation is complete\\n        summaryFactions = actualUnjoinedFactions;\\n    }\\n    log(ns, `INFO: The following is a summary of ${unownedAugCount} remaining augmentations available from each faction:\\\\n` + summary, printToTerminal);\\n}\\n\",\"filename\":\"faction-manager.js\",\"server\":\"home\"}}],[\"farm-intelligence.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log, waitForProcessToComplete, formatDuration, getFilePath } from './helpers.js'\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const timeSinceLastAug = Date.now() - ns.getResetInfo().lastAugReset;\\n    if (timeSinceLastAug > 20 * 60 * 1000) {\\n        return log(ns, `WARNING: It's been ${formatDuration(timeSinceLastAug)} since your last reset. ` +\\n            `For your protection, we will not soft-reset. Either install augs or soft-reset manually ` +\\n            `once before running this script.`, true);\\n    } else if (timeSinceLastAug > 5000) {\\n        log(ns, `Resetting to get a list of instantly-available invites...`, true);\\n        return ns.singularity.softReset(ns.getScriptName());\\n    }\\n    const invites = ns.singularity.checkFactionInvitations();\\n    if (invites.length < 10)\\n        return log(ns, `WARNING: You only have invites to join ${invites.length} factions. ` +\\n            `For best results, you should get invited to all 10 megacorp factions before running this script. ` +\\n            `You can achieve this by running:\\\\n` +\\n            `run work-for-factions.js --get-invited-to-every-faction --invites-only \\\\n` +\\n            `or just edit out this check if you're sure you want to proceed.`, true);\\n    await waitForProcessToComplete(ns, ns.run(getFilePath('cleanup.js')));\\n    // Prepare a very small script that will accept all invites in a tight loop.\\n    const tempFile = '/Temp/farm-intelligence.js';\\n    await ns.write(tempFile, `export async function main(ns) {\\n        ns.disableLog('ALL');\\n        ${JSON.stringify(ns.singularity.checkFactionInvitations())}.forEach(f => ns.singularity.joinFaction(f));\\n        ns.singularity.softReset('${tempFile}');\\n    }`, \\\"w\\\");\\n    ns.run(tempFile);\\n    log(ns, `SUCCESS: Beginning soft-reset loop. It may look like nothing's happening, but watch your intelligence stat...`, true, 'success');\\n}\",\"filename\":\"farm-intelligence.js\",\"server\":\"home\"}}],[\"gangs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    log, getConfiguration, instanceCount, getNsDataThroughFile, getActiveSourceFiles, runCommand, tryGetBitNodeMultipliers,\\n    formatMoney, formatNumberShort, formatDuration\\n} from './helpers.js'\\n\\n// Global config\\nconst updateInterval = 200; // We can improve our timing by updating more often than gang stats do (which is every 2 seconds for stats, every 20 seconds for territory)\\nconst wantedPenaltyThreshold = 0.0001; // Don't let the wanted penalty get worse than this\\nconst offStatCostPenalty = 50; // Equipment that doesn't contribute to our main stats suffers a percieved cost penalty of this multiple\\nconst defaultMaxSpendPerTickTransientEquipment = 0.002; // If the --equipment-budget is not specified, spend up to this percent of non-reserved cash on temporary upgrades (equipment)\\nconst defaultMaxSpendPerTickPermanentEquipment = 0.2; // If the --augmentation-budget is not specified, spend up to this percent of non-reserved cash on permanent member upgrades\\n\\n// Territory-related variables\\nconst gangsByPower = [\\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Tetrads\\\", \\\"Slum Snakes\\\", /* Hack gangs don't scale as far */ \\\"The Black Hand\\\", /* \\\"NiteSec\\\" Been there, not fun. */]\\nconst territoryEngageThreshold = 0.60; // Minimum average win chance (of gangs with territory) before we engage other clans\\nlet territoryTickDetected = false;\\nlet territoryTickTime = 20000; // Est. milliseconds until territory *ticks*. Can vary if processing offline time\\nlet territoryTickWaitPadding = 200; // Start waiting this many milliseconds before we think territory will tick, in case it ticks early (increases automatically after misfires)\\nlet consecutiveTerritoryDetections = 0; // Used to reduce padding if things get back on track.\\nlet territoryNextTick = null; // The next time territory will tick\\nlet isReadyForNextTerritoryTick = false;\\nlet warfareFinished = false;\\nlet lastTerritoryPower = 0;\\nlet lastOtherGangInfo = null;\\nlet lastLoopTime = null;\\n\\n// Crime activity-related variables\\nconst crimes = [\\\"Mug People\\\", \\\"Deal Drugs\\\", \\\"Strongarm Civilians\\\", \\\"Run a Con\\\", \\\"Armed Robbery\\\", \\\"Traffick Illegal Arms\\\", \\\"Threaten & Blackmail\\\", \\\"Human Trafficking\\\", \\\"Terrorism\\\",\\n    \\\"Ransomware\\\", \\\"Phishing\\\", \\\"Identity Theft\\\", \\\"DDoS Attacks\\\", \\\"Plant Virus\\\", \\\"Fraud & Counterfeiting\\\", \\\"Money Laundering\\\", \\\"Cyberterrorism\\\"];\\nlet pctTraining = 0.20;\\nlet multGangSoftcap;\\nlet allTaskNames;\\nlet allTaskStats;\\nlet assignedTasks = {}; // Each member will independently attempt to scale up the crime they perform until they are ineffective or we start generating wanted levels\\nlet lastMemberReset = {}; // Tracks when each member last ascended\\n\\n// Global state\\nlet resetInfo = (/**@returns{ResetInfo}*/() => undefined)(); // Information about the current bitnode\\nlet ownedSourceFiles;\\nlet myGangFaction = \\\"\\\";\\nlet isHackGang = false;\\nlet strWantedReduction;\\nlet requiredRep = 0;\\nlet myGangMembers = [];\\nlet equipments = [];\\nlet importantStats = [];\\n\\nlet options;\\nconst argsSchema = [\\n    ['training-percentage', 0.05], // Spend this percent of time randomly training gang members versus doing crime\\n    ['no-training', false], // Don't train unless all other tasks generate no gains or the member ascended recently (--min-training-ticks)\\n    ['no-auto-ascending', false], // Don't ascend members\\n    ['ascend-multi-threshold', 1.05], // Ascend member #12 if a primary stat multi would increase by more than this amount\\n    ['ascend-multi-threshold-spacing', 0.05], // Members will space their acention multis by this amount to ensure they are ascending at different rates \\n    // Note: given the above two defaults, members would ascend at multis [1.6, 1.55, 1.50, ..., 1.1, 1.05] once you have 12 members.\\n    ['min-training-ticks', 10], // Require this many ticks of training after ascending or recruiting to rebuild stats\\n    ['reserve', null], // Reserve this much cash before determining spending budgets (defaults to contents of reserve.txt if not specified)\\n    ['augmentations-budget', null], // Percentage of non-reserved cash to spend per tick on permanent member upgrades (If not specified, uses defaultMaxSpendPerTickPermanentEquipment)\\n    ['equipment-budget', null], // Percentage of non-reserved cash to spend per tick on permanent member upgrades (If not specified, uses defaultMaxSpendPerTickTransientEquipment)\\n    ['money-focus', false], // Always optimize gang crimes for maximum monetary gain. Is otherwise balanced.\\n    ['reputation-focus', false], // Always optimize gang crimes for maximum reputation gain. Is otherwise balanced.\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions || await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n    ownedSourceFiles = await getActiveSourceFiles(ns);\\n    const sf2Level = ownedSourceFiles[2] || 0;\\n    if (sf2Level == 0)\\n        return log(ns, \\\"ERROR: You have no yet unlocked gangs. Script should not be run...\\\");\\n\\n    await initialize(ns);\\n    log(ns, \\\"Starting main loop...\\\");\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) {\\n            log(ns, `WARNING: gangs.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        await ns.sleep(updateInterval);\\n    }\\n}\\n\\n/** @param {NS} ns \\n * One-time setup actions. **/\\nasync function initialize(ns) {\\n    ns.disableLog('ALL');\\n    pctTraining = options['no-training'] ? 0 : options['training-percentage'];\\n\\n    let loggedWaiting = false;\\n    resetInfo = await getNsDataThroughFile(ns, 'ns.getResetInfo()');\\n    const bitNode = resetInfo.currentNode;\\n    let haveJoinedAGang = false;\\n    while (!haveJoinedAGang) {\\n        try {\\n            haveJoinedAGang = await getNsDataThroughFile(ns, 'ns.gang.inGang()');\\n            if (haveJoinedAGang) break;\\n            if (!loggedWaiting) {\\n                log(ns, `Waiting to be in a gang. Will create the highest faction gang as soon as it is available...`);\\n                loggedWaiting = true;\\n            }\\n            if (bitNode == 2 || ns.heart.break() <= -54000)\\n                await runCommand(ns, `ns.args.forEach(g => ns.gang.createGang(g))`, '/Temp/gang-createGang.js', gangsByPower);\\n        }\\n        catch (err) {\\n            log(ns, `WARNING: gangs.js Caught (and suppressed) an unexpected error while waiting to join a gang:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        await ns.sleep(1000);\\n    }\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n    log(ns, \\\"Collecting gang information...\\\");\\n    const myGangInfo = await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()');\\n    myGangFaction = myGangInfo.faction;\\n    if (loggedWaiting)\\n        log(ns, `SUCCESS: Created gang ${myGangFaction} (At ${formatDuration(Date.now() - resetInfo.lastNodeReset)} into BitNode)`, true, 'success');\\n    isHackGang = myGangInfo.isHacking;\\n    strWantedReduction = isHackGang ? \\\"Ethical Hacking\\\" : \\\"Vigilante Justice\\\";\\n    importantStats = isHackGang ? [\\\"hack\\\"] : [\\\"str\\\", \\\"def\\\", \\\"dex\\\", \\\"agi\\\"];\\n    territoryNextTick = lastTerritoryPower = lastOtherGangInfo = null;\\n    territoryTickDetected = isReadyForNextTerritoryTick = warfareFinished = false;\\n    territoryTickWaitPadding = updateInterval;\\n\\n    // If possible, determine how much rep we would need to get the most expensive unowned augmentation\\n    const sf4Level = ownedSourceFiles[4] || 0;\\n    requiredRep = 2.5e6;\\n    if (sf4Level == 0)\\n        log(ns, `INFO: SF4 required to get gang augmentation info. Defaulting to assuming ~2.5 million rep is desired.`);\\n    else {\\n        try {\\n            if (sf4Level < 3)\\n                log(ns, `WARNING: This script makes use of singularity functions, which are quite expensive before you have SF4.3. ` +\\n                    `Unless you have a lot of free RAM for temporary scripts, you may get runtime errors.`);\\n            const augmentationNames = await getNsDataThroughFile(ns, `ns.singularity.getAugmentationsFromFaction(ns.args[0])`, null, [myGangFaction]);\\n            const ownedAugmentations = await getNsDataThroughFile(ns, `ns.singularity.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n            const dictAugRepReqs = await getDict(ns, augmentationNames, 'singularity.getAugmentationRepReq', '/Temp/aug-repreqs.txt');\\n            // Due to a bug, gangs appear to provide \\\"The Red Pill\\\" even when it's unavailable (outside of BN2), so ignore this one.\\n            requiredRep = augmentationNames.filter(aug => !ownedAugmentations.includes(aug) && aug != \\\"The Red Pill\\\").reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1);\\n            log(ns, `Highest augmentation reputation cost is ${formatNumberShort(requiredRep)}`);\\n        } catch {\\n            log(ns, `WARNING: Failed to get augmentation info despite having SF4.${sf4Level}. This may be due to you having insufficient RAM to launch the temporary scripts. ` +\\n                `Proceeding with the default assumption that ~2.5 million rep is desired.`);\\n        }\\n    }\\n\\n    // Initialize equipment information\\n    const equipmentNames = await getNsDataThroughFile(ns, 'ns.gang.getEquipmentNames()');\\n    const dictEquipmentTypes = await getGangInfoDict(ns, equipmentNames, 'getEquipmentType');\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipmentNames, 'getEquipmentCost');\\n    const dictEquipmentStats = await getGangInfoDict(ns, equipmentNames, 'getEquipmentStats');\\n    equipments = equipmentNames.map((equipmentName) => ({\\n        name: equipmentName,\\n        type: dictEquipmentTypes[equipmentName],\\n        cost: dictEquipmentCosts[equipmentName],\\n        stats: dictEquipmentStats[equipmentName],\\n    })).sort((a, b) => a.cost - b.cost);\\n    //log(ns, JSON.stringify(equipments));\\n    // Initialize information about gang members and crimes\\n    allTaskNames = await getNsDataThroughFile(ns, 'ns.gang.getTaskNames()')\\n    allTaskStats = await getGangInfoDict(ns, allTaskNames, 'getTaskStats');\\n    multGangSoftcap = (await tryGetBitNodeMultipliers(ns))?.GangSoftcap || 1;\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()');\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    for (const member of Object.values(dictMembers)) // Initialize the current activity of each member\\n        assignedTasks[member.name] = (member.task && member.task !== \\\"Unassigned\\\") ? member.task : (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"));\\n    while (myGangMembers.length < 3) await doRecruitMember(ns); // We should be able to recruit our first three members immediately (for free)\\n    // Peform all updates / actions normally performed on territory tick (every 20 seconds) once before starting the main loop\\n    lastLoopTime = Date.now()\\n    await onTerritoryTick(ns, myGangInfo);\\n    lastTerritoryPower = myGangInfo.power;\\n}\\n\\n/** @param {NS} ns \\n * Executed every `interval` **/\\nasync function mainLoop(ns) {\\n    // Update gang information (specifically monitoring gang power to see when territory ticks)\\n    const myGangInfo = await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()');\\n    const thisLoopStart = Date.now();\\n    if (!territoryTickDetected) { // Detect the first territory tick by watching for other gang's territory power to update.\\n        const otherGangInfo = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n        if (lastOtherGangInfo != null && JSON.stringify(otherGangInfo) != JSON.stringify(lastOtherGangInfo)) {\\n            territoryNextTick = lastLoopTime + territoryTickTime;\\n            territoryTickDetected = true;\\n            log(ns, `INFO: Others gangs power updated (sometime in the past ${formatDuration(thisLoopStart - lastLoopTime)}. ` +\\n                `Will start waiting for next tick in: ${formatDuration(territoryNextTick - thisLoopStart - territoryTickWaitPadding)}`, false);\\n        } else if (lastOtherGangInfo == null)\\n            log(ns, `INFO: Waiting to detect territory to tick. (Waiting for other gangs' power to update.) Will check every ${formatDuration(updateInterval)}...`);\\n        lastOtherGangInfo = otherGangInfo;\\n    }\\n    // If territory is close to ticking, quick - set everyone to do \\\"territory warfare\\\"! Once we hit 100% territory, there's no need to keep swapping members to warfare\\n    if (!warfareFinished && !isReadyForNextTerritoryTick && (thisLoopStart + updateInterval + territoryTickWaitPadding >= territoryNextTick)) { // Start 1 second early to be safe\\n        isReadyForNextTerritoryTick = true;\\n        await updateMemberActivities(ns, null, \\\"Territory Warfare\\\", myGangInfo);\\n    }\\n    // Detect if territory power has been updated in the last tick (or if we have no power, assume it has ticked and we just haven't generated power yet)\\n    if ((isReadyForNextTerritoryTick && myGangInfo.power != lastTerritoryPower) || (thisLoopStart > territoryNextTick + 5000 /* Wait up to 5 additional seconds in case time was wonkey */)) {\\n        await onTerritoryTick(ns, myGangInfo); //Do most things only once per territory tick\\n        isReadyForNextTerritoryTick = false;\\n        lastTerritoryPower = myGangInfo.power;\\n    } else if (isReadyForNextTerritoryTick)\\n        log(ns, `INFO: Waiting for territory to tick. (Waiting for gang power to change from ${formatNumberShort(lastTerritoryPower)}. ETA: ${formatDuration(territoryNextTick - thisLoopStart)}`);\\n    lastLoopTime = thisLoopStart; // Due to periodic lag, we must track the last time we checked, can't assume it was `updateInterval` ago.\\n}\\n\\n/** @param {NS} ns \\n * Do some things only once per territory tick **/\\nasync function onTerritoryTick(ns, myGangInfo) {\\n    territoryNextTick = lastLoopTime + territoryTickTime / (ns.gang.getBonusTime() > 0 ? 5 : 1); // Reset the time the next tick will occur\\n    if (lastTerritoryPower != myGangInfo.power || lastTerritoryPower == null) {\\n        log(ns, `Territory power updated from ${formatNumberShort(lastTerritoryPower)} to ${formatNumberShort(myGangInfo.power)}.`)\\n        consecutiveTerritoryDetections++;\\n        if (consecutiveTerritoryDetections > 5 && territoryTickWaitPadding > updateInterval)\\n            territoryTickWaitPadding = Math.max(updateInterval, territoryTickWaitPadding - updateInterval);\\n    } else if (!warfareFinished) {\\n        log(ns, `WARNING: Power stats weren't updated, assuming we've lost track of territory tick`, false,\\n            consecutiveTerritoryDetections == 0 ? 'warning' : null); // Only pop-up a warning if this happens two territory ticks in a row (or more)\\n        consecutiveTerritoryDetections = 0;\\n        territoryTickWaitPadding = Math.min(2000, territoryTickWaitPadding + updateInterval); // Start waiting earlier to account for observed lag.\\n        territoryNextTick -= updateInterval; // Prep for the next tick a little earlier, in case we just lagged behind the tick by a bit.\\n        territoryTickDetected = false;\\n        lastOtherGangInfo = null;\\n    }\\n\\n    // Update gang members in case someone died in a clash\\n    myGangMembers = await getNsDataThroughFile(ns, 'ns.gang.getMemberNames()');\\n    const nextMemberCost = Math.pow(5, myGangMembers.length - (3 /*numFreeMembers*/ - 1));\\n    if (myGangMembers.length < 12 /* Game Max */ && myGangInfo.respect >= nextMemberCost)\\n        await doRecruitMember(ns) // Recruit new members if available\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    if (!options['no-auto-ascending']) await tryAscendMembers(ns); // Ascend members if we deem it a good time\\n    await tryUpgradeMembers(ns, dictMembers); // Upgrade members if possible\\n    await enableOrDisableWarfare(ns, myGangInfo); // Update whether we should be participating in gang warfare\\n    // There's a chance we do training instead of work for this next tick. If training, we primarily train our main stat, with a small chance to train less-important stats\\n    const task = Math.random() >= pctTraining ? null : \\\"Train \\\" + (Math.random() < 0.1 ? \\\"Charisma\\\" : Math.random() < (isHackGang ? 0.1 : 0.9) ? \\\"Combat\\\" : \\\"Hacking\\\")\\n    await updateMemberActivities(ns, dictMembers, task); // Set everyone working on the next activity\\n    if (!task) await optimizeGangCrime(ns, await waitForGameUpdate(ns, myGangInfo));  // Finally, see if we can improve rep gain rates by micro-optimizing individual member crimes\\n}\\n\\n/** @param {NS} ns \\n * Consolidated logic for telling members what to do **/\\nasync function updateMemberActivities(ns, dictMemberInfo = null, forceTask = null, myGangInfo = null) {\\n    const dictMembers = dictMemberInfo || (await getGangInfoDict(ns, myGangMembers, 'getMemberInformation'));\\n    const workOrders = [];\\n    const maxMemberDefense = Math.max(...Object.values(dictMembers).map(m => m.def));\\n    for (const member of Object.values(dictMembers)) { // Set the desired activity of each member\\n        let task = forceTask ? forceTask : assignedTasks[member.name];\\n        if (forceTask == \\\"Territory Warfare\\\" && myGangInfo.territoryClashChance > 0 && (member.def < 100 || member.def < Math.min(10000, maxMemberDefense * 0.1)))\\n            task = assignedTasks[member.name]; // Hack: Spare low-defense members from engaging in in warfare since they have a higher chance of dying\\n        if (member.task != task) workOrders.push({ name: member.name, task }); // Only bother with the API call if this isn't their current task\\n    }\\n    if (workOrders.length == 0) return;\\n    // Set the activities in bulk using a ram-dodging script\\n    if (await getNsDataThroughFile(ns, `JSON.parse(ns.args[0]).reduce((success, m) => success && ns.gang.setMemberTask(m.name, m.task), true)`,\\n        '/Temp/gang-set-member-tasks.txt', [JSON.stringify(workOrders)]))\\n        log(ns, `INFO: Assigned ${workOrders.length}/${Object.keys(dictMembers).length} gang member tasks (${workOrders.map(o => o.task).filter((v, i, self) => self.indexOf(v) === i).join(\\\", \\\")})`)\\n    else\\n        log(ns, `ERROR: Failed to set member task of one or more members: ` + JSON.stringify(workOrders), false, 'error');\\n}\\n\\n/** @param {NS} ns \\n * Logic to assign tasks that maximize rep gain rate without wanted gain getting out of control **/\\nasync function optimizeGangCrime(ns, myGangInfo) {\\n    const dictMembers = await getGangInfoDict(ns, myGangMembers, 'getMemberInformation');\\n    // Tolerate our wanted level increasing, as long as reputation increases several orders of magnitude faster and we do not currently have a penalty more than -0.01%\\n    let currentWantedPenalty = getWantedPenalty(myGangInfo) - 1;\\n    // Note, until we have ~200 respect, the best way to recover from wanted penalty is to focus on gaining respect, rather than doing vigilante work.\\n    let wantedGainTolerance = currentWantedPenalty < -1.1 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 1000) &&\\n        myGangInfo.respect > 200 ? -0.01 * myGangInfo.wantedLevel /* Recover from wanted penalty */ :\\n        currentWantedPenalty < -0.9 * wantedPenaltyThreshold && myGangInfo.wantedLevel >= (1.1 + myGangInfo.respect / 10000) ? 0 /* Sustain */ :\\n            Math.max(myGangInfo.respectGainRate / 1000, myGangInfo.wantedLevel / 10) /* Allow wanted to increase at a manageable rate */;\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n    // Find out how much reputation we need, without SF4, we estimate gang faction rep based on current gang rep\\n    let factionRep = -1;\\n    if (ownedSourceFiles[4] > 0) {\\n        try { factionRep = await getNsDataThroughFile(ns, `ns.singularity.getFactionRep(ns.args[0])`, null, [myGangFaction]); }\\n        catch { log(ns, 'INFO: Error suppressed. Falling back to estimating current gang faction rep.'); }\\n    }\\n    if (factionRep == -1) // Estimate current gang rep based on respect. Game gives 1/75 rep / respect. This is an underestimate, because it doesn't take into account spent/lost respect on ascend/recruit/death. \\n        factionRep = myGangInfo.respect / 75;\\n    const optStat = options['reputation-focus'] ? \\\"respect\\\" : options['money-focus'] ? \\\"money\\\" :\\n        // If not specified, automatically change focus based on achieved rep/money\\n        factionRep > requiredRep ? \\\"money\\\" : (playerData.money > 1E11 || myGangInfo.respect) < 9000 ? \\\"respect\\\" : \\\"both money and respect\\\";\\n    // Pre-compute how every gang member will perform at every task\\n    const memberTaskRates = Object.fromEntries(Object.values(dictMembers).map(m => [m.name, allTaskNames.map(taskName => ({\\n        name: taskName,\\n        respect: computeRepGains(myGangInfo, taskName, m),\\n        money: calculateMoneyGains(myGangInfo, taskName, m),\\n        wanted: computeWantedGains(myGangInfo, taskName, m),\\n    })).filter(task => task.wanted <= 0 || task.money > 0 || task.respect > 0)])); // Completely remove tasks that offer no gains, but would generate wanted levels\\n    // Sort tasks by best gain rate\\n    if (optStat == \\\"both money and respect\\\") {\\n        Object.values(memberTaskRates).flat().forEach(v => v[optStat] = v.money / 1000 + v.respect); // Hack to support a \\\"optimized total\\\" stat when trying to balance both money and wanted\\n        Object.values(memberTaskRates).forEach((tasks, idx) => tasks.sort((a, b) => idx % 2 == 0 ? b.respect - a.respect : b.money - a.money)); // Hack: Even members prioritize respect, odd money\\n    } else {\\n        Object.values(memberTaskRates).forEach(tasks => tasks.sort((a, b) => b[optStat] - a[optStat]));\\n    }\\n    //ns.print(memberTaskRates);\\n\\n    // Run \\\"the algorithm\\\"\\n    const start = Date.now(); // Time the algorithms\\n    let bestTaskAssignments = null, bestWanted = 0;\\n    let bestTotalGain = myGangInfo.wantedLevelGainRate > wantedGainTolerance ? 0 : // Forget our past achievements, we're gaining wanted levels too fast right now\\n        optStat == \\\"respect\\\" ? myGangInfo.respectGainRate : myGangInfo.moneyGainRate; // Must do better than the current gain rate if it's within our wanted threshold\\n    for (let shuffle = 0; shuffle < 100; shuffle++) { // We can discover more optimal results by greedy-optimizing gang members in a different order. Try a few.\\n        let proposedTasks = {}, totalWanted = 0, totalGain = 0;\\n        shuffleArray(myGangMembers.slice()).forEach((member, index) => {\\n            const taskRates = memberTaskRates[member];\\n            // \\\"Greedy\\\" optimize one member at a time, but as we near the end of the list, we can no longer expect future members to make for wanted increases\\n            const sustainableTasks = (index < myGangMembers.length - 2) ? taskRates : taskRates.filter(c => (totalWanted + c.wanted) <= wantedGainTolerance);\\n            // Find the crime with the best gain (If we can't generate value for any tasks, then we should only be training)\\n            const bestTask = taskRates[0][optStat] == 0 || (Date.now() - (lastMemberReset[member] || 0) < options['min-training-ticks'] * territoryTickTime) ?\\n                taskRates.find(t => t.name === (\\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\"))) :\\n                (totalWanted > wantedGainTolerance || sustainableTasks.length == 0) ? taskRates.find(t => t.name === strWantedReduction) : sustainableTasks[0];\\n            [proposedTasks[member], totalWanted, totalGain] = [bestTask, totalWanted + bestTask.wanted, totalGain + bestTask[optStat]];\\n        });\\n        // Following the above attempted optimization, if we're above our wanted gain threshold, downgrade the task of the greatest generators of wanted until within our limit\\n        let infiniteLoop = 9999;\\n        while (totalWanted > wantedGainTolerance && Object.values(proposedTasks).some(t => t.name !== strWantedReduction)) {\\n            const mostWanted = Object.keys(proposedTasks).reduce((t, c) => proposedTasks[c].name !== strWantedReduction && (t == null || proposedTasks[t].wanted < proposedTasks[c].wanted) ? c : t, null);\\n            const nextBestTask = memberTaskRates[mostWanted].filter(c => c.wanted < proposedTasks[mostWanted].wanted)[0] ?? memberTaskRates[mostWanted].find(t => t.name === strWantedReduction);\\n            [proposedTasks[mostWanted], totalWanted, totalGain] = [nextBestTask, totalWanted + nextBestTask.wanted - proposedTasks[mostWanted].wanted, totalGain + nextBestTask[optStat] - proposedTasks[mostWanted][optStat]];\\n            if (infiniteLoop-- <= 0) throw \\\"Infinite Loop!\\\";\\n        }\\n        //log(ns, `Optimal task assignments:. Wanted: ${totalWanted.toPrecision(3)}, Gain: ${formatNumberShort(totalGain)}`);\\n        // Save the new new task assignments only if it's the best gain result we've seen for the value we're trying to optimize, or the closest we've come to meeting our wanted tolerance\\n        if (totalWanted <= wantedGainTolerance && totalGain > bestTotalGain || totalWanted > wantedGainTolerance && totalWanted < bestWanted)\\n            [bestTaskAssignments, bestTotalGain, bestWanted] = [proposedTasks, totalGain, totalWanted];\\n    }\\n    const elapsed = Date.now() - start;\\n    // Determine whether any changes need to be made\\n    if (bestTaskAssignments != null && myGangMembers.some(m => assignedTasks[m] !== bestTaskAssignments[m].name)) {\\n        myGangMembers.forEach(m => assignedTasks[m] = bestTaskAssignments[m].name); // Update work orders for all members\\n        const oldGangInfo = myGangInfo;\\n        await updateMemberActivities(ns, dictMembers);\\n        const [optWanted, optRespect, optMoney] = myGangMembers.map(m => assignedTasks[m]).reduce(([w, r, m], t) => [w + t.wanted, r + t.respect, m + t.money], [0, 0, 0]);\\n        if (optWanted != oldGangInfo.wantedLevelGainRate || optRespect != oldGangInfo.respectGainRate || optMoney != oldGangInfo.moneyGainRate)\\n            myGangInfo = await waitForGameUpdate(ns, oldGangInfo);\\n        log(ns, `SUCCESS: Optimized gang member crimes for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms). ` +\\n            `Wanted: ${oldGangInfo.wantedLevelGainRate.toPrecision(3)} -> ${myGangInfo.wantedLevelGainRate.toPrecision(3)}, ` +\\n            `Rep: ${formatNumberShort(oldGangInfo.respectGainRate)} -> ${formatNumberShort(myGangInfo.respectGainRate)}, Money: ${formatMoney(oldGangInfo.moneyGainRate)} -> ${formatMoney(myGangInfo.moneyGainRate)}`);\\n        // Sanity check that our calculations (which we stole from game source code) are about right\\n        if ((Math.abs(myGangInfo.wantedLevelGainRate - optWanted) / optWanted > 0.01) || (Math.abs(myGangInfo.respectGainRate - optRespect) / optRespect > 0.01) || (Math.abs(myGangInfo.moneyGainRate - optMoney) / optMoney > 0.01))\\n            log(ns, `WARNING: Calculated new rates would be Rep:${formatNumberShort(optRespect)} Wanted: ${optWanted.toPrecision(3)} Money: ${formatMoney(optMoney)}` +\\n                `but they are Rep:${formatNumberShort(myGangInfo.respectGainRate)} Wanted: ${myGangInfo.wantedLevelGainRate.toPrecision(3)} Money: ${formatMoney(myGangInfo.moneyGainRate)}`, false, 'warning');\\n    } else\\n        log(ns, `INFO: Determined all ${myGangMembers.length} gang member assignments are already optimal for ${optStat} with wanted gain tolerance ${wantedGainTolerance.toPrecision(2)} (${elapsed} ms).`);\\n    // Fail-safe: If we somehow over-shot and are generating wanted levels, start randomly assigning members to vigilante to fix it\\n    if (myGangInfo.wantedLevelGainRate > wantedGainTolerance) await fixWantedGainRate(ns, myGangInfo, wantedGainTolerance);\\n}\\n\\n/** @param {NS} ns \\n * Logic to reduce crime tiers when we're generating a wanted level **/\\nasync function fixWantedGainRate(ns, myGangInfo, wantedGainTolerance = 0) {\\n    // TODO: steal actual wanted level calcs and strategically pick the member(s) who can bridge the gap while losing the least rep/sec\\n    let lastWantedLevelGainRate = myGangInfo.wantedLevelGainRate;\\n    log(ns, `WARNING: Generating wanted levels (${lastWantedLevelGainRate.toPrecision(3)}/sec > ${wantedGainTolerance.toPrecision(3)}/sec), temporarily assigning random members to Vigilante Justice...`, false, 'warning');\\n    for (const member of shuffleArray(myGangMembers.slice())) {\\n        if (!crimes.includes(assignedTasks[member])) continue; // This member isn't doing crime, so they aren't contributing to wanted\\n        assignedTasks[member] = strWantedReduction;\\n        await updateMemberActivities(ns);\\n        const wantedLevelGainRate = (myGangInfo = await waitForGameUpdate(ns, myGangInfo)).wantedLevelGainRate;\\n        if (wantedLevelGainRate < wantedGainTolerance) return;\\n        if (lastWantedLevelGainRate == wantedLevelGainRate)\\n            log(ns, `Warning: Attempt to rollback crime of ${member} to ${assignedTasks[member]} resulted in no change in wanted level gain rate ` +\\n                `(${lastWantedLevelGainRate.toPrecision(3)})`, false, 'warning');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Recruit new members if available **/\\nasync function doRecruitMember(ns) {\\n    let i = 0, newMemberName;\\n    do { newMemberName = `Thug ${++i}`; } while (myGangMembers.includes(newMemberName) || myGangMembers.includes(newMemberName + \\\" Understudy\\\"));\\n    if (i < myGangMembers.length) newMemberName += \\\" Understudy\\\"; // Pay our respects to the deceased\\n    if (await getNsDataThroughFile(ns, `ns.gang.canRecruitMember() && ns.gang.recruitMember(ns.args[0])`, '/Temp/gang-recruit-member.txt', [newMemberName])) {\\n        myGangMembers.push(newMemberName);\\n        assignedTasks[newMemberName] = \\\"Train \\\" + (isHackGang ? \\\"Hacking\\\" : \\\"Combat\\\");\\n        lastMemberReset[newMemberName] = Date.now();\\n        log(ns, `SUCCESS: Recruited a new gang member \\\"${newMemberName}\\\"!`, false, 'success');\\n    } else {\\n        log(ns, `ERROR: Failed to recruit a new gang member \\\"${newMemberName}\\\"!`, false, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Check if any members are deemed worth ascending to increase a stat multiplier **/\\nasync function tryAscendMembers(ns) {\\n    const dictAscensionResults = await getGangInfoDict(ns, myGangMembers, 'getAscensionResult');\\n    for (let i = 0; i < myGangMembers.length; i++) {\\n        const member = myGangMembers[i];\\n        // First members are given the largest threshold, so that early on when they are our only members, they are more stable\\n        const ascMultiThreshold = options['ascend-multi-threshold'] + (11 - i) * options['ascend-multi-threshold-spacing'];\\n        const ascResult = dictAscensionResults[member];\\n        if (!ascResult || !importantStats.some(stat => ascResult[stat] >= ascMultiThreshold))\\n            continue;\\n        if (undefined !== (await getNsDataThroughFile(ns, `ns.gang.ascendMember(ns.args[0])`, null, [member]))) {\\n            log(ns, `SUCCESS: Ascended member ${member} to increase multis by ${importantStats.map(s => `${s} -> ${ascResult[s].toFixed(2)}x`).join(\\\", \\\")}`, false, 'success');\\n            lastMemberReset[member] = Date.now();\\n        }\\n        else\\n            log(ns, `ERROR: Attempt to ascended member ${member} failed. Go investigate!`, false, 'error');\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Upgrade any missing equipment / augmentations of members if we have the budget for it **/\\nasync function tryUpgradeMembers(ns, dictMembers) {\\n    // Update equipment costs to take into account discounts\\n    const dictEquipmentCosts = await getGangInfoDict(ns, equipments.map(e => e.name), 'getEquipmentCost');\\n    equipments.forEach(e => e.cost = dictEquipmentCosts[e.name])\\n    // Upgrade members, spending no more than x% of our money per tick (and respecting the global reseve)\\n    const purchaseOrder = [];\\n    const playerData = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n    const homeMoney = playerData.money - (options['reserve'] != null ? options['reserve'] : Number(ns.read(\\\"reserve.txt\\\") || 0));\\n    const maxBudget = 0.99; // Note: To avoid rounding issues and micro-spend race-conditions, only allow budgeting up to 99% of money per tick\\n    let budget = Math.min(maxBudget, (options['equipment-budget'] || defaultMaxSpendPerTickTransientEquipment)) * homeMoney;\\n    let augBudget = Math.min(maxBudget, (options['augmentations-budget'] || defaultMaxSpendPerTickPermanentEquipment)) * homeMoney;\\n    // Hack: Default aug budget is cut by 1/100 in a few situations (TODO: Add more, like when BitnodeMults are such that gang income is severely nerfed)\\n    if (!ns.stock.has4SDataTIXAPI() || resetInfo.currentNode === 8) {\\n        budget /= 100;\\n        augBudget /= 100;\\n    }\\n    // Find out what outstanding equipment can be bought within our budget\\n    for (const equip of equipments) {\\n        if (augBudget <= 0) break;\\n        for (const member of Object.values(dictMembers)) { // Get this equip for each member before considering the next most expensive equip\\n            if (augBudget <= 0) break;\\n            // Bit of a hack: Inflate the \\\"cost\\\" of equipment that doesn't contribute to our main stats so that we don't purchase them unless we have ample cash\\n            let percievedCost = equip.cost * (Object.keys(equip.stats).some(stat => importantStats.some(i => stat.includes(i))) ? 1 : offStatCostPenalty);\\n            if (percievedCost > augBudget) continue;\\n            if (equip.type != \\\"Augmentation\\\" && percievedCost > budget) continue;\\n            if (!member.upgrades.includes(equip.name) && !member.augmentations.includes(equip.name)) {\\n                purchaseOrder.push({ member: member.name, type: equip.type, equipmentName: equip.name, cost: equip.cost });\\n                budget -= equip.cost;\\n                augBudget -= equip.cost;\\n            }\\n        }\\n    }\\n    await doUpgradePurchases(ns, purchaseOrder);\\n}\\n\\n/** @param {NS} ns \\n * Spawn a temporary taask to upgrade members. **/\\nasync function doUpgradePurchases(ns, purchaseOrder) {\\n    if (purchaseOrder.length == 0) return;\\n    const totalCost = purchaseOrder.reduce((t, e) => t + e.cost, 0);\\n    const getOrderSummary = (items) => items.map(o => `${o.member} ${o.type}: \\\"${o.equipmentName}\\\"`).join(\\\", \\\");\\n    const orderOutcomes = await getNsDataThroughFile(ns, `JSON.parse(ns.args[0]).map(o => ns.gang.purchaseEquipment(o.member, o.equipmentName))`,\\n        '/Temp/gang-upgrade-members.txt', [JSON.stringify(purchaseOrder)]);\\n    const succeeded = [], failed = [];\\n    for (let i = 0; i < orderOutcomes.length; i++)\\n        (orderOutcomes[i] ? succeeded : failed).push(purchaseOrder[i]);\\n    if (succeeded.length == purchaseOrder.length)\\n        log(ns, `SUCCESS: Purchased ${purchaseOrder.length} gang member upgrades for ${formatMoney(totalCost)}:\\\\n${getOrderSummary(succeeded)}`, false, 'success');\\n    else\\n        log(ns, `WARNING: Failed to purchase one or more gang upgrades totalling ${formatMoney(totalCost)} (Insufficient funds?).` +\\n            `\\\\n  Failed: ${getOrderSummary(failed)}\\\\n  Succeeded: ${getOrderSummary(succeeded)}`, false, 'error');\\n}\\n\\nlet sequentialMisfires = 0;\\n\\n/** @param {NS} ns \\n * Helper to wait for the game to update stats (typically 2 seconds per cycle) **/\\nasync function waitForGameUpdate(ns, oldGangInfo) {\\n    if (!myGangMembers.some(member => !assignedTasks[member].includes(\\\"Train\\\")))\\n        return oldGangInfo; // Ganginfo will never change if all members are training, so don't wait for an update\\n    const maxWaitTime = 2500;\\n    const waitInterval = 100;\\n    const start = Date.now()\\n    while (Date.now() < start + maxWaitTime) {\\n        var latestGangInfo = await getNsDataThroughFile(ns, 'ns.gang.getGangInformation()');\\n        if (JSON.stringify(latestGangInfo) != JSON.stringify(oldGangInfo)) {\\n            sequentialMisfires = 0;\\n            return latestGangInfo;\\n        }\\n        await ns.sleep(Math.min(waitInterval, start + maxWaitTime - Date.now()));\\n    }\\n    sequentialMisfires++;\\n    log(ns, `WARNING: Max wait time ${maxWaitTime} exceeded while waiting for old gang info to update.\\\\n${JSON.stringify(oldGangInfo)}\\\\n===\\\\n${JSON.stringify(latestGangInfo)}`,\\n        false, sequentialMisfires < 2 ? null : 'warning'); // Only pop-up an alert if this happens twice in a row (or more)\\n    territoryTickDetected = false;\\n    return latestGangInfo;\\n}\\n\\n/** @param {NS} ns \\n * Checks whether we should be engaging in warfare based on our gang power and that of other gangs. **/\\nasync function enableOrDisableWarfare(ns, myGangInfo) {\\n    warfareFinished = Math.round(myGangInfo.territory * 2 ** 20) / 2 ** 20 /* Handle API imprecision */ >= 1;\\n    if (warfareFinished && !myGangInfo.territoryWarfareEngaged) return; // No need to engage once we hit 100%\\n    const otherGangs = await getNsDataThroughFile(ns, 'ns.gang.getOtherGangInformation()'); // Returns dict of { [gangName]: { \\\"power\\\": Number, \\\"territory\\\": Number } }\\n    let lowestWinChance = 1, totalWinChance = 0, totalActiveGangs = 0;\\n    let lowestWinChanceGang = \\\"\\\";\\n    for (const otherGang in otherGangs) {\\n        if (otherGangs[otherGang].territory == 0 || otherGang == myGangFaction) continue; // *New* Don't have to worry about battling a gang if it has 0 territory\\n        const winChance = myGangInfo.power / (myGangInfo.power + otherGangs[otherGang].power)\\n        if (winChance <= lowestWinChance) lowestWinChanceGang = otherGang;\\n        totalActiveGangs++, totalWinChance += winChance, lowestWinChance = Math.min(lowestWinChance, winChance);\\n    }\\n    // Turn on territory warfare only if we have a better than <territoryEngageThreshold>% chance of beating our random opponent\\n    const averageWinChance = totalWinChance / totalActiveGangs;\\n    const shouldEngage = !warfareFinished && territoryEngageThreshold <= averageWinChance;\\n    if (shouldEngage != myGangInfo.territoryWarfareEngaged) {\\n        log(ns, (warfareFinished ? 'SUCCESS' : 'INFO') + `: Toggling participation in territory warfare to ${shouldEngage}. Our power: ${formatNumberShort(myGangInfo.power)}. ` +\\n            (!warfareFinished ? `Lowest win chance is ${(100 * lowestWinChance).toFixed(2)}% with ${lowestWinChanceGang} (power ${formatNumberShort(otherGangs[lowestWinChanceGang]?.power)}). ` +\\n                `Average win chance ${(100 * averageWinChance).toFixed(2)}% across ${totalActiveGangs} active gangs.` :\\n                'We have destroyed all other gangs and earned 100% territory'), false, warfareFinished ? 'info' : 'success');\\n        await runCommand(ns, `ns.gang.setTerritoryWarfare(ns.args[0])`, null, [shouldEngage]);\\n    }\\n}\\n\\n// Ram-dodging helper to get gang information for each item in a list\\nconst getGangInfoDict = async (ns, elements, gangFunction) => await getDict(ns, elements, `gang.${gangFunction}`, `/Temp/gang-${gangFunction}.txt`);\\nconst getDict = async (ns, elements, nsFunction, fileName) => await getNsDataThroughFile(ns, `Object.fromEntries(ns.args.map(o => [o, ns.${nsFunction}(o)]))`, fileName, elements);\\n\\n/** Gang calcs shamefully stolen from https://github.com/danielyxie/bitburner/blob/dev/src/Gang/GangMember.ts **/\\nlet getStatWeight = (task, memberInfo) =>\\n    (task.hackWeight / 100) * memberInfo[\\\"hack\\\"] + // Need to quote to avoid paying RAM for ns.hack -_-\\n    (task.strWeight / 100) * memberInfo.str +\\n    (task.defWeight / 100) * memberInfo.def +\\n    (task.dexWeight / 100) * memberInfo.dex +\\n    (task.agiWeight / 100) * memberInfo.agi +\\n    (task.chaWeight / 100) * memberInfo.cha;\\n\\nlet getWantedPenalty = myGangInfo => myGangInfo.respect / (myGangInfo.respect + myGangInfo.wantedLevel);\\nlet getTerritoryPenalty = myGangInfo => (0.2 * myGangInfo.territory + 0.8) * multGangSoftcap;\\n\\nfunction computeRepGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 4 * task.difficulty;\\n    if (task.baseRespect === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.respect) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    //console.log(`statWeight: ${statWeight} task.difficulty: ${task.difficulty} territoryMult: ${territoryMult} territoryPenalty: ${territoryPenalty} myGangInfo.respect ${myGangInfo.respect} myGangInfo.wanted ${myGangInfo.wanted} respectMult: ${respectMult}`);\\n    return Math.pow(11 * task.baseRespect * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\nfunction computeWantedGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.5 * task.difficulty;\\n    if (task.baseWanted === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.wanted) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    return (task.baseWanted < 0) ? 0.4 * task.baseWanted * statWeight * territoryMult :\\n        Math.min(100, (7 * task.baseWanted) / Math.pow(3 * statWeight * territoryMult, 0.8));\\n}\\n\\nfunction calculateMoneyGains(myGangInfo, currentTask, memberInfo) {\\n    const task = allTaskStats[currentTask];\\n    const statWeight = getStatWeight(task, memberInfo) - 3.2 * task.difficulty;\\n    if (task.baseMoney === 0 || statWeight <= 0) return 0;\\n    const territoryMult = Math.max(0.005, Math.pow(myGangInfo.territory * 100, task.territory.money) / 100);\\n    if (isNaN(territoryMult) || territoryMult <= 0) return 0;\\n    const respectMult = getWantedPenalty(myGangInfo);\\n    const territoryPenalty = getTerritoryPenalty(myGangInfo);\\n    return Math.pow(5 * task.baseMoney * statWeight * territoryMult * respectMult, territoryPenalty);\\n}\\n\\n/** Helps us not get caught in cycles by reducing gang member crime tiers in a random order */\\nfunction shuffleArray(array) {\\n    for (let i = array.length - 1; i > 0; i--) {\\n        const j = Math.floor(Math.random() * (i + 1));\\n        [array[i], array[j]] = [array[j], array[i]];\\n    }\\n    return array;\\n}\",\"filename\":\"gangs.js\",\"server\":\"home\"}}],[\"grep.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Achievement Unlocked: grep grep.js grep\\nconst usage = \\\"Usage: run grep.js [<filename.ext>] <search_string>\\\\n\\\" +\\n    \\\"- If run with one argument, searches all files for occurrences of that text.\\\\n\\\" +\\n    \\\"- If run with two arguments, the first argument is the name of the file to search.\\\\n\\\" +\\n    \\\"- If you wish to search all files for text with a space in it, wrap it in quotes.\\\";\\nexport function autocomplete(data, args) {\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    return lastFlag ? [] : data.scripts; // For the first argument, auto-complete a list of all files\\n}\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const args = ns.args;\\n    if (args.length == 0)\\n        return ns.tprint(`INFO: Searches for text in files.\\\\n${usage}`)\\n    const search = args.length == 1 ? args[0] : args.slice(1, args.length).join(\\\" \\\");\\n    // Two or more arguments, treat the first argument as a file name\\n    if (args.length > 1) {\\n        const fileName = args[0];\\n        const contents = ns.read(fileName);\\n        if (!contents) return ns.tprint(`ERROR: File not found: \\\"${fileName}\\\".\\\\n${usage}`);\\n        const output = searchRows(contents, search, fileName);\\n        return ns.tprint(output.length > 0 ? output.join(\\\"\\\\n\\\") :\\n            `Search string \\\"${search}\\\" not found in file ${fileName}`);\\n    }\\n    // Otherwise, search all files\\n    const files = ns.ls(\\\"home\\\");\\n    const allOutput = files.flatMap(fileName => searchRows(ns.read(fileName), search, fileName));\\n    ns.tprint(allOutput.length > 0 ? allOutput.join(\\\"\\\\n\\\") :\\n        `Search string \\\"${search}\\\" not found in any of the ${files.length} files on \\\"home\\\".`);\\n}\\n/** Helper to search a single file's output */\\nfunction searchRows(text, search, fileName) {\\n    const output = text.split(\\\"\\\\n\\\").map((row, i) => [row, i])\\n        .filter(([row, _]) => row.includes(search))\\n        .map(([row, i]) => `${i + 1}`.padStart(3) + `: ${row}`)\\n    if (output.length > 0 && fileName)\\n        output.unshift(`Found ${output.length} occurrences of the string \\\"${search}\\\" in file ${fileName}:`);\\n    return output;\\n}\",\"filename\":\"grep.js\",\"server\":\"home\"}}],[\"hacknet-upgrade-manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getConfiguration, disableLogs, formatDuration, formatMoney, } from './helpers.js'\\n\\nlet haveHacknetServers = true; // Cached flag after detecting whether we do (or don't) have hacknet servers\\nconst argsSchema = [\\n    ['max-payoff-time', '1h'], // Controls how far to upgrade hacknets. Can be a number of seconds, or an expression of minutes/hours (e.g. '123m', '4h')\\n    ['time', null], // alias for max-payoff-time\\n    ['c', false], // Set to true to run continuously, otherwise, it runs once\\n    ['continuous', false],\\n    ['interval', 1000], // Rate at which the program purchases upgrades when running continuously\\n    ['max-spend', Number.MAX_VALUE], // The maximum amount of money to spend on upgrades\\n    ['toast', false], // Set to true to toast purchases\\n    ['reserve', null], // Reserve this much cash (defaults to contents of reserve.txt if not specified)\\n\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = getConfiguration(ns, argsSchema);\\n    if (!options) return; // Invalid options, or ran in --help mode.\\n    const continuous = options.c || options.continuous;\\n    const interval = options.interval;\\n    let maxSpend = options[\\\"max-spend\\\"];\\n    let maxPayoffTime = options['time'] || options['max-payoff-time'];\\n    // A little string parsing to be more user friendly\\n    if (maxPayoffTime && String(maxPayoffTime).endsWith(\\\"m\\\"))\\n        maxPayoffTime = Number.parseFloat(maxPayoffTime.replace(\\\"m\\\", \\\"\\\")) * 60\\n    else if (maxPayoffTime && String(maxPayoffTime).endsWith(\\\"h\\\"))\\n        maxPayoffTime = Number.parseFloat(maxPayoffTime.replace(\\\"h\\\", \\\"\\\")) * 3600\\n    else\\n        maxPayoffTime = Number.parseFloat(maxPayoffTime);\\n    disableLogs(ns, ['sleep', 'getServerUsedRam', 'getServerMoneyAvailable']);\\n    setStatus(ns, `Starting hacknet-upgrade-manager with purchase payoff time limit of ${formatDuration(maxPayoffTime * 1000)} and ` +\\n        (maxSpend == Number.MAX_VALUE ? 'no spending limit' : `a spend limit of ${formatMoney(maxSpend)}`) +\\n        `. Current fleet: ${ns.hacknet.numNodes()} nodes...`);\\n    do {\\n        try {\\n            const moneySpent = upgradeHacknet(ns, maxSpend, maxPayoffTime, options);\\n            // Using this method, we cannot know for sure that we don't have hacknet servers until we have purchased one\\n            if (haveHacknetServers && ns.hacknet.numNodes() > 0 && ns.hacknet.hashCapacity() == 0)\\n                haveHacknetServers = false;\\n            if (maxSpend && moneySpent === false) {\\n                setStatus(ns, `Spending limit reached. Breaking...`);\\n                break; // Hack, but we return a non-number (false) when we've bought all we can for the current config\\n            }\\n            maxSpend -= moneySpent;\\n        }\\n        catch (err) {\\n            setStatus(ns, `WARNING: hacknet-upgrade-manager.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        if (continuous) await ns.sleep(interval);\\n    } while (continuous);\\n}\\n\\nlet lastUpgradeLog = \\\"\\\";\\nfunction setStatus(ns, logMessage) {\\n    if (logMessage != lastUpgradeLog) ns.print(lastUpgradeLog = logMessage);\\n}\\n\\n// Will buy the most effective hacknet upgrade, so long as it will pay for itself in the next {payoffTimeSeconds} seconds.\\n/** @param {NS} ns **/\\nexport function upgradeHacknet(ns, maxSpend, maxPayoffTimeSeconds = 3600 /* 3600 sec == 1 hour */, options) {\\n    const currentHacknetMult = ns.getPlayer().mults.hacknet_node_money;\\n    // Get the lowest cache level, we do not consider upgrading the cache level of servers above this until all have the same cache level\\n    const minCacheLevel = [...Array(ns.hacknet.numNodes()).keys()].reduce((min, i) => Math.min(min, ns.hacknet.getNodeStats(i).cache), Number.MAX_VALUE);\\n    // Note: Formulas API has a hashGainRate which should agree with these calcs, but this way they're available even without the formulas API\\n    const upgrades = [{ name: \\\"none\\\", cost: 0 }, {\\n        name: \\\"level\\\", upgrade: ns.hacknet.upgradeLevel, cost: i => ns.hacknet.getLevelUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.level + 1,\\n        addedProduction: nodeStats => nodeStats.production * ((nodeStats.level + 1) / nodeStats.level - 1)\\n    }, {\\n        name: \\\"ram\\\", upgrade: ns.hacknet.upgradeRam, cost: i => ns.hacknet.getRamUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.ram * 2,\\n        addedProduction: nodeStats => nodeStats.production * 0.07\\n    }, {\\n        name: \\\"cores\\\", upgrade: ns.hacknet.upgradeCore, cost: i => ns.hacknet.getCoreUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.cores + 1,\\n        addedProduction: nodeStats => nodeStats.production * ((nodeStats.cores + 5) / (nodeStats.cores + 4) - 1)\\n    }, {\\n        name: \\\"cache\\\", upgrade: ns.hacknet.upgradeCache, cost: i => ns.hacknet.getCacheUpgradeCost(i, 1), nextValue: nodeStats => nodeStats.cache + 1,\\n        addedProduction: nodeStats => nodeStats.cache > minCacheLevel || !haveHacknetServers ? 0 : nodeStats.production * 0.01 / nodeStats.cache // Note: Does not actually give production, but it has \\\"worth\\\" to us so we can buy more things\\n    }];\\n    // Find the best upgrade we can make to an existing node\\n    let nodeToUpgrade = -1;\\n    let bestUpgrade;\\n    let bestUpgradePayoff = 0; // Hashes per second per dollar spent. Bigger is better.\\n    let cost = 0;\\n    let upgradedValue = 0;\\n    let worstNodeProduction = Number.MAX_VALUE; // Used to how productive a newly purchased node might be\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        let nodeStats = ns.hacknet.getNodeStats(i);\\n        if (haveHacknetServers) { // When a hacknet server runs scripts, nodeStats.production lags behind what it should be for current ram usage. Get the \\\"raw\\\" rate\\n            try { nodeStats.production = ns.formulas.hacknetServers.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult); }\\n            catch { /* If we do not have the formulas API yet, we cannot account for this and must simply fall-back to using the production reported by the node */ }\\n        }\\n        worstNodeProduction = Math.min(worstNodeProduction, nodeStats.production);\\n        for (let up = 1; up < upgrades.length; up++) {\\n            let currentUpgradeCost = upgrades[up].cost(i);\\n            let payoff = upgrades[up].addedProduction(nodeStats) / currentUpgradeCost; // Production (Hashes per second) per dollar spent\\n            if (payoff > bestUpgradePayoff) {\\n                nodeToUpgrade = i;\\n                bestUpgrade = upgrades[up];\\n                bestUpgradePayoff = payoff;\\n                cost = currentUpgradeCost;\\n                upgradedValue = upgrades[up].nextValue(nodeStats);\\n            }\\n        }\\n    }\\n    // Compare this to the cost of adding a new node. This is an imperfect science. We are paying to unlock the ability to buy all the same upgrades our\\n    // other nodes have - all of which have been deemed worthwhile. Not knowing the sum total that will have to be spent to reach that same production,\\n    // the \\\"most optimistic\\\" case is to treat \\\"price\\\" of all that production to be just the cost of this server, but this is **very** optimistic.\\n    // In practice, the cost of new hacknodes scales steeply enough that this should come close to being true (cost of server >> sum of cost of upgrades)\\n    let newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n    let newNodePayoff = ns.hacknet.numNodes() == ns.hacknet.maxNumNodes() ? 0 : worstNodeProduction / newNodeCost;\\n    let shouldBuyNewNode = newNodePayoff > bestUpgradePayoff;\\n    if (newNodePayoff == 0 && bestUpgradePayoff == 0) {\\n        setStatus(ns, `All upgrades have no value (is hashNet income disabled in this BN?)`);\\n        return false; // As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    // If specified, only buy upgrades that will pay for themselves in {payoffTimeSeconds}.\\n    const hashDollarValue = haveHacknetServers ? 2.5e5 : 1; // Dollar value of one hash-per-second (0.25m dollars per production).\\n    let payoffTimeSeconds = 1 / (hashDollarValue * (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff));\\n    if (shouldBuyNewNode) cost = newNodeCost;\\n\\n    // Prepare info about the next uprade. Whether we end up purchasing or not, we will display this info.\\n    let strPurchase = (shouldBuyNewNode ? `a new node \\\"hacknet-node-${ns.hacknet.numNodes()}\\\"` :\\n        `hacknet-node-${nodeToUpgrade} ${bestUpgrade.name} ${upgradedValue}`) + ` for ${formatMoney(cost)}`;\\n    let strPayoff = `production ${((shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff) * cost).toPrecision(3)} payoff time: ${formatDuration(1000 * payoffTimeSeconds)}`\\n    if (cost > maxSpend) {\\n        setStatus(ns, `The next best purchase would be ${strPurchase}, but the cost exceeds the spending limit (${formatMoney(maxSpend)})`);\\n        return false; // Shut-down. As long as maxSpend doesn't change, we will never purchase another upgrade\\n    }\\n    if (payoffTimeSeconds > maxPayoffTimeSeconds) {\\n        setStatus(ns, `The next best purchase would be ${strPurchase}, but the ${strPayoff} is worse than the limit (${formatDuration(1000 * maxPayoffTimeSeconds)})`);\\n        return false; // Shut-down. As long as maxPayoffTimeSeconds doesn't change, we will never purchase another upgrade\\n    }\\n    const reserve = (options['reserve'] != null ? options['reserve'] : Number(ns.read(\\\"reserve.txt\\\") || 0));\\n    const playerMoney = ns.getPlayer().money;\\n    if (cost > playerMoney - reserve) {\\n        setStatus(ns, `The next best purchase would be ${strPurchase}, but the cost exceeds the our ` +\\n            `current available funds` + (reserve == 0 ? '.' : ` (after reserving ${formatMoney(reserve)}).`));\\n        return 0; // \\n    }\\n    let success = shouldBuyNewNode ? ns.hacknet.purchaseNode() !== -1 : bestUpgrade.upgrade(nodeToUpgrade, 1);\\n    if (success && options.toast) ns.toast(`Purchased ${strPurchase}`, 'success');\\n    setStatus(ns, success ? `Purchased ${strPurchase} with ${strPayoff}` : `Insufficient funds to purchase the next best upgrade: ${strPurchase}`);\\n    return success ? cost : 0;\\n}\",\"filename\":\"hacknet-upgrade-manager.js\",\"server\":\"home\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"home\"}}],[\"host-manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log, getConfiguration, instanceCount, getNsDataThroughFile, scanAllServers, formatMoney, formatRam } from './helpers.js'\\n\\n// The purpose of the host manager is to buy the best servers it can\\n// until it thinks RAM is underutilized enough that you don't need to anymore.\\n\\nconst purchasedServerName = \\\"daemon\\\"; // The name to give all purchased servers. Also used to determine which servers were purchased\\nlet maxPurchasableServerRamExponent; // The max server ram you can buy as an exponent (power of 2). Typically 1 petabyte (2^20), but less in some BNs \\nlet maxPurchasedServers; // The max number of servers you can have in your farm. Typically 25, but can be less in some BNs\\nlet costByRamExponent = {}; // A dictionary of how much each server size costs, prepped in advance.\\n\\n// The following globals are set via command line arguments specified below, along with their defaults\\nlet keepRunning = false;\\nlet minRamExponent;\\nlet absReservedMoney;\\nlet pctReservedMoney;\\n\\nlet options;\\nconst argsSchema = [\\n    ['c', false], // Set to true to run continuously\\n    ['run-continuously', false], // Long-form alias for above flag\\n    ['interval', 10000], // Update interval (in milliseconds) when running continuously\\n    ['min-ram-exponent', 5], // the minimum amount of ram to purchase\\n    ['utilization-trigger', 0.80], // the percentage utilization that will trigger an attempted purchase\\n    ['absolute-reserve', null], // Set to reserve a fixed amount of money. Defaults to the contents of reserve.txt on home\\n    ['reserve-percent', 0.9], // Set to reserve a percentage of home money\\n    ['reserve-by-time', false], // Experimental exponential decay by time in the run. Starts willing to spend lots of money, falls off over time.\\n    ['allow-worse-purchases', false], // Set to true to allow purchase of servers worse than our current best purchased server\\n    ['compare-to-home-threshold', 0.25], // Do not bother buying servers unless they are at least this big compared to current home RAM\\n    ['compare-to-network-ram-threshold', 0.02], // Do not bother buying servers unless they are at least this big compared to total network RAM\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions || await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n    ns.disableLog('ALL')\\n\\n    // Get the maximum number of purchased servers in this bitnode\\n    maxPurchasedServers = await getNsDataThroughFile(ns, 'ns.getPurchasedServerLimit()');\\n    log(ns, `INFO: Max purchasable servers has been detected as ${maxPurchasedServers.toFixed(0)}.`);\\n    if (maxPurchasedServers == 0)\\n        return log(ns, `INFO: Shutting down due to host purchasing being disabled in this BN...`);\\n\\n    // Get the maximum size of purchased servers in this bitnode\\n    const purchasedServerMaxRam = await getNsDataThroughFile(ns, 'ns.getPurchasedServerMaxRam()');\\n    maxPurchasableServerRamExponent = Math.log2(purchasedServerMaxRam);\\n    log(ns, `INFO: Max purchasable RAM has been detected as 2^${maxPurchasableServerRamExponent} (${formatRam(2 ** maxPurchasableServerRamExponent)}).`);\\n\\n    // Gather one-time info in advance about how much RAM each size of server costs (Up to 2^30 to be future-proof, but we expect everything abouve 2^20 to be Infinity)\\n    costByRamExponent = await getNsDataThroughFile(ns, 'Object.fromEntries([...Array(30).keys()].map(i => [i, ns.getPurchasedServerCost(2**i)]))', '/Temp/host-costs.txt');\\n\\n    keepRunning = options.c || options['run-continuously'];\\n    pctReservedMoney = options['reserve-percent'];\\n    minRamExponent = options['min-ram-exponent'];\\n    // Log the command line options, for new users who don't know why certain decisions are/aren't being made\\n    if (minRamExponent > maxPurchasableServerRamExponent) {\\n        log(ns, `WARN: --min-ram-exponent was set to ${minRamExponent} (${formatRam(2 ** minRamExponent)}), ` +\\n            `but the maximum server RAM in this BN is ${maxPurchasableServerRamExponent} (${formatRam(2 ** maxPurchasableServerRamExponent)}), ` +\\n            `so the minimum has been lowered accordingly.`);\\n        minRamExponent = maxPurchasableServerRamExponent;\\n    } else\\n        log(ns, `INFO: --min-ram-exponent is set to ${minRamExponent}: New servers will only be purchased ` +\\n            `if we can afford 2^${minRamExponent} (${formatRam(2 ** minRamExponent)}) or more in size.`);\\n    log(ns, `INFO: --compare-to-home-threshold is set to ${options['compare-to-home-threshold'] * 100}%: ` +\\n        `New servers are deemed \\\"not worthwhile\\\" unless they are at least this big compared to your home server.`);\\n    log(ns, `INFO: --compare-to-network-ram-threshold is set to ${options['compare-to-network-ram-threshold'] * 100}%: ` +\\n        `New servers are deemed \\\"not worthwhile\\\" unless they are this big compared to total ram on the entire network.`);\\n    log(ns, `INFO: --utilization-trigger is set to ${options['utilization-trigger'] * 100}%: ` +\\n        `New servers will only be purchased when more than this much RAM is in use across the entire network.`);\\n    if (options['reserve-by-time'])\\n        log(ns, `INFO: --reserve-by-time is active! This community-contributed option will spend more of your money on servers ` +\\n            `early on, and less later on. Experimental and not tested by me. Have fun!`);\\n    else\\n        log(ns, `INFO: --reserve-percent is set to ${pctReservedMoney * 100}%: ` +\\n            `This means we will spend no more than ${((1 - pctReservedMoney) * 100).toFixed(1)}% of current Money on a new server.`);\\n    // Start the main loop (or run once)\\n    if (!keepRunning)\\n        log(ns, `host-manager will run once. Run with argument \\\"-c\\\" to run continuously.`)\\n    do {\\n        absReservedMoney = options['absolute-reserve'] != null ? options['absolute-reserve'] : Number(ns.read(\\\"reserve.txt\\\") || 0);\\n        await tryToBuyBestServerPossible(ns);\\n        if (keepRunning)\\n            await ns.sleep(options['interval']);\\n    } while (keepRunning);\\n}\\n\\n// Logging system to only print a log if it is different from the last log printed.\\nlet lastStatus = \\\"\\\";\\nfunction setStatus(ns, logMessage) {\\n    return logMessage != lastStatus ? ns.print(lastStatus = logMessage) : false;\\n}\\n\\n/** @param {NS} ns \\n  * Attempts to buy a server at or better than your home machine. **/\\nasync function tryToBuyBestServerPossible(ns) {\\n    // Gether the list of all purchased servers.\\n    const purchasedServers = await getNsDataThroughFile(ns, 'ns.getPurchasedServers()');\\n    // Scan the set of all servers on the network that we own (or rooted) to get a sense of current RAM utilization\\n    let rootedServers = await getNsDataThroughFile(ns, 'scanAllServers(ns).filter(s => ns.hasRootAccess(s))', '/Temp/rooted-servers.txt');\\n\\n    // If some of the servers are hacknet servers, and they aren't being used for scripts, ignore the RAM they have available\\n    // with the assumption that these are reserved for generating hashes\\n    const likelyHacknet = rootedServers.filter(s => s.startsWith(\\\"hacknet-node-\\\") || s.startsWith('hacknet-server-'));\\n    if (likelyHacknet.length > 0) {\\n        const totalHacknetUsedRam = likelyHacknet.reduce((t, s) => t + ns.getServerUsedRam(s), 0);\\n        if (totalHacknetUsedRam == 0) {\\n            rootedServers = rootedServers.filter(s => !likelyHacknet.includes(s));\\n            log(ns, `Removing ${likelyHacknet.length} hacknet servers from RAM statistics since they are not being utilized.`)\\n        } else if (!keepRunning)\\n            log(ns, `We are currently using ${formatRam(totalHacknetUsedRam)} of hacknet RAM, so including hacknet in our utilization stats.`)\\n    }\\n\\n    const totalMaxRam = rootedServers.reduce((t, s) => t + ns.getServerMaxRam(s), 0);\\n    const totalUsedRam = rootedServers.reduce((t, s) => t + ns.getServerUsedRam(s), 0);\\n    const utilizationRate = totalUsedRam / totalMaxRam;\\n    setStatus(ns, `Using ${Math.round(totalUsedRam).toLocaleString('en')}/${formatRam(totalMaxRam)} (` +\\n        `${(utilizationRate * 100).toFixed(1)}%) across ${rootedServers.length} servers ` +\\n        `(Triggers at ${options['utilization-trigger'] * 100}%, ${purchasedServers.length} bought so far)`);\\n\\n    // If utilization is below target. We don't need another server.\\n    if (utilizationRate < options['utilization-trigger']) return;\\n\\n    // Check for other reasons not to go ahead with the purchase\\n    let prefix = 'Host-manager wants to buy another server, but ';\\n\\n    // Determine our budget for spending money on home RAM\\n    let spendableMoney = await getNsDataThroughFile(ns, `ns.getServerMoneyAvailable(ns.args[0])`, null, [\\\"home\\\"]);\\n    if (options['reserve-by-time']) { // Option to vary pctReservedMoney by time since augment. \\n        // Decay factor of 0.2 = Starts willing to spend 95% of our money, backing down to ~75% at 1 hour, ~60% at 2 hours, ~25% at 6 hours, and ~10% at 10 hours.\\n        // Decay factor of 0.3 = Starts willing to spend 95% of our money, backing down to ~66% at 1 hour, ~45% at 2 hours, ~23% at 4 hours, ~10% at 6 hours\\n        // Decay factor of 0.5 = Starts willing to spend 95% of our money, then halving every hour (to ~48% at 1 hour, ~24% at 2 hours, ~12% at 3 hours, etc)\\n        const timeSinceLastAug = await getNsDataThroughFile(ns, 'ns.getTimeSinceLastAug()');\\n        const t = timeSinceLastAug / (60 * 60 * 1000); // Time since last aug, in hours.\\n        const decayFactor = 0.5;\\n        pctReservedMoney = 1 - 0.95 * Math.pow(1 - decayFactor, t);\\n    }\\n\\n    spendableMoney = Math.min(spendableMoney * (1 - pctReservedMoney), spendableMoney - absReservedMoney);\\n    if (spendableMoney <= 0.01)\\n        return setStatus(ns, `${prefix}all cash is currently reserved (% reserve: ${(pctReservedMoney * 100).toFixed(1)}%, abs reserve: ${formatMoney(absReservedMoney)})`);\\n\\n    // Determine the most ram we can buy with our current money\\n    let exponentLevel = 1;\\n    for (; exponentLevel < maxPurchasableServerRamExponent; exponentLevel++)\\n        if (costByRamExponent[exponentLevel + 1] > spendableMoney)\\n            break;\\n    let cost = costByRamExponent[exponentLevel];\\n    let maxRamPossibleToBuy = Math.pow(2, exponentLevel);\\n\\n    // Don't buy if it would put us below our reserve (shouldn't happen, since we calculated how much to buy based on reserve amount)\\n    if (spendableMoney < cost)\\n        return setStatus(ns, `${prefix}spendableMoney (${formatMoney(spendableMoney)}) is less than the cost ` +\\n            `of even the cheapest server (${formatMoney(cost)} for ${formatRam(2 ** exponentLevel)})`);\\n    // Don't buy if we can't afford our configured --min-ram-exponent\\n    if (exponentLevel < minRamExponent)\\n        return setStatus(ns, `${prefix}The highest ram exponent we can afford (2^${exponentLevel} for ${formatMoney(cost)}) on our budget ` +\\n            `of ${formatMoney(spendableMoney)} is less than the --min-ram-exponent (2^${minRamExponent} for ${formatMoney(costByRamExponent[minRamExponent])})`);\\n    // Under some conditions, we consider the new server \\\"not worthwhile\\\". but only if it isn't the biggest possible server we can buy\\n    if (exponentLevel < maxPurchasableServerRamExponent) {\\n        // Abort if our home server is more than x times bettter (rough guage of how much we 'need' Daemon RAM at the current stage of the game?)\\n        const homeThreshold = options['compare-to-home-threshold'];\\n        // Unless we're looking at buying the maximum purchasable server size - in which case we can do no better\\n        if (maxRamPossibleToBuy < ns.getServerMaxRam(\\\"home\\\") * homeThreshold)\\n            return setStatus(ns, `${prefix}the most RAM we can buy (${formatRam(maxRamPossibleToBuy)}) on our budget of ${formatMoney(spendableMoney)} ` +\\n                `is less than --compare-to-home-threshold (${homeThreshold}) x home RAM (${formatRam(ns.getServerMaxRam(\\\"home\\\"))})`);\\n        // Abort if purchasing this server wouldn't improve our total RAM by more than x% (ensures we buy in meaningful increments)\\n        const networkThreshold = options['compare-to-network-ram-threshold'];\\n        if (maxRamPossibleToBuy / totalMaxRam < networkThreshold)\\n            return setStatus(ns, `${prefix}the most RAM we can buy (${formatRam(maxRamPossibleToBuy)}) on our budget of ${formatMoney(spendableMoney)} ` +\\n                `is less than --compare-to-network-ram-threshold (${networkThreshold}) x total network RAM (${formatRam(totalMaxRam)})`);\\n    }\\n\\n    // Collect information about other previoulsy purchased servers\\n    const maxPurchasableServerRam = Math.pow(2, maxPurchasableServerRamExponent);\\n    const ramByServer = Object.fromEntries(purchasedServers.map(server => [server, ns.getServerMaxRam(server)]));\\n    let [worstServerName, worstServerRam] = purchasedServers.reduce(([minS, minR], s) =>\\n        ramByServer[s] < minR ? [s, ramByServer[s]] : [minS, minR], [null, maxPurchasableServerRam]);\\n    let [bestServerName, bestServerRam] = purchasedServers.reduce(([maxS, maxR], s) =>\\n        ramByServer[s] > maxR ? [s, ramByServer[s]] : [maxS, maxR], [null, 0]);\\n\\n    // Abort if our worst previously-purchased server is better than the one we're looking to buy (ensures we buy in sane increments of capacity)\\n    if (worstServerName != null && maxRamPossibleToBuy < worstServerRam && !options['allow-worse-purchases'])\\n        return setStatus(ns, `${prefix}the most RAM we can buy (${formatRam(maxRamPossibleToBuy)}) on our budget of ` +\\n            `${formatMoney(spendableMoney)} is less than our worst purchased server ${worstServerName}'s RAM ${formatRam(worstServerRam)}`);\\n    // Only buy new servers as good as or better than our best bought server (anything less is deemed a regression in value)\\n    if (bestServerRam != null && maxRamPossibleToBuy < bestServerRam && !options['allow-worse-purchases'])\\n        return setStatus(ns, `${prefix}the most RAM we can buy (${formatRam(maxRamPossibleToBuy)}) on our budget of ` +\\n            `${formatMoney(spendableMoney)} is less than our previously purchased server ${bestServerName} RAM ${formatRam(bestServerRam)}`);\\n\\n    let purchasedServer,\\n        isUpgrade = false\\n    // if we're at capacity, check to see if we can do better better than the current worst purchased server. If so, upgrade it.\\n    if (purchasedServers.length >= maxPurchasedServers) {\\n        if (worstServerRam == maxPurchasableServerRam) {\\n            keepRunning = false;\\n            return setStatus(ns, `INFO: We are at the max number of servers ${maxPurchasedServers}, ` +\\n                `and all have the maximum possible RAM (${formatRam(maxPurchasableServerRam)}).`);\\n        }\\n\\n        cost -= costByRamExponent[Math.log2(worstServerRam)]\\n        isUpgrade = true\\n        purchasedServer = (await getNsDataThroughFile(ns, `ns.upgradePurchasedServer(ns.args[0], ns.args[1])`, null,\\n            [worstServerName, maxRamPossibleToBuy])) ? worstServerName : \\\"\\\";\\n    } else {\\n        purchasedServer = await getNsDataThroughFile(ns, `ns.purchaseServer(ns.args[0], ns.args[1])`, null,\\n            [purchasedServerName, maxRamPossibleToBuy]);\\n    }\\n    if (!purchasedServer)\\n        setStatus(ns, `${prefix}Could not ${isUpgrade ? 'upgrade' : 'purchase'} a server with ${formatRam(maxRamPossibleToBuy)} RAM for ${formatMoney(cost)} ` +\\n            `with a budget of ${formatMoney(spendableMoney)}. This is either a bug, or we in a SF.9`);\\n    else\\n        log(ns, `SUCCESS: ${isUpgrade ? 'Upgraded' : 'Purchased'} server ${purchasedServer} with ${formatRam(maxRamPossibleToBuy)} RAM for ${formatMoney(cost)}`, true, 'success');\\n}\\n\",\"filename\":\"host-manager.js\",\"server\":\"home\"}}],[\"kill-all-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllServers } from './helpers.js'\\n\\n// the purpose of cascade kill is to kill all scripts running on any server in the game\\n// but saving the host that you run it on for last (so that it doesn't kill itself prematurely)\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var startingNode = ns.getHostname();\\n    const serverList = scanAllServers(ns);\\n\\n    // Send the kill command to all servers\\n    for (const server of serverList) {\\n        // skip if this host, we save it for last\\n        if (server == startingNode)\\n            continue;\\n\\n        // skip if not running anything\\n        if (ns.ps(server) === 0)\\n            continue;\\n\\n        // kill all scripts\\n        ns.killall(server);\\n    }\\n\\n    // idle for things to die\\n    for (const server of serverList) {\\n        // skip if this host, we save it for last\\n        if (server == startingNode)\\n            continue;\\n        // idle until they're dead, this is to avoid killing the cascade before it's finished.\\n        while (ns.ps(server) > 0) {\\n            await ns.sleep(20);\\n        }\\n        // Remove script files the daemon would have copied over (in case we update the source)\\n        for (let file of ns.ls(server, '.js'))\\n            ns.rm(file, server)\\n    }\\n\\n    // wait to kill these. This kills itself, obviously.\\n    ns.killall(startingNode);\\n}\",\"filename\":\"kill-all-scripts.js\",\"server\":\"home\"}}],[\"optimize-stanek.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const FragmentType = {\\n    HackingChance: 2,\\n    HackingSpeed: 3,\\n    HackingMoney: 4,\\n    HackingGrow: 5,\\n    Hacking: 6,\\n    Strength: 7,\\n    Defense: 8,\\n    Dexterity: 9,\\n    Agility: 10,\\n    Charisma: 11,\\n    HacknetMoney: 12,\\n    HacknetCost: 13,\\n    Rep: 14,\\n    WorkMoney: 15,\\n    Crime: 16,\\n    Bladeburner: 17,\\n    Booster: 18,\\n}\\n\\nconst FragmentId = {\\n    Hacking1: 0,\\n    Hacking2: 1,\\n    HackingSpeed: 5,\\n    HackingMoney: 6,\\n    HackingGrow: 7,\\n    Strength: 10,\\n    Defense: 12,\\n    Dexterity: 14,\\n    Agility: 16,\\n    Charisma: 18,\\n    HacknetMoney: 20,\\n    HacknetCost: 21,\\n    Rep: 25,\\n    WorkMoney: 27,\\n    Crime: 28,\\n    Bladeburner: 30,\\n    //Booster1: 100,\\n    //Booster2: 101,\\n    //Booster3: 102,\\n    //Booster4: 103,\\n    //Booster5: 104,\\n    //Booster6: 105,\\n    //Booster7: 106,\\n    //Booster8: 107,\\n};\\n\\nlet planStatsCount = 0;\\nlet planBoostersCount = 0;\\n\\n/** @typedef {{ key: number, fragment: Fragment, x: number; y: number; rot: number;\\n  *             coords: [number, number][]; adjacent: [number, number][];\\n  *             adjacentBoosters: Int16Array; adjacentStats: Int16Array;\\n  *             overlapWithBoosters: Int16Array; overlapWithStats: Int16Array }} Placement */\\n/** @typedef {{ stats: Placement[]; boosters: Placement[] }} Plan */\\n\\nexport function autocomplete(data, args) {\\n    return [...Object.keys(FragmentType)];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    /*\\n    if (ns.args.length == 0) {\\n        tlog(ns, \\\"ERROR\\\", \\\"At least one fragment type required\\\");\\n        return;\\n    }\\n    if (!ns.args.every(arg => Object.keys(FragmentType).includes(arg))) {\\n        tlog(\\\"ERROR\\\", \\\"Invalid fragment type(s): %s\\\",\\n            ns.args.filter(arg => !Object.keys(FragmentType).includes(arg)));\\n        return;\\n    }*/\\n\\n    // 1. Set up priority order of stat fragments to include\\n    const targetIds = [\\n        FragmentId.Rep, FragmentId.Hacking2, FragmentId.Hacking1, // Basics, always want\\n        , FragmentId.HackingSpeed, // Priority 2, improve hack EXP gain and income?\\n        , FragmentId.HacknetMoney, FragmentId.HacknetCost // Priority 3, hacknet good for lots of things?\\n        , FragmentId.HackingGrow, FragmentId.HackingMoney // Priority 4, improves growth, income for RAM from hacking?\\n        //etc...\\n    ];\\n    const allFragments = ns.stanek.fragmentDefinitions();\\n    const statFrags = allFragments.filter(frag => targetIds.includes(frag.id));\\n    const boosterFrags = allFragments.filter(frag => frag.type == FragmentType.Booster);\\n\\n    // 2. Pick dimensions (why not pick many!)\\n    //const height = 6; //ns.stanek.giftHeight()\\n    //const width = 6; //ns.stanek.giftWidth(); // NOTE: Width is always the same, or one more than height.\\n    for (let height = 3; height <= 5; height++)\\n        for (let width = height; width <= height + 1; width++) {\\n            const [score, plan] = await planFragments(ns, width, height, statFrags, boosterFrags);\\n            ns.tprint(score);\\n            const strFragments = [];\\n            // Output the layout so you can stick it in a database\\n            for (const elem of [...plan.stats, ...plan.boosters])\\n                strFragments.push(`{\\\"id\\\":${elem.fragment.id},\\\"x\\\":${elem.x},\\\"y\\\":${elem.y},\\\"rotation\\\":${elem.rot}}`);\\n            ns.tprint(`\\\\n{\\\"height\\\": ${height}, \\\"width\\\": ${width}, \\\"fragments\\\": [\\\\n    ${strFragments.join(\\\",\\\\n    \\\")}\\\\n]}`);\\n        }\\n}\\n\\n/** @param {NS} ns */\\nfunction tlog(ns, prefix, format, ...args) {\\n    ns.tprintf(prefix + \\\": \\\" + format, ...args);\\n}\\n\\n\\n/** @param {NS} ns\\n *  @param {number} width\\n *  @param {number} height\\n *  @param {Fragment[]} statFrags\\n *  @param {Fragment[]} boosterFrags */\\nasync function planFragments(ns, width, height, statFrags, boosterFrags) {\\n    const t0 = performance.now();\\n    /** @type {Placement[]} */\\n    const placements = [];\\n    /** @type {Placement[]} */\\n    const statPlacements = [];\\n    /** @type {Placement[]} */\\n    const boosterPlacements = [];\\n    /** @type {Map<number, Placement[]>} */\\n    const statFragsPlacements = new Map(statFrags.map(frag => [frag.id, []]));\\n    /** @type {Map<number, Placement[]>} */\\n    const boosterFragsPlacements = new Map(boosterFrags.map(frag => [frag.id, []]));\\n    /** @type {number[][][]} */\\n    //const overlapping = [...new Array(width)].map(() => [...new Array(height)].map(() => []));\\n\\n    let statSeqn = 0, boosterSeqn = 0;\\n    for (let x = 0; x < width; x++) {\\n        await ns.sleep(0); // Don't hang the game\\n        for (let y = 0; y < height; y++) {\\n            for (let rot = 0; rot < 4; rot++) {\\n                for (const frag of [...statFrags, ...boosterFrags]) {\\n                    const coords = coverage(x, y, rot, frag)\\n                    if (coords.every(([x, y]) => x < width && y < height)) {\\n                        const key = frag.type == FragmentType.Booster ? boosterSeqn++ : statSeqn++; //`${frag.id}@${x}-${y}-${rot}`;\\n                        const placement = {\\n                            key, fragment: frag, x, y, rot,\\n                            coords, adjacent: adjacents(width, height, coords)\\n                        };\\n\\n                        placements.push(placement);\\n                        if (frag.type == FragmentType.Booster) {\\n                            boosterPlacements[key] = placement;\\n                            boosterFragsPlacements.get(frag.id).push(placement);\\n                        }\\n                        else {\\n                            statPlacements[key] = placement;\\n                            statFragsPlacements.get(frag.id).push(placement);\\n                        }\\n\\n                        //coords.forEach(([x, y]) => overlapping[x][y].push(key));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    ns.tprint(`Placements: ${placements.length}`)\\n\\n    // Canonise coordinate arrays so we can use equality comparisons on them\\n    const canonicalCoords = [...new Array(width)].map((_, x) => [...new Array(height)].map((_, y) => [x, y]));\\n    for (const placement of placements) {\\n        placement.coords = placement.coords.map(([x, y]) => canonicalCoords[x][y]);\\n        placement.adjacent = placement.adjacent.map(([x, y]) => canonicalCoords[x][y]);\\n    }\\n\\n    // Pre-compute all adjacencies\\n    for (const placement of placements) {\\n        placement.adjacentBoosters = [];\\n        placement.adjacentStats = [];\\n        placement.overlapWithBoosters = [];\\n        placement.overlapWithStats = [];\\n        for (const other of boosterPlacements) {\\n            if (placement.coords.some(coord => other.adjacent.includes(coord)))\\n                placement.adjacentBoosters.push(other.key);\\n            if (placement.coords.some(coord => other.coords.includes(coord))) {\\n                placement.overlapWithBoosters.push(other.key);\\n            }\\n        }\\n        for (const other of statPlacements) {\\n            if (placement.coords.some(coord => other.adjacent.includes(coord)))\\n                placement.adjacentStats.push(other.key);\\n            if (placement.coords.some(coord => other.coords.includes(coord))) {\\n                placement.overlapWithStats.push(other.key);\\n            }\\n        }\\n    }\\n\\n    // Turn arrays to fixed type, now that we know their contents\\n    for (const placement of placements) {\\n        placement.adjacentBoosters = Int16Array.from(placement.adjacentBoosters);\\n        placement.adjacentStats = Int16Array.from(placement.adjacentStats);\\n        placement.overlapWithBoosters = Int16Array.from(placement.overlapWithBoosters);\\n        placement.overlapWithStats = Int16Array.from(placement.overlapWithStats);\\n    }\\n\\n    // Exclude rotational symmetries from search by only using\\n    // - rot 0 placements if the board is square\\n    // - rot 0 and rot 1 placements if the board is non-square\\n    // of the first fragment\\n    // Select the stat fragment with most potential placements as the first fragment,\\n    // to get the biggest reduction of search space\\n    const statFragsKeys = [...statFrags]\\n        //.sort((a, b) => statFragsPlacements.get(b.id).length - statFragsPlacements.get(a.id).length)\\n        .map(frag => statFragsPlacements.get(frag.id).map(placement => placement.key));\\n    statFragsKeys[0] = statFragsKeys[0].filter(key =>\\n        width == height ? statPlacements[key].rot == 0 : (statPlacements[key].rot == 0 || statPlacements[key].rot == 1));\\n\\n    /// Compute stat fragment layout that maximises potential stat-booster fragment adjacencies\\n    const blockedStats0 = new Uint8Array(statPlacements.length);\\n    const blockedBoosters0 = new Uint8Array(boosterPlacements.length);\\n    const boosterStatAdjacencies0 = new Uint8Array(boosterPlacements.length);\\n    const plan0 = { stats: [], boosters: [] };\\n    const bestResult0 = [-Infinity, { stats: [...plan0.stats], boosters: [...plan0.boosters] }];\\n\\n    planStatsCount = 0;\\n    planBoostersCount = 0;\\n    const t1 = performance.now();\\n    const [score, plan] = await planStats(ns, statPlacements, boosterPlacements, statFragsKeys,\\n        blockedStats0, plan0, bestResult0, blockedBoosters0, boosterStatAdjacencies0);\\n    const t2 = performance.now();\\n\\n    tlog(ns, \\\"DEBUG\\\", \\\"Computed Stanek plan. Prep work %.3fmsec, layout search %.3fmsec, %d planStats calls, %d planBoosters calls\\\",\\n        t1 - t0, t2 - t1, planStatsCount, planBoostersCount);\\n\\n    return [score, plan];\\n}\\n\\n/** @param {NS} ns\\n *  @param {Placement[]} statPlacements\\n *  @param {Placement[]} boosterPlacements\\n *  @param {number[][]} statFragsKeys - the remaining desired fragment ids to be placed on the board\\n *  @param {Uint8Array} blockedStats\\n *  @param {Plan} plan\\n *  @param {[number, Plan]} bestResult\\n *  @param {Uint8Array} blockedBoosters\\n *  @param {Uint8Array} boosterStatAdjacencies\\n *  @return {[number, Plan, Uint8Array, Uint8Array]} */\\nasync function planStats(ns, statPlacements, boosterPlacements, statFragsKeys, blockedStats, plan, bestResult, blockedBoosters, boosterStatAdjacencies) {\\n    planStatsCount++;\\n    if (planStatsCount % 100000 == 0)\\n        await ns.sleep(0); // Don't hang the game\\n\\n    let [currentBestScore, _] = bestResult;\\n    currentBestScore = currentBestScore || 0;\\n\\n    // If at least one fragment has been placed, see what the best score is we can get by adding boosters\\n    if (plan.stats.length > 0) {\\n        // Mark boosters that are not blocked, but also not adjacent to a stat fragment as unavailable\\n        // and count the remaining available boosters\\n        let availableBoostersCount = 0;\\n        for (let i = 0; i < blockedBoosters.length; i++) {\\n            if (boosterStatAdjacencies[i] === 0) // No adjacent stat fragments => block\\n                blockedBoosters[i]++;\\n            else if (blockedBoosters[i] === 0) // Has adjacent stat fragments, and not blocked\\n                availableBoostersCount++;\\n        }\\n\\n        const [boosterScore, boosterPlan] = planBoosters(plan, boosterPlacements, boosterStatAdjacencies,\\n            blockedBoosters, availableBoostersCount, 0, bestResult);\\n\\n        // Undo changes\\n        for (let i = 0; i < blockedBoosters.length; i++)\\n            if (boosterStatAdjacencies[i] === 0)\\n                blockedBoosters[i]--;\\n\\n        if (boosterScore || 0 > currentBestScore) {\\n            bestResult = [boosterScore, boosterPlan];\\n            currentBestScore = boosterScore;\\n        }\\n    }\\n    // If there are fragments left to place, recurse to see if we can improve the score by placing more\\n    if (statFragsKeys.length > 0) {\\n        for (const key of statFragsKeys[0]) {\\n            if (blockedStats[key] !== 0) continue;\\n            const placement = statPlacements[key];\\n            const adjacentBoosters = placement.adjacentBoosters;\\n            const overlapWithBoosters = placement.overlapWithBoosters;\\n            const overlapWithStats = placement.overlapWithStats;\\n\\n            // Add the fragment placement to plan and update usability in-place to account for the new blocks\\n            plan.stats.push(placement);\\n            for (let i = 0; i < overlapWithStats.length; i++)\\n                blockedStats[overlapWithStats[i]]++;\\n            for (let i = 0; i < overlapWithBoosters.length; i++)\\n                blockedBoosters[overlapWithBoosters[i]]++;\\n            for (let i = 0; i < adjacentBoosters.length; i++)\\n                boosterStatAdjacencies[adjacentBoosters[i]]++;\\n\\n            // Find and score best plan that includes this fragment placement\\n            const [bestPlanScore, bestPlan] = await planStats(ns, statPlacements, boosterPlacements, statFragsKeys.slice(1),\\n                blockedStats, plan, bestResult, blockedBoosters, boosterStatAdjacencies);\\n            if (bestPlanScore || 0 > currentBestScore)\\n                bestResult = [bestPlanScore, bestPlan];\\n\\n            // Undo the changes\\n            plan.stats.pop();\\n            for (let i = 0; i < overlapWithStats.length; i++)\\n                blockedStats[overlapWithStats[i]]--;\\n            for (let i = 0; i < overlapWithBoosters.length; i++)\\n                blockedBoosters[overlapWithBoosters[i]]--;\\n            for (let i = 0; i < adjacentBoosters.length; i++)\\n                boosterStatAdjacencies[adjacentBoosters[i]]--;\\n        }\\n    }\\n\\n    return bestResult;\\n}\\n\\n/** @param {Plan} plan\\n *  @param {Placement[]} boosterPlacements\\n *  @param {Uint8Array} boosterStatAdjacencies\\n *  @param {Uint8Array} blockedBoosters\\n *  @param {number} availableCount\\n *  @param {number} startIdx\\n *  @param {[number, Plan]} bestResult\\n *  @return {[number, Plan]} */\\nfunction planBoosters(plan, boosterPlacements, boosterStatAdjacencies, blockedBoosters, availableCount, startIdx, bestResult) {\\n    planBoostersCount++;\\n    if (availableCount == 0) {\\n        const { stats, boosters } = plan;\\n\\n        let score = 0;\\n        for (let i = 0; i < boosters.length; i++)\\n            score += boosterStatAdjacencies[boosters[i].key];\\n        score = stats.length * (1 + 0.1 * score); // piecesPlaced*(1+0.1*numAdjacencies)\\n\\n        if (score > bestResult[0])\\n            return [score, { stats: [...stats], boosters: [...boosters] }]; // Clone plan\\n        else\\n            return bestResult;\\n    }\\n\\n    for (let i = startIdx; i < blockedBoosters.length; i++) {\\n        if (blockedBoosters[i] !== 0) continue;\\n        const placement = boosterPlacements[i];\\n        const overlapWithBoosters = placement.overlapWithBoosters;\\n\\n        // Add the fragment placement to plan and update usability in-place to account for the new blocks\\n        plan.boosters.push(placement);\\n        for (let j = 0; j < overlapWithBoosters.length; j++)\\n            if ((blockedBoosters[overlapWithBoosters[j]]++) === 0) availableCount--; // Placement became blocked?\\n\\n        // Find and score best plan that includes this fragment placement\\n        bestResult = planBoosters(plan, boosterPlacements, boosterStatAdjacencies, blockedBoosters, availableCount, i + 1, bestResult);\\n\\n        // Undo the changes\\n        plan.boosters.pop();\\n        for (let j = 0; j < overlapWithBoosters.length; j++)\\n            if ((--blockedBoosters[overlapWithBoosters[j]]) === 0) availableCount++; // Placement became free?\\n    }\\n\\n    return bestResult;\\n}\\n\\n/** @param {number} x0\\n *  @param {number} y0\\n *  @param {number} rotation\\n *  @param {Fragment} fragment\\n *  @return {[number, number][]} */\\nfunction coverage(x0, y0, rotation, fragment) {\\n    let shape = fragment.shape;\\n    for (let i = 0; i < rotation; i++)\\n        shape = shape[0].map((_, y) => shape.map((_, x) => shape[shape.length - 1 - x][y]));\\n\\n    return shape.map((row, y) => row.map((filled, x) => filled ? [x0 + x, y0 + y] : undefined))\\n        .flat()\\n        .filter(elem => elem != undefined);\\n}\\n\\n/** @param {number} width\\n *  @param {number} height\\n *  @param {[number, number][]} coords \\n *  @return {[number, number][]} */\\nfunction adjacents(width, height, coords) {\\n    const adjacent = [...new Array(width)].map(() => [...new Array(height)].map(() => false));\\n    // Mark grid squares adjacent to shape member squares\\n    for (const [x, y] of coords) {\\n        if (x - 1 >= 0) adjacent[x - 1][y] = true;\\n        if (x + 1 < width) adjacent[x + 1][y] = true;\\n        if (y - 1 >= 0) adjacent[x][y - 1] = true;\\n        if (y + 1 < height) adjacent[x][y + 1] = true;\\n    }\\n    // Strip out the shape squares themselves\\n    for (const [x, y] of coords)\\n        adjacent[x][y] = false;\\n\\n    return adjacent.map((col, x) => col.map((is, y) => is ? [x, y] : undefined))\\n        .flat()\\n        .filter(elem => elem != undefined);\\n}\",\"filename\":\"optimize-stanek.js\",\"server\":\"home\"}}],[\"optimize-stanek.js.og.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const FragmentType = {\\n  HackingChance: 2,\\n  HackingSpeed: 3,\\n  HackingMoney: 4,\\n  HackingGrow: 5,\\n  Hacking: 6,\\n  Strength: 7,\\n  Defense: 8,\\n  Dexterity: 9,\\n  Agility: 10,\\n  Charisma: 11,\\n  HacknetMoney: 12,\\n  HacknetCost: 13,\\n  Rep: 14,\\n  WorkMoney: 15,\\n  Crime: 16,\\n  Bladeburner: 17,\\n  Booster: 18,\\n}\\n\\nconst FragmentId = {\\n  Hacking1: 0,\\n  Hacking2: 1,\\n  HackingSpeed: 5,\\n  HackingMoney: 6,\\n  HackingGrow: 7,\\n  Strength: 10,\\n  Defense: 12,\\n  Dexterity: 14,\\n  Agility: 16,\\n  Charisma: 18,\\n  HacknetMoney: 20,\\n  HacknetCost: 21,\\n  Rep: 25,\\n  WorkMoney: 27,\\n  Crime: 28,\\n  Bladeburner: 30,\\n  //Booster1: 100,\\n  //Booster2: 101,\\n  //Booster3: 102,\\n  //Booster4: 103,\\n  //Booster5: 104,\\n  //Booster6: 105,\\n  //Booster7: 106,\\n  //Booster8: 107,\\n};\\n\\nlet planStatsCount = 0;\\nlet planBoostersCount = 0;\\n\\n/** @typedef {{ key: number, fragment: Fragment, x: number; y: number; rot: number;\\n  *             coords: [number, number][]; adjacent: [number, number][];\\n  *             adjacentBoosters: Int16Array; adjacentStats: Int16Array;\\n  *             overlapWithBoosters: Int16Array; overlapWithStats: Int16Array }} Placement */\\n/** @typedef {{ stats: Placement[]; boosters: Placement[] }} Plan */\\n\\nexport function autocomplete(data, args) {\\n  return [...Object.keys(FragmentId)];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  /*\\n  if (ns.args.length == 0) {\\n    tlog(ns, \\\"ERROR\\\", \\\"At least one fragment type required\\\");\\n    return;\\n  }\\n  if (!ns.args.every(arg => Object.keys(FragmentType).includes(arg))) {\\n    tlog(\\\"ERROR\\\", \\\"Invalid fragment type(s): %s\\\",\\n      ns.args.filter(arg => !Object.keys(FragmentType).includes(arg)));\\n    return;\\n  }*/\\n\\n  // 1. Set up priority order of stat fragments to include\\n  const targetIds = [FragmentId.Rep, FragmentId.Hacking2];\\n  const allFragments = ns.stanek.fragmentDefinitions();\\n  const statFrags = allFragments.filter(frag => targetIds.includes(frag.id));\\n  const boosterFrags = allFragments.filter(frag => frag.type == FragmentType.Booster);\\n\\n  // 2. Pick dimensions (why not pick many!)\\n  const height = 3; //ns.stanek.giftHeight()\\n  const width = 3; //ns.stanek.giftWidth(); // NOTE: Width is always the same, or one more than height.\\n  const [score, plan] = await planFragments(ns, width, height, statFrags, boosterFrags);\\n  ns.tprint(score);\\n  const strFragments = [];\\n  // Output the layout so you can stick it in a database\\n  for (const elem of [...plan.stats, ...plan.boosters])\\n    strFragments.push(`{\\\"id\\\":${elem.fragment.id},\\\"x\\\":${elem.x},\\\"y\\\":${elem.y},\\\"rotation\\\":${elem.rot}}`);\\n  ns.tprint(`\\\\n{\\\"height\\\": ${height}, \\\"width\\\": ${width}, \\\"fragments\\\": [\\\\n    ${strFragments.join(\\\",\\\\n    \\\")}\\\\n]}`);\\n}\\n\\n/** @param {NS} ns */\\nfunction tlog(ns, prefix, format, ...args) {\\n  ns.tprintf(prefix + \\\": \\\" + format, ...args);\\n}\\n\\n/** @param {NS} ns\\n *  @param {number} width\\n *  @param {number} height\\n *  @param {Fragment[]} statFrags\\n *  @param {Fragment[]} boosterFrags */\\nasync function planFragments(ns, width, height, statFrags, boosterFrags) {\\n  const t0 = performance.now();\\n  /** @type {Placement[]} */\\n  const placements = [];\\n  /** @type {Placement[]} */\\n  const statPlacements = [];\\n  /** @type {Placement[]} */\\n  const boosterPlacements = [];\\n  /** @type {Map<number, Placement[]>} */\\n  const statFragsPlacements = new Map(statFrags.map(frag => [frag.id, []]));\\n  /** @type {Map<number, Placement[]>} */\\n  const boosterFragsPlacements = new Map(boosterFrags.map(frag => [frag.id, []]));\\n  /** @type {number[][][]} */\\n  //const overlapping = [...new Array(width)].map(() => [...new Array(height)].map(() => []));\\n\\n  let statSeqn = 0, boosterSeqn = 0;\\n  for (const frag of [...statFrags, ...boosterFrags]) {\\n    for (const { rot, mask } of rotations(frag)) {\\n      for (let x = 0; x < width; x++) {\\n        for (let y = 0; y < height; y++) {\\n          const coords = mask.map(([x0, y0]) => [x0 + x, y0 + y]);\\n          if (coords.every(([x, y]) => x < width && y < height)) {\\n            const key = frag.type == FragmentType.Booster ? boosterSeqn++ : statSeqn++; //`${frag.id}@${x}-${y}-${rot}`;\\n            const placement = {\\n              key, fragment: frag, x, y, rot,\\n              coords, adjacent: adjacents(width, height, coords)\\n            };\\n\\n            placements.push(placement);\\n            if (frag.type == FragmentType.Booster) {\\n              boosterPlacements[key] = placement;\\n              boosterFragsPlacements.get(frag.id).push(placement);\\n            }\\n            else {\\n              statPlacements[key] = placement;\\n              statFragsPlacements.get(frag.id).push(placement);\\n            }\\n\\n            //coords.forEach(([x, y]) => overlapping[x][y].push(key));\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  // Canonise coordinate arrays so we can use equality comparisons on them\\n  const canonicalCoords = [...new Array(width)].map((_, x) => [...new Array(height)].map((_, y) => [x, y]));\\n  for (const placement of placements) {\\n    placement.coords = placement.coords.map(([x, y]) => canonicalCoords[x][y]);\\n    placement.adjacent = placement.adjacent.map(([x, y]) => canonicalCoords[x][y]);\\n  }\\n\\n  // Pre-compute all adjacencies\\n  for (const placement of placements) {\\n    placement.adjacentBoosters = [];\\n    placement.adjacentStats = [];\\n    placement.overlapWithBoosters = [];\\n    placement.overlapWithStats = [];\\n    for (const other of boosterPlacements) {\\n      if (placement.coords.some(coord => other.adjacent.includes(coord)))\\n        placement.adjacentBoosters.push(other.key);\\n      if (placement.coords.some(coord => other.coords.includes(coord))) {\\n        placement.overlapWithBoosters.push(other.key);\\n      }\\n    }\\n    for (const other of statPlacements) {\\n      if (placement.coords.some(coord => other.adjacent.includes(coord)))\\n        placement.adjacentStats.push(other.key);\\n      if (placement.coords.some(coord => other.coords.includes(coord))) {\\n        placement.overlapWithStats.push(other.key);\\n      }\\n    }\\n  }\\n\\n  // Turn arrays to fixed type, now that we know their contents\\n  for (const placement of placements) {\\n    placement.adjacentBoosters = Int16Array.from(placement.adjacentBoosters);\\n    placement.adjacentStats = Int16Array.from(placement.adjacentStats);\\n    placement.overlapWithBoosters = Int16Array.from(placement.overlapWithBoosters);\\n    placement.overlapWithStats = Int16Array.from(placement.overlapWithStats);\\n  }\\n\\n  // Exclude rotational symmetries from search by only using\\n  // - rot 0 placements if the board is square\\n  // - rot 0 and rot 1 placements if the board is non-square\\n  // of the first fragment\\n  // Select the stat fragment with most potential placements as the first fragment,\\n  // to get the biggest reduction of search space\\n  const statFragsKeys = [...statFrags]\\n    .sort((a, b) => statFragsPlacements.get(b.id).length - statFragsPlacements.get(a.id).length)\\n    .map(frag => statFragsPlacements.get(frag.id).map(placement => placement.key));\\n  statFragsKeys[0] = statFragsKeys[0].filter(key =>\\n    width == height ? statPlacements[key].rot == 0 : (statPlacements[key].rot == 0 || statPlacements[key].rot == 1));\\n\\n  /// Compute stat fragment layout that maximises potential stat-booster fragment adjacencies\\n  const blockedStats0 = new Uint8Array(statPlacements.length);\\n  const blockedBoosters0 = new Uint8Array(boosterPlacements.length);\\n  const boosterStatAdjacencies0 = new Uint8Array(boosterPlacements.length);\\n  const plan0 = { stats: [], boosters: [] };\\n  const bestResult0 = [-Infinity, { stats: [...plan0.stats], boosters: [...plan0.boosters] }];\\n\\n  planStatsCount = 0;\\n  planBoostersCount = 0;\\n  const t1 = performance.now();\\n  const [score, plan] = planStats(ns, statPlacements, boosterPlacements, statFragsKeys,\\n    blockedStats0, blockedBoosters0, boosterStatAdjacencies0, plan0, bestResult0);\\n  const t2 = performance.now();\\n\\n  tlog(ns, \\\"DEBUG\\\", \\\"Computed Stanek plan. Prep work %.3fmsec, layout search %.3fmsec, %d planStats calls, %d planBoosters calls\\\",\\n    t1 - t0, t2 - t1, planStatsCount, planBoostersCount);\\n\\n  return [score, plan];\\n}\\n\\n/** @param {NS} ns\\n *  @param {Placement[]} statPlacements\\n *  @param {Placement[]} boosterPlacements\\n *  @param {number[][]} statFragsKeys\\n *  @param {Uint8Array} blockedStats\\n *  @param {Plan} plan\\n *  @param {[number, Plan]} bestResult\\n *  @param {Uint8Array} blockedBoosters\\n *  @param {Uint8Array} boosterStatAdjacencies\\n *  @return {[number, Plan, Uint8Array, Uint8Array]} */\\nfunction planStats(ns, statPlacements, boosterPlacements, statFragsKeys, blockedStats, blockedBoosters, boosterStatAdjacencies, plan, bestResult) {\\n  planStatsCount++;\\n  if (statFragsKeys.length == 0) {\\n    // Mark boosters that are not blocked, but also not adjacent to a stat fragment as unavailable\\n    // and count the remaining available boosters\\n    let availableBoostersCount = 0;\\n    for (let i = 0; i < blockedBoosters.length; i++) {\\n      if (boosterStatAdjacencies[i] === 0) // No adjacent stat fragments => block\\n        blockedBoosters[i]++;\\n      else if (blockedBoosters[i] === 0) // Has adjacent stat fragments, and not blocked\\n        availableBoostersCount++;\\n    }\\n\\n    const result = planBoosters(plan, boosterPlacements, boosterStatAdjacencies,\\n      blockedBoosters, availableBoostersCount, 0, bestResult);\\n\\n    // Undo changes\\n    for (let i = 0; i < blockedBoosters.length; i++)\\n      if (boosterStatAdjacencies[i] === 0)\\n        blockedBoosters[i]--;\\n\\n    return result;\\n  }\\n\\n  for (const key of statFragsKeys[0]) {\\n    if (blockedStats[key] !== 0) continue;\\n    const placement = statPlacements[key];\\n    const adjacentBoosters = placement.adjacentBoosters;\\n    const overlapWithBoosters = placement.overlapWithBoosters;\\n    const overlapWithStats = placement.overlapWithStats;\\n\\n    // Add the fragment placement to plan and update usability in-place to account for the new blocks\\n    plan.stats.push(placement);\\n    for (let i = 0; i < overlapWithStats.length; i++)\\n      blockedStats[overlapWithStats[i]]++;\\n    for (let i = 0; i < overlapWithBoosters.length; i++)\\n      blockedBoosters[overlapWithBoosters[i]]++;\\n    for (let i = 0; i < adjacentBoosters.length; i++)\\n      boosterStatAdjacencies[adjacentBoosters[i]]++;\\n\\n    // Find and score best plan that includes this fragment placement\\n    bestResult = planStats(ns, statPlacements, boosterPlacements, statFragsKeys.slice(1),\\n      blockedStats, blockedBoosters, boosterStatAdjacencies, plan, bestResult);\\n\\n    // Undo the changes\\n    plan.stats.pop();\\n    for (let i = 0; i < overlapWithStats.length; i++)\\n      blockedStats[overlapWithStats[i]]--;\\n    for (let i = 0; i < overlapWithBoosters.length; i++)\\n      blockedBoosters[overlapWithBoosters[i]]--;\\n    for (let i = 0; i < adjacentBoosters.length; i++)\\n      boosterStatAdjacencies[adjacentBoosters[i]]--;\\n  }\\n\\n  return bestResult;\\n}\\n\\n/** @param {Plan} plan\\n *  @param {Placement[]} boosterPlacements\\n *  @param {Uint8Array} boosterStatAdjacencies\\n *  @param {Uint8Array} blockedBoosters\\n *  @param {number} availableCount\\n *  @param {number} startIdx\\n *  @param {[number, Plan]} bestResult\\n *  @return {[number, Plan]} */\\nfunction planBoosters(plan, boosterPlacements, boosterStatAdjacencies, blockedBoosters, availableCount, startIdx, bestResult) {\\n  planBoostersCount++;\\n  if (availableCount == 0) {\\n    const { stats, boosters } = plan;\\n\\n    let score = 0;\\n    for (let i = 0; i < boosters.length; i++)\\n      score += boosterStatAdjacencies[boosters[i].key];\\n\\n    if (score > bestResult[0])\\n      return [score, { stats: [...stats], boosters: [...boosters] }]; // Clone plan\\n    else\\n      return bestResult;\\n  }\\n\\n  for (let i = startIdx; i < blockedBoosters.length; i++) {\\n    if (blockedBoosters[i] !== 0) continue;\\n    const placement = boosterPlacements[i];\\n    const overlapWithBoosters = placement.overlapWithBoosters;\\n\\n    // Add the fragment placement to plan and update usability in-place to account for the new blocks\\n    plan.boosters.push(placement);\\n    for (let j = 0; j < overlapWithBoosters.length; j++)\\n      if ((blockedBoosters[overlapWithBoosters[j]]++) === 0) availableCount--; // Placement became blocked?\\n\\n    // Find and score best plan that includes this fragment placement\\n    bestResult = planBoosters(plan, boosterPlacements, boosterStatAdjacencies, blockedBoosters, availableCount, i + 1, bestResult);\\n\\n    // Undo the changes\\n    plan.boosters.pop();\\n    for (let j = 0; j < overlapWithBoosters.length; j++)\\n      if ((--blockedBoosters[overlapWithBoosters[j]]) === 0) availableCount++; // Placement became free?\\n  }\\n\\n  return bestResult;\\n}\\n\\n/** @param {Fragment} fragment\\n *  @return {{ rot: number; mask: [number, number][]}[]} */\\nfunction rotations(fragment) {\\n  function shapeEq(s1, s2) {\\n    if (s1.length != s2.length)\\n      return false;\\n    for (let i = 0; i < s1.length; i++) {\\n      if (s1[i].length != s2[i].length)\\n        return false;\\n      for (let j = 0; j < s1[i].length; j++)\\n        if (s1[i][j] != s2[i][j])\\n          return false;\\n    }\\n    return true;\\n  }\\n\\n  let shape = fragment.shape;\\n  const rotMasks = [{ rot: 0, mask: shape }];\\n  for (let i = 1; i < 4; i++) {\\n    shape = shape[0].map((_, y) => shape.map((_, x) => shape[shape.length - 1 - x][y]));\\n    if (!rotMasks.some(({ mask }) => shapeEq(shape, mask)))\\n      rotMasks.push({ rot: i, mask: shape.map(row => [...row]) });\\n  }\\n\\n  for (const rotMask of rotMasks)\\n    rotMask.mask = rotMask.mask.map((row, y) => row.map((filled, x) => filled ? [x, y] : undefined))\\n      .flat()\\n      .filter(elem => elem != undefined);\\n\\n  return rotMasks;\\n}\\n\\n/** @param {number} width\\n *  @param {number} height\\n *  @param {[number, number][]} coords \\n *  @return {[number, number][]} */\\nfunction adjacents(width, height, coords) {\\n  const adjacent = [...new Array(width)].map(() => [...new Array(height)].map(() => false));\\n  // Mark grid squares adjacent to shape member squares\\n  for (const [x, y] of coords) {\\n    if (x - 1 >= 0) adjacent[x - 1][y] = true;\\n    if (x + 1 < width) adjacent[x + 1][y] = true;\\n    if (y - 1 >= 0) adjacent[x][y - 1] = true;\\n    if (y + 1 < height) adjacent[x][y + 1] = true;\\n  }\\n  // Strip out the shape squares themselves\\n  for (const [x, y] of coords)\\n    adjacent[x][y] = false;\\n\\n  return adjacent.map((col, x) => col.map((is, y) => is ? [x, y] : undefined))\\n    .flat()\\n    .filter(elem => elem != undefined);\\n}\",\"filename\":\"optimize-stanek.js.og.js\",\"server\":\"home\"}}],[\"reserve.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { parseShortNumber } from './helpers.js'\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let parsed = parseShortNumber(ns.args[0]);\\n    await ns.write('reserve.txt', parsed, \\\"w\\\");\\n    ns.tprint(`Set to reserve ${parsed.toLocaleString('en')}`);\\n}\\n\",\"filename\":\"reserve.js\",\"server\":\"home\"}}],[\"run-command.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { runCommand } from './helpers.js'\\n\\nconst escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n\\n/** @param {NS} ns \\n * The argument can consist of multiple commands to run. The output of the first command will automatically be printed\\n * unless a subsequent command includes '; output = ...' - in which case that result will be printed instead. **/\\nexport async function main(ns) {\\n    let args = ns.args;\\n    if (args.length == 0)\\n        return ns.tprint(\\\"You must run this script with an argument that is the code to test.\\\")\\n    // Special first argument of -s will result in \\\"silent\\\" mode - do not output the result in the success case\\n    let silent = false;\\n    if (args.includes('-s')) {\\n        silent = true;\\n        args = args.slice(args.indexOf('-s'), 1);\\n    }\\n    const firstArg = String(args[0]);\\n    const escaped = escapeChars.some(c => firstArg.startsWith(c) && firstArg.endsWith(c));\\n    let command = args == escaped ? args[0] : args.join(\\\" \\\"); // If args weren't escaped, join them together\\n    // To avoid confusion, strip out any trailing spaces / semicolons\\n    command = command.trim();\\n    if (command.endsWith(';')) command = command.slice(0, -1);\\n    // If the command appears to contian multiple statements, cleverly (and perhaps perilously)\\n    // see if we can inject a return statement so that we can get the return value of the last statement\\n    if (command.includes(';')) {\\n        const lastStatement = command.lastIndexOf(';');\\n        if (!command.slice(lastStatement + 1).trim().startsWith('return'))\\n            command = command.slice(0, lastStatement + 1) + `return ` + command.slice(lastStatement + 1);\\n        // Create a scope around multi-statement commands so they can be used in a lambda\\n        command = `{ ${command} }`;\\n    }\\n    // Wrapping the command in a lambda that can capture and print its output.\\n    command = `ns.tprint(JSON.stringify(await (async () => ${command})() ?? \\\"(no output)\\\", null, 2))`;\\n    await ns.write(`/Temp/terminal-command.js`, \\\"\\\", \\\"w\\\"); // Clear the previous command file to avoid a warning about re-using temp script names. This is the one exception.\\n    return await runCommand(ns, command, `/Temp/terminal-command.js`, (escaped ? args.slice(1) : undefined), !silent);\\n}\",\"filename\":\"run-command.js\",\"server\":\"home\"}}],[\"scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns\\n * @returns interactive server map\\n */\\nexport function main(ns) {\\n    const factionServers = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"w0r1d_d43m0n\\\", \\\"fulcrumassets\\\"],\\n        css = `    <style id=\\\"scanCSS\\\">\\n        .serverscan {white-space:pre; color:#ccc; font:14px monospace; line-height: 16px; }\\n        .serverscan .server {color:#080;cursor:pointer;text-decoration:underline}\\n        .serverscan .faction {color:#088}\\n        .serverscan .rooted {color:#6f3}\\n        .serverscan .rooted.faction {color:#0ff}\\n        .serverscan .rooted::before {color:#6f3}\\n        .serverscan .hack {display:inline-block; font:12px monospace}\\n        .serverscan .red {color:red;}\\n        .serverscan .green {color:green;}\\n        .serverscan .backdoor {color:#6f3; font:12px monospace}\\n        .serverscan .backdoor > a {cursor:pointer; text-decoration:underline;}\\n        .serverscan .cct {color:#0ff;}\\n    </style>`,\\n        doc = eval(\\\"document\\\"),\\n        terminalInsert = html => doc.getElementById(\\\"terminal\\\").insertAdjacentHTML('beforeend', `<li>${html}</li>`),\\n        terminalInput = doc.getElementById(\\\"terminal-input\\\"),\\n        terminalEventHandlerKey = Object.keys(terminalInput)[1],\\n        setNavCommand = async inputValue => {\\n            terminalInput.value = inputValue\\n            terminalInput[terminalEventHandlerKey].onChange({ target: terminalInput })\\n            terminalInput.focus()\\n            await terminalInput[terminalEventHandlerKey].onKeyDown({ key: 'Enter', preventDefault: () => 0 })\\n        },\\n        myHackLevel = ns.getHackingLevel(),\\n        serverInfo = (serverName) => {\\n            // Costs 2 GB. If you can't don't need backdoor links, uncomment and use the alternate implementations below\\n            return ns.getServer(serverName)\\n            /* return {\\n                requiredHackingSkill: ns.getServerRequiredHackingLevel(serverName),\\n                hasAdminRights: ns.hasRootAccess(serverName),\\n                purchasedByPlayer: serverName.includes('daemon') || serverName.includes('hacknet'),\\n                backdoorInstalled: true // No way of knowing without ns.getServer\\n            } */\\n        },\\n        createServerEntry = serverName => {\\n            let server = serverInfo(serverName),\\n                requiredHackLevel = server.requiredHackingSkill,\\n                rooted = server.hasAdminRights,\\n                canHack = requiredHackLevel <= myHackLevel,\\n                shouldBackdoor = !server?.backdoorInstalled && canHack && serverName != 'home' && rooted && !server.purchasedByPlayer,\\n                contracts = ns.ls(serverName, \\\".cct\\\")\\n\\n            return `<span id=\\\"${serverName}\\\">`\\n                + `<a class=\\\"server${factionServers.includes(serverName) ? \\\" faction\\\" : \\\"\\\"}`\\n                + `${rooted ? \\\" rooted\\\" : \\\"\\\"}\\\">${serverName}</a>`\\n                + (server.purchasedByPlayer ? '' : ` <span class=\\\"hack ${(canHack ? 'green' : 'red')}\\\">(${requiredHackLevel})</span>`)\\n                + `${(shouldBackdoor ? ' <span class=\\\"backdoor\\\">[<a>backdoor</a>]</span>' : '')}`\\n                + ` ${contracts.map(c => `<span class=\\\"cct\\\" title=\\\"${c}\\\">@</span>`)}`\\n                + \\\"</span>\\\"\\n        },\\n        buildOutput = (parent = servers[0], prefix = [\\\"\\\\n\\\"]) => {\\n            let output = prefix.join(\\\"\\\") + createServerEntry(parent)\\n            for (let i = 0; i < servers.length; i++) {\\n                if (parentByIndex[i] != parent) continue\\n                let newPrefix = prefix.slice()\\n                const appearsAgain = parentByIndex.slice(i + 1).includes(parentByIndex[i]),\\n                    lastElementIndex = newPrefix.length - 1\\n\\n                newPrefix.push(appearsAgain ? \\\"├╴\\\" : \\\"└╴\\\")\\n\\n                newPrefix[lastElementIndex] = newPrefix[lastElementIndex].replace(\\\"├╴\\\", \\\"│ \\\").replace(\\\"└╴\\\", \\\"  \\\")\\n                output += buildOutput(servers[i], newPrefix)\\n            }\\n\\n            return output\\n        },\\n        ordering = (serverA, serverB) => {\\n            // Sort servers with fewer connections towards the top.\\n            let orderNumber = ns.scan(serverA).length - ns.scan(serverB).length\\n            // Purchased servers to the very top\\n            orderNumber = orderNumber != 0 ? orderNumber\\n                : serverInfo(serverB).purchasedByPlayer - serverInfo(serverA).purchasedByPlayer\\n            // Hack: compare just the first 2 chars to keep purchased servers in order purchased\\n            orderNumber = orderNumber != 0 ? orderNumber\\n                : serverA.slice(0, 2).toLowerCase().localeCompare(serverB.slice(0, 2).toLowerCase())\\n\\n            return orderNumber\\n        }\\n\\n    // refresh css (in case it changed)\\n    doc.getElementById(\\\"scanCSS\\\")?.remove()\\n    doc.head.insertAdjacentHTML('beforeend', css)\\n    let servers = [\\\"home\\\"],\\n        parentByIndex = [\\\"\\\"],\\n        routes = { home: \\\"home\\\" }\\n    for (let server of servers)\\n        for (let oneScanResult of ns.scan(server).sort(ordering))\\n            if (!servers.includes(oneScanResult)) {\\n                const backdoored = serverInfo(oneScanResult)?.backdoorInstalled\\n                servers.push(oneScanResult)\\n                parentByIndex.push(server)\\n                routes[oneScanResult] = backdoored ? \\\"connect \\\" + oneScanResult : routes[server] + \\\";connect \\\" + oneScanResult\\n            }\\n\\n    terminalInsert(`<div class=\\\"serverscan new\\\">${buildOutput()}</div>`)\\n    doc.querySelectorAll(\\\".serverscan.new .server\\\").forEach(serverEntry => serverEntry\\n        .addEventListener('click', setNavCommand.bind(null, routes[serverEntry.childNodes[0].nodeValue])))\\n    doc.querySelectorAll(\\\".serverscan.new .backdoor\\\").forEach(backdoorButton => backdoorButton\\n        .addEventListener('click', setNavCommand.bind(null, routes[backdoorButton.parentNode.childNodes[0].childNodes[0].nodeValue] + \\\";backdoor\\\")))\\n    doc.querySelector(\\\".serverscan.new\\\").classList.remove(\\\"new\\\")\\n}\\n\",\"filename\":\"scan.js\",\"server\":\"home\"}}],[\"sleeve.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log, getConfiguration, instanceCount, disableLogs, getActiveSourceFiles, getNsDataThroughFile, runCommand, formatMoney, formatDuration } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['min-shock-recovery', 97], // Minimum shock recovery before attempting to train or do crime (Set to 100 to disable, 0 to recover fully)\\n    ['shock-recovery', 0.05], // Set to a number between 0 and 1 to devote that ratio of time to periodic shock recovery (until shock is at 0)\\n    ['crime', null], // If specified, sleeves will perform only this crime regardless of stats\\n    ['homicide-chance-threshold', 0.5], // Sleeves on crime will automatically start homicide once their chance of success exceeds this ratio\\n    ['disable-gang-homicide-priority', false], // By default, sleeves will do homicide to farm Karma until we're in a gang. Set this flag to disable this priority.\\n    ['aug-budget', 0.1], // Spend up to this much of current cash on augs per tick (Default is high, because these are permanent for the rest of the BN)\\n    ['buy-cooldown', 60 * 1000], // Must wait this may milliseconds before buying more augs for a sleeve\\n    ['min-aug-batch', 20], // Must be able to afford at least this many augs before we pull the trigger (or fewer if buying all remaining augs)\\n    ['reserve', null], // Reserve this much cash before determining spending budgets (defaults to contents of reserve.txt if not specified)\\n    ['disable-follow-player', false], // Set to true to disable having Sleeve 0 work for the same faction/company as the player to boost reputation gain rates\\n    ['disable-training', false], // Set to true to disable having sleeves workout at the gym (costs money)\\n    ['train-to-strength', 105], // Sleeves will go to the gym until they reach this much Str\\n    ['train-to-defense', 105], // Sleeves will go to the gym until they reach this much Def\\n    ['train-to-dexterity', 70], // Sleeves will go to the gym until they reach this much Dex\\n    ['train-to-agility', 70], // Sleeves will go to the gym until they reach this much Agi\\n    ['training-reserve', null], // Defaults to global reserve.txt. Can be set to a negative number to allow debt. Sleeves will not train if money is below this amount.\\n    ['training-cap-seconds', 2 * 60 * 60 /* 2 hours */], // Time since the start of the bitnode after which we will no longer attempt to train sleeves to their target \\\"train-to\\\" settings\\n    ['disable-spending-hashes-for-gym-upgrades', false], // Set to true to disable spending hashes on gym upgrades when training up sleeves.\\n    ['enable-bladeburner-team-building', false], // Set to true to have one sleeve support the main sleeve, and another do recruitment. Otherwise, they will just do more \\\"Infiltrate Synthoids\\\"\\n    ['disable-bladeburner', false], // Set to true to disable having sleeves workout at the gym (costs money)\\n    ['failed-bladeburner-contract-cooldown', 30 * 60 * 1000], // Default 30 minutes: time to wait after failing a bladeburner contract before we try again\\n];\\n\\nconst interval = 1000; // Update (tick) this often to check on sleeves and recompute their ideal task\\nconst rerollTime = 61000; // How often we re-roll for each sleeve's chance to be randomly placed on shock recovery\\nconst statusUpdateInterval = 10 * 60 * 1000; // Log sleeve status this often, even if their task hasn't changed\\nconst trainingReserveFile = '/Temp/sleeves-training-reserve.txt';\\nconst works = ['security', 'field', 'hacking']; // When doing faction work, we prioritize physical work since sleeves tend towards having those stats be highest\\nconst trainStats = ['strength', 'defense', 'dexterity', 'agility'];\\nconst sleeveBbContractNames = [\\\"Tracking\\\", \\\"Bounty Hunter\\\", \\\"Retirement\\\"];\\nconst minBbContracts = 2; // There should be this many contracts remaining before sleeves attempt them\\nconst minBbProbability = 0.99; // Player chance should be this high before sleeves attempt contracts\\nconst waitForContractCooldown = 60 * 1000; // 1 minute - Cooldown when contract count or probability gets too low\\n\\nlet cachedCrimeStats, workByFaction; // Cache of crime statistics and which factions support which work\\nlet task, lastStatusUpdateTime, lastPurchaseTime, lastPurchaseStatusUpdate, availableAugs, cacheExpiry,\\n    shockChance, lastRerollTime, bladeburnerCooldown, lastSleeveHp, lastSleeveShock; // State by sleeve\\nlet numSleeves, ownedSourceFiles, playerInGang, playerInBladeburner, bladeburnerCityChaos, bladeburnerContractChances, bladeburnerContractCounts, followPlayerSleeve;\\nlet options;\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions || await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n    disableLogs(ns, ['getServerMoneyAvailable']);\\n    // Ensure the global state is reset (e.g. after entering a new bitnode)\\n    task = [], lastStatusUpdateTime = [], lastPurchaseTime = [], lastPurchaseStatusUpdate = [], availableAugs = [],\\n        cacheExpiry = [], shockChance = [], lastRerollTime = [], bladeburnerCooldown = [], lastSleeveHp = [], lastSleeveShock = [];\\n    workByFaction = {}, cachedCrimeStats = {};\\n    playerInGang = playerInBladeburner = false;\\n    // Ensure we have access to sleeves\\n    ownedSourceFiles = await getActiveSourceFiles(ns);\\n    if (!(10 in ownedSourceFiles))\\n        return ns.tprint(\\\"WARNING: You cannot run sleeve.js until you do BN10.\\\");\\n    // Start the main loop\\n    while (true) {\\n        try { await mainLoop(ns); }\\n        catch (err) {\\n            log(ns, `WARNING: sleeve.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (err?.stack || '') + (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        await ns.sleep(interval);\\n    }\\n}\\n\\n/** @param {NS} ns \\n * Purchases augmentations for sleeves */\\nasync function manageSleeveAugs(ns, i, budget) {\\n    // Retrieve and cache the set of available sleeve augs (cached temporarily, but not forever, in case rules around this change)\\n    if (availableAugs[i] == null || Date.now() > cacheExpiry[i]) {\\n        cacheExpiry[i] = Date.now() + 60000;\\n        availableAugs[i] = (await getNsDataThroughFile(ns, `ns.sleeve.getSleevePurchasableAugs(ns.args[0])`,  // list of { name, cost }\\n            null, [i])).sort((a, b) => a.cost - b.cost);\\n    }\\n    if (availableAugs[i].length == 0) return 0;\\n\\n    const cooldownLeft = Math.max(0, options['buy-cooldown'] - (Date.now() - (lastPurchaseTime[i] || 0)));\\n    const [batchCount, batchCost] = availableAugs[i].reduce(([n, c], aug) => c + aug.cost <= budget ? [n + 1, c + aug.cost] : [n, c], [0, 0]);\\n    const purchaseUpdate = `sleeve ${i} can afford ${batchCount.toFixed(0).padStart(2)}/${availableAugs[i].length.toFixed(0).padEnd(2)} remaining augs ` +\\n        `(cost ${formatMoney(batchCost)} of ${formatMoney(availableAugs[i].reduce((t, aug) => t + aug.cost, 0))}).`;\\n    if (lastPurchaseStatusUpdate[i] != purchaseUpdate)\\n        log(ns, `INFO: With budget ${formatMoney(budget)}, ${(lastPurchaseStatusUpdate[i] = purchaseUpdate)} ` +\\n            `(Min batch size: ${options['min-aug-batch']}, Cooldown: ${formatDuration(cooldownLeft)})`);\\n    if (cooldownLeft == 0 && batchCount > 0 && ((batchCount >= availableAugs[i].length - 1) || batchCount >= options['min-aug-batch'])) { // Don't require the last aug it's so much more expensive\\n        let strAction = `Purchase ${batchCount}/${availableAugs[i].length} augmentations for sleeve ${i} at total cost of ${formatMoney(batchCost)}`;\\n        let toPurchase = availableAugs[i].splice(0, batchCount);\\n        if (await getNsDataThroughFile(ns, `ns.args.slice(1).reduce((s, aug) => s && ns.sleeve.purchaseSleeveAug(ns.args[0], aug), true)`,\\n            '/Temp/sleeve-purchase.txt', [i, ...toPurchase.map(a => a.name)])) {\\n            log(ns, `SUCCESS: ${strAction}`, true, 'success');\\n            [lastSleeveHp[i], lastSleeveShock[i]] = [undefined, undefined]; // Sleeve stats are reset on installation of augs, so forget saved health info\\n        } else log(ns, `ERROR: Failed to ${strAction}`, true, 'error');\\n        lastPurchaseTime[i] = Date.now();\\n        return batchCost; // Even if we think we failed, return the predicted cost so if the purchase did go through, we don't end up over-budget\\n    }\\n    return 0;\\n}\\n\\n/** @param {NS} ns\\n * @returns {Promise<Player>} the result of ns.getPlayer() */\\nasync function getPlayerInfo(ns) {\\n    return await getNsDataThroughFile(ns, `ns.getPlayer()`);\\n}\\n\\n/** @param {NS} ns\\n * @returns {Promise<{ type: \\\"COMPANY\\\"|\\\"FACTION\\\"|\\\"CLASS\\\"|\\\"CRIME\\\", cyclesWorked: number, crimeType: string, classType: string, location: string, companyName: string, factionName: string, factionWorkType: string }>} */\\nasync function getCurrentWorkInfo(ns) {\\n    return (await getNsDataThroughFile(ns, 'ns.singularity.getCurrentWork()')) ?? {};\\n}\\n\\n/** @param {NS} ns\\n * @param {number} numSleeves\\n * @returns {Promise<SleevePerson[]>} */\\nasync function getAllSleeves(ns, numSleeves) {\\n    return await getNsDataThroughFile(ns, `ns.args.map(i => ns.sleeve.getSleeve(i))`,\\n        `/Temp/sleeve-getSleeve-all.txt`, [...Array(numSleeves).keys()]);\\n}\\n\\n/** @param {NS} ns \\n * Main loop that gathers data, checks on all sleeves, and manages them. */\\nasync function mainLoop(ns) {\\n    // Update info\\n    numSleeves = await getNsDataThroughFile(ns, `ns.sleeve.getNumSleeves()`);\\n    const playerInfo = await getPlayerInfo(ns);\\n    // If we have not yet detected that we are in bladeburner, do that now (unless disabled)\\n    if (!options['disable-bladeburner'] && !playerInBladeburner)\\n        playerInBladeburner = await getNsDataThroughFile(ns, 'ns.bladeburner.inBladeburner()');\\n    const playerWorkInfo = await getCurrentWorkInfo(ns);\\n    if (!playerInGang) playerInGang = !(2 in ownedSourceFiles) ? false : await getNsDataThroughFile(ns, 'ns.gang.inGang()');\\n    let globalReserve = Number(ns.read(\\\"reserve.txt\\\") || 0);\\n    let budget = (playerInfo.money - (options['reserve'] || globalReserve)) * options['aug-budget'];\\n    // Estimate the cost of sleeves training over the next time interval to see if (ignoring income) we would drop below our reserve.\\n    const costByNextLoop = interval / 1000 * task.filter(t => t.startsWith(\\\"train\\\")).length * 12000; // TODO: Training cost/sec seems to be a bug. Should be 1/5 this ($2400/sec)\\n    // Get time in current bitnode (to cap how long we'll train sleeves)\\n    const timeInBitnode = Date.now() - (await getNsDataThroughFile(ns, 'ns.getResetInfo()')).lastNodeReset\\n    let canTrain = !options['disable-training'] &&\\n        // To avoid training forever when mults are crippling, stop training if we've been in the bitnode a certain amount of time\\n        (options['training-cap-seconds'] * 1000 > timeInBitnode) &&\\n        // Don't train if we have no money (unless player has given permission to train into debt)\\n        (playerInfo.money - costByNextLoop) > (options['training-reserve'] ||\\n            (promptedForTrainingBudget ? ns.read(trainingReserveFile) : undefined) || globalReserve);\\n    // If any sleeve is training at the gym, see if we can purchase a gym upgrade to help them\\n    if (canTrain && task.some(t => t?.startsWith(\\\"train\\\")) && !options['disable-spending-hashes-for-gym-upgrades'])\\n        if (await getNsDataThroughFile(ns, 'ns.hacknet.spendHashes(\\\"Improve Gym Training\\\")', '/Temp/spend-hashes-on-gym.txt'))\\n            log(ns, `SUCCESS: Bought \\\"Improve Gym Training\\\" to speed up Sleeve training.`, false, 'success');\\n    if (playerInBladeburner && (7 in ownedSourceFiles)) {\\n        const bladeburnerCity = await getNsDataThroughFile(ns, `ns.bladeburner.getCity()`);\\n        bladeburnerCityChaos = await getNsDataThroughFile(ns, `ns.bladeburner.getCityChaos(ns.args[0])`, null, [bladeburnerCity]);\\n        bladeburnerContractChances = await getNsDataThroughFile(ns,\\n            // There is currently no way to get sleeve chance, so assume it is the same as player chance for now. (EDIT: This is a terrible assumption)\\n            'Object.fromEntries(ns.args.map(c => [c, ns.bladeburner.getActionEstimatedSuccessChance(\\\"contract\\\", c)[0]]))',\\n            '/Temp/sleeve-bladeburner-success-chances.txt', sleeveBbContractNames);\\n        bladeburnerContractCounts = await getNsDataThroughFile(ns,\\n            'Object.fromEntries(ns.args.map(c => [c, ns.bladeburner.getActionCountRemaining(\\\"contract\\\", c)[0]]))',\\n            '/Temp/sleeve-bladeburner-contract-counts.txt', sleeveBbContractNames);\\n    } else\\n        bladeburnerCityChaos = 0, bladeburnerContractChances = {}, bladeburnerContractCounts = {};\\n\\n    // Update all sleeve information and loop over all sleeves to do some individual checks and task assignments\\n    let sleeveInfo = await getAllSleeves(ns, numSleeves);\\n\\n    // If not disabled, set the \\\"follow player\\\" sleeve to be the first sleeve with 0 shock\\n    followPlayerSleeve = options['disable-follow-player'] ? -1 : undefined;\\n    for (let i = 0; i < numSleeves; i++) // Hack below: Prioritize sleeves doing bladeburner contracts, don't have them follow player\\n        if (sleeveInfo[i].shock == 0 && (i < i || i > 3 || !playerInBladeburner))\\n            followPlayerSleeve ??= i; // Skips assignment if previously assigned\\n    followPlayerSleeve ??= 0; // If all have shock, use the first sleeve\\n\\n    for (let i = 0; i < numSleeves; i++) {\\n        let sleeve = sleeveInfo[i]; // For convenience, merge all sleeve stats/info into one object\\n        // Manage sleeve augmentations (if available)\\n        if (sleeve.shock == 0) // No augs are available augs until shock is 0\\n            budget -= await manageSleeveAugs(ns, i, budget);\\n\\n        // Decide what we think the sleeve should be doing for the next little while\\n        let [designatedTask, command, args, statusUpdate] =\\n            await pickSleeveTask(ns, playerInfo, playerWorkInfo, i, sleeve, canTrain);\\n\\n        // After picking sleeve tasks, take a note of the sleeve's health at the end of the prior loop so we can detect failures\\n        [lastSleeveHp[i], lastSleeveShock[i]] = [sleeve.hp.current, sleeve.shock];\\n\\n        // Set the sleeve's new task if it's not the same as what they're already doing.\\n        let assignSuccess = undefined;\\n        if (task[i] != designatedTask)\\n            assignSuccess = await setSleeveTask(ns, i, designatedTask, command, args);\\n\\n        // For certain tasks, log a periodic status update.\\n        if (statusUpdate && (assignSuccess === true || (\\n            assignSuccess === undefined && (Date.now() - (lastStatusUpdateTime[i] ?? 0)) > statusUpdateInterval))) {\\n            log(ns, `INFO: Sleeve ${i} is ${assignSuccess === undefined ? '(still) ' : ''}${statusUpdate} `);\\n            lastStatusUpdateTime[i] = Date.now();\\n        }\\n    }\\n}\\n\\n/** Picks the best task for a sleeve, and returns the information to assign and give status updates for that task.\\n * @param {NS} ns \\n * @param {Player} playerInfo\\n * @param {{ type: \\\"COMPANY\\\"|\\\"FACTION\\\"|\\\"CLASS\\\"|\\\"CRIME\\\", cyclesWorked: number, crimeType: string, classType: string, location: string, companyName: string, factionName: string, factionWorkType: string }} playerWorkInfo\\n * @param {SleevePerson} sleeve\\n * @returns {Promise<[string, string, any[], string]>} a 4-tuple of task name, command, args, and status message */\\nasync function pickSleeveTask(ns, playerInfo, playerWorkInfo, i, sleeve, canTrain) {\\n    // Initialize sleeve dicts on first loop\\n    if (lastSleeveHp[i] === undefined) lastSleeveHp[i] = sleeve.hp.current;\\n    if (lastSleeveShock[i] === undefined) lastSleeveShock[i] = sleeve.shock;\\n    // Must synchronize first iif you haven't maxed memory on every sleeve\\n    if (sleeve.sync < 100)\\n        return [\\\"synchronize\\\", `ns.sleeve.setToSynchronize(ns.args[0])`, [i], `syncing... ${sleeve.sync.toFixed(2)}%`];\\n    // Opt to do shock recovery if above the --min-shock-recovery threshold\\n    if (sleeve.shock > options['min-shock-recovery'])\\n        return shockRecoveryTask(sleeve, i, `shock is above ${options['min-shock-recovery'].toFixed(0)}% (--min-shock-recovery)`);\\n    // To time-balance between being useful and recovering from shock more quickly - sleeves have a random chance to be put\\n    // on shock recovery. To avoid frequently interrupting tasks that take a while to complete, only re-roll every so often.\\n    if (sleeve.shock > 0 && options['shock-recovery'] > 0) {\\n        if (Date.now() - (lastRerollTime[i] || 0) < rerollTime) {\\n            shockChance[i] = Math.random();\\n            lastRerollTime[i] = Date.now();\\n        }\\n        if (shockChance[i] < options['shock-recovery'])\\n            return shockRecoveryTask(sleeve, i, `there is a ${(options['shock-recovery'] * 100).toFixed(1)}% chance (--shock-recovery) of picking this task every minute until fully recovered.`);\\n    }\\n    // Train if our sleeve's physical stats aren't where we want them\\n    if (canTrain) {\\n        let untrainedStats = trainStats.filter(stat => sleeve.skills[stat] < options[`train-to-${stat}`]);\\n        if (untrainedStats.length > 0) {\\n            if (playerInfo.money < 5E6 && !promptedForTrainingBudget)\\n                await promptForTrainingBudget(ns); // If we've never checked, see if we can train into debt.\\n            if (sleeve.city != ns.enums.CityName.Sector12) {\\n                log(ns, `Moving Sleeve ${i} from ${sleeve.city} to Sector-12 so that they can study at Powerhouse Gym.`);\\n                await getNsDataThroughFile(ns, 'ns.sleeve.travel(ns.args[0], ns.args[1])', null, [i, ns.enums.CityName.Sector12]);\\n            }\\n            var trainStat = untrainedStats.reduce((min, s) => sleeve.skills[s] < sleeve.skills[min] ? s : min, untrainedStats[0]);\\n            var gym = ns.enums.LocationName.Sector12PowerhouseGym;\\n            return [`train ${trainStat} (${gym})`, `ns.sleeve.setToGymWorkout(ns.args[0], ns.args[1], ns.args[2])`, [i, gym, trainStat],\\n            /*   */ `training ${trainStat}... ${sleeve.skills[trainStat]}/${(options[`train-to-${trainStat}`])}`];\\n        }\\n    }\\n    // If player is currently working for faction or company rep, a sleeve can help him out (Note: Only one sleeve can work for a faction)\\n    if (i == followPlayerSleeve && playerWorkInfo.type == \\\"FACTION\\\") {\\n        // TODO: We should be able to borrow logic from work-for-factions.js to have more sleeves work for useful factions / companies\\n        // We'll cycle through work types until we find one that is supported. TODO: Auto-determine the most productive faction work to do.\\n        const faction = playerWorkInfo.factionName;\\n        const work = works[workByFaction[faction] || 0];\\n        return [`work for faction '${faction}' (${work})`, `ns.sleeve.setToFactionWork(ns.args[0], ns.args[1], ns.args[2])`, [i, faction, work],\\n        /*   */ `helping earn rep with faction ${faction} by doing ${work} work.`];\\n    } // Same as above if player is currently working for a megacorp\\n    if (i == followPlayerSleeve && playerWorkInfo.type == \\\"COMPANY\\\") {\\n        const companyName = playerWorkInfo.companyName;\\n        return [`work for company '${companyName}'`, `ns.sleeve.setToCompanyWork(ns.args[0], ns.args[1])`, [i, companyName],\\n        /*   */ `helping earn rep with company ${companyName}.`];\\n    }\\n    // If gangs are available, prioritize homicide until we've got the requisite -54K karma to unlock them\\n    if (!playerInGang && !options['disable-gang-homicide-priority'] && (2 in ownedSourceFiles) && ns.heart.break() > -54000)\\n        return await crimeTask(ns, 'homicide', i, sleeve, 'we want gang karma'); // Ignore chance - even a failed homicide generates more Karma than every other crime\\n    // If the player is in bladeburner, and has already unlocked gangs with Karma, generate contracts and operations\\n    if (playerInBladeburner) {\\n        // Hack: Without paying much attention to what's happening in bladeburner, pre-assign a variety of tasks by sleeve index\\n        const bbTasks = [\\n            // Note: Sleeve 0 might still be used for faction work (unless --disable-follow-player is set), so don't assign them a 'unique' task\\n            /*0*/options['enable-bladeburner-team-building'] ? [\\\"Support main sleeve\\\"] : [\\\"Infiltrate synthoids\\\"],\\n            // Note: Each contract type can only be performed by one sleeve at a time (similar to working for factions)\\n            /*1*/[\\\"Take on contracts\\\", \\\"Retirement\\\"], /*2*/[\\\"Take on contracts\\\", \\\"Bounty Hunter\\\"], /*3*/[\\\"Take on contracts\\\", \\\"Tracking\\\"],\\n            // Other bladeburner work can be duplicated, but tackling a variety is probably useful. Overrides occur below\\n            /*4*/[\\\"Infiltrate synthoids\\\"], /*5*/[\\\"Diplomacy\\\"], /*6*/[\\\"Field analysis\\\"],\\n            /*7*/options['enable-bladeburner-team-building'] ? [\\\"Recruitment\\\"] : [\\\"Infiltrate synthoids\\\"]\\n        ];\\n        let [action, contractName] = bbTasks[i];\\n        const contractChance = bladeburnerContractChances[contractName] ?? 1;\\n        const contractCount = bladeburnerContractCounts[contractName] ?? Infinity;\\n        const onCooldown = () => Date.now() <= bladeburnerCooldown[i]; // Function to check if we're on cooldown\\n        // Detect if the sleeve recently failed the task. If so, put them on a \\\"cooldown\\\" before trying again\\n        if (sleeve.hp.current < lastSleeveHp[i] || sleeve.shock > lastSleeveShock[i]) {\\n            bladeburnerCooldown[i] = Date.now() + options['failed-bladeburner-contract-cooldown'];\\n            log(ns, `Sleeve ${i} appears to have recently failed its designated bladeburner task '${action} - ${contractName}' ` +\\n                `(HP ${lastSleeveHp[i].toFixed(1)} -> ${sleeve.hp.current.toFixed(1)}, ` +\\n                `Shock: ${lastSleeveShock[i].toFixed(2)} -> ${sleeve.shock.toFixed(2)}). ` +\\n                `Will try again in ${formatDuration(options['failed-bladeburner-contract-cooldown'])}`);\\n        } // If the contract success chance appears too low, or there are insufficient contracts remaining, smaller cooldown\\n        else if (!onCooldown() && (contractChance <= minBbProbability || contractCount < minBbContracts)) {\\n            bladeburnerCooldown[i] = Date.now() + waitForContractCooldown;\\n            log(ns, `Delaying sleeve ${i} designated bladeburner task '${action} - ${contractName}' - ` +\\n                (contractCount < minBbContracts ? `Insufficient contract count (${contractCount} < ${minBbContracts})` :\\n                    `Player chance is too low (${(contractChance * 100).toFixed(2)}% < ${(minBbProbability * 100)}%). `) +\\n                `Will try again in ${formatDuration(waitForContractCooldown)}`);\\n        }\\n        // As current city chaos gets progressively bad, assign more and more sleeves to Diplomacy to help get it under control\\n        if (bladeburnerCityChaos > (10 - i) * 10) // Later sleeves are first to get assigned, sleeve 0 is last at 100 chaos.\\n            [action, contractName] = [\\\"Diplomacy\\\"];\\n        // If the sleeve is on cooldown ,do not perform their designated bladeburner task\\n        else if (onCooldown()) { // When on cooldown from a failed task, recover shock if applicable, or else add contracts\\n            if (sleeve.shock > 0) return shockRecoveryTask(sleeve, i, `bladeburner task is on cooldown`);\\n            [action, contractName] = [\\\"Infiltrate synthoids\\\"]; // Fall-back to something long-term useful\\n        }\\n        return [`Bladeburner ${action} ${contractName || ''}`.trimEnd(),\\n        /*   */ `ns.sleeve.setToBladeburnerAction(ns.args[0], ns.args[1], ns.args[2])`, [i, action, contractName ?? ''],\\n        /*   */ `doing ${action}${contractName ? ` - ${contractName}` : ''} in Bladeburner.`];\\n    }\\n    // If there's nothing more productive to do (above) and there's still shock, prioritize recovery\\n    if (sleeve.shock > 0)\\n        return shockRecoveryTask(sleeve, i, `there appears to be nothing better to do`);\\n    // Finally, do crime for Karma. Pick the best crime based on success chances\\n    var crime = options.crime || (await calculateCrimeChance(ns, sleeve, \\\"homicide\\\")) >= options['homicide-chance-threshold'] ? 'homicide' : 'mug';\\n    return await crimeTask(ns, crime, i, sleeve, `there appears to be nothing better to do`);\\n}\\n\\n/** Helper to prepare the shock recovery task\\n * @param {SleevePerson} sleeve */\\nfunction shockRecoveryTask(sleeve, i, reason) {\\n    return [`recover from shock`, `ns.sleeve.setToShockRecovery(ns.args[0])`, [i],\\n    /*   */ `recovering from shock (${sleeve.shock.toFixed(2)}%) beacause ${reason}...`];\\n}\\n\\n/** Helper to prepare the crime task\\n * @param {NS} ns \\n * @param {SleevePerson} sleeve \\n * @returns {Promise<[string, string, any[], string]>} a 4-tuple of task name, command, args, and status message */\\nasync function crimeTask(ns, crime, i, sleeve, reason) {\\n    const successChance = await calculateCrimeChance(ns, sleeve, crime);\\n    return [`commit ${crime}`, `ns.sleeve.setToCommitCrime(ns.args[0], ns.args[1])`, [i, crime],\\n    /*   */ `committing ${crime} with chance ${(successChance * 100).toFixed(2)}% because ${reason}` +\\n    /*   */ (options.crime || crime == \\\"homicide\\\" ? '' : // If auto-criming, user may be curious how close we are to switching to homicide \\n    /*   */     ` (Note: Homicide chance would be ${((await calculateCrimeChance(ns, sleeve, \\\"homicide\\\")) * 100).toFixed(2)}%)`)];\\n}\\n\\n\\n/** Sets a sleeve to its designated task, with some extra error handling logic for working for factions. \\n * @param {NS} ns \\n * @param {number} i - Sleeve number\\n * @param {string} designatedTask - string describing the designated task\\n * @param {string} command - dynamic command to initiate this work \\n * @param {any[]} args - arguments consumed by the dynamic command\\n * */\\nasync function setSleeveTask(ns, i, designatedTask, command, args) {\\n    let strAction = `Set sleeve ${i} to ${designatedTask}`;\\n    try { // Assigning a task can throw an error rather than simply returning false. We must suppress this\\n        if (await getNsDataThroughFile(ns, command, `/Temp/sleeve-${command.slice(10, command.indexOf(\\\"(\\\"))}.txt`, args)) {\\n            task[i] = designatedTask;\\n            log(ns, `SUCCESS: ${strAction}`);\\n            return true;\\n        }\\n    } catch { }\\n    // If assigning the task failed...\\n    lastRerollTime[i] = 0;\\n    // If working for a faction, it's possible he current work isn't supported, so try the next one.\\n    if (designatedTask.startsWith('work for faction')) {\\n        const faction = args[1]; // Hack: Not obvious, but the second argument will be the faction name in this case.\\n        let nextWorkIndex = (workByFaction[faction] || 0) + 1;\\n        if (nextWorkIndex >= works.length) {\\n            log(ns, `WARN: Failed to ${strAction}. None of the ${works.length} work types appear to be supported. Will loop back and try again.`, true, 'warning');\\n            nextWorkIndex = 0;\\n        } else\\n            log(ns, `INFO: Failed to ${strAction} - work type may not be supported. Trying the next work type (${works[nextWorkIndex]})`);\\n        workByFaction[faction] = nextWorkIndex;\\n    } else if (designatedTask.startsWith('Bladeburner')) { // Bladeburner action may be out of operations\\n        bladeburnerCooldown[i] = Date.now(); // There will be a cooldown before this task is assigned again.\\n    } else\\n        log(ns, `ERROR: Failed to ${strAction}`, true, 'error');\\n    return false;\\n}\\n\\nlet promptedForTrainingBudget = false;\\n/** @param {NS} ns \\n * For when we are at risk of going into debt while training with sleeves.\\n * Contains some fancy logic to spawn an external script that will prompt the user and wait for an answer. */\\nasync function promptForTrainingBudget(ns) {\\n    if (promptedForTrainingBudget) return;\\n    promptedForTrainingBudget = true;\\n    await ns.write(trainingReserveFile, '', \\\"w\\\");\\n    if (options['training-reserve'] === null && !options['disable-training'])\\n        await runCommand(ns, `let ans = await ns.prompt(\\\"Do you want to let sleeves put you in debt while they train?\\\"); \\\\n` +\\n            `await ns.write(\\\"${trainingReserveFile}\\\", ans ? '-1E100' : '0', \\\"w\\\")`, '/Temp/sleeves-training-reserve-prompt.js');\\n}\\n\\n/** @param {NS} ns \\n * @param {SleevePerson} sleeve \\n * Calculate the chance a sleeve has of committing homicide successfully. */\\nasync function calculateCrimeChance(ns, sleeve, crimeName) {\\n    // If not in the cache, retrieve this crime's stats\\n    const crimeStats = cachedCrimeStats[crimeName] ?? (cachedCrimeStats[crimeName] = (4 in ownedSourceFiles ?\\n        await getNsDataThroughFile(ns, `ns.singularity.getCrimeStats(ns.args[0])`, null, [crimeName]) :\\n        // Hack: To support players without SF4, hard-code values as of the current release\\n        crimeName == \\\"homicide\\\" ? { difficulty: 1, strength_success_weight: 2, defense_success_weight: 2, dexterity_success_weight: 0.5, agility_success_weight: 0.5 } :\\n            crimeName == \\\"mug\\\" ? { difficulty: 0.2, strength_success_weight: 1.5, defense_success_weight: 0.5, dexterity_success_weight: 1.5, agility_success_weight: 0.5, } :\\n                undefined));\\n    let chance =\\n        (crimeStats.hacking_success_weight || 0) * sleeve.skills.hacking +\\n        (crimeStats.strength_success_weight || 0) * sleeve.skills.strength +\\n        (crimeStats.defense_success_weight || 0) * sleeve.skills.defense +\\n        (crimeStats.dexterity_success_weight || 0) * sleeve.skills.dexterity +\\n        (crimeStats.agility_success_weight || 0) * sleeve.skills.agility +\\n        (crimeStats.charisma_success_weight || 0) * sleeve.skills.charisma;\\n    chance /= 975;\\n    chance /= crimeStats.difficulty;\\n    return Math.min(chance, 1);\\n}\",\"filename\":\"sleeve.js\",\"server\":\"home\"}}],[\"spend-hacknet-hashes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log, getConfiguration, disableLogs, formatMoney, formatDuration, formatNumberShort } from './helpers.js'\\n\\nconst sellForMoney = 'Sell for Money';\\n\\nconst argsSchema = [\\n    ['l', false], // Spend hashes as soon as we can afford any --spend-on purchase item. Otherwise, only spends when nearing capacity.\\n    ['liquidate', false], // Long-form of above flag\\n    ['interval', 1000], // Rate at which the program runs and spends hashes\\n    ['spend-on', [sellForMoney]], // One or more actions to spend hashes on.\\n    ['spend-on-server', null], // The server to boost, for spend options that take a server argument: 'Reduce Minimum Security' and 'Increase Maximum Money'\\n    ['no-capacity-upgrades', false], // By default, we will attempt to upgrade the hacknet node capacity if we cannot afford any purchases. Set to true to disable this.\\n    ['reserve-buffer', 1], // To avoid wasting hashes, spend if would be within this many hashes of our max capacity on the next tick.\\n];\\n\\nconst basicSpendOptions = ['Sell for Money', 'Generate Coding Contract', 'Improve Studying', 'Improve Gym Training',\\n    'Sell for Corporation Funds', 'Exchange for Corporation Research', 'Exchange for Bladeburner Rank', 'Exchange for Bladeburner SP'];\\nconst parameterizedSpendOptions = ['Reduce Minimum Security', 'Increase Maximum Money'];\\nconst purchaseOptions = basicSpendOptions.concat(parameterizedSpendOptions);\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--spend-on\\\") // Provide a couple auto-complete options to facilitate these arguments with spaces in them\\n        return purchaseOptions.map(f => f.replaceAll(\\\" \\\", \\\"_\\\"))\\n            .concat(purchaseOptions.map(f => `'${f}'`));\\n    return [];\\n}\\n\\n/** @param {NS} ns \\n * Executes instructions to spend hacknet hashes continuously.\\n * NOTE: This script is written to support multiple concurrent instances running with different arguments. **/\\nexport async function main(ns) {\\n    const options = getConfiguration(ns, argsSchema);\\n    if (!options) return; // Invalid options, or ran in --help mode.\\n    const liquidate = options.l || options.liquidate;\\n    const interval = options.interval;\\n    const toBuy = options['spend-on'].map(s => s.replaceAll(\\\"_\\\", \\\" \\\"));\\n    const spendOnServer = options['spend-on-server']?.replaceAll(\\\"_\\\", \\\" \\\") ?? undefined;\\n    // Validate arguments\\n    if (toBuy.length == 0)\\n        return log(ns, \\\"ERROR: You must specify at least one thing to spend hashes on via the --spend-on argument.\\\", true, 'error');\\n    const unrecognized = toBuy.filter(p => !purchaseOptions.includes(p));\\n    if (unrecognized.length > 0)\\n        return log(ns, `ERROR: One or more --spend-on arguments are not recognized: ${unrecognized.join(\\\", \\\")}`, true, 'error');\\n    disableLogs(ns, ['sleep']);\\n    ns.print(`Starting spend-hacknet-hashes.js... Will check in every ${formatDuration(interval)}`);\\n    ns.print(liquidate ? `-l --liquidate mode active! Will spend all hashes as soon as possible.` :\\n        `Saving up hashes, only spending hashes when near capacity to avoid wasting them.`);\\n    // Function determines the current cheapest upgrade of all the upgrades we wish to keep purchasing\\n    const getMinCost = spendActions => Math.min(...spendActions.map(p => ns.hacknet.hashCost(p)));\\n    while (true) {\\n        await ns.sleep(interval);\\n        try {\\n            // Compute the total income rate of all hacknet nodes. We have to spend faster than this when near capacity.\\n            const nodes = ns.hacknet.numNodes();\\n            let capacity = ns.hacknet.hashCapacity() || 0;\\n            if (nodes == 0) {\\n                log(ns, 'WARN: Hacknet is empty, no hashes to spend yet...');\\n                continue; // Nothing to do until at least one node is purchased.\\n            } else if (capacity == 0)\\n                return log(ns, 'INFO: You have hacknet nodes, not hacknet servers, so spending hashes is not applicable.');\\n            let globalProduction = Array.from({ length: nodes }, (_, i) => ns.hacknet.getNodeStats(i))\\n                .reduce((total, node) => total + node.production, 0);\\n            const reserve = globalProduction * interval / 1000 + options['reserve-buffer']; // If we are this far from our capacity, start spending\\n            // Define the spend hash loop as a local function, since we may need to call it twice.\\n            const fnSpendHashes = async (purchases, spendAllHashes) => {\\n                const startingHashes = ns.hacknet.numHashes() || 0;\\n                capacity = ns.hacknet.hashCapacity() || 0;\\n                let success = true;\\n                while (success && ns.hacknet.numHashes() > (spendAllHashes ? getMinCost(purchases) : capacity - reserve)) {\\n                    for (const spendAction of purchases.filter(p => ns.hacknet.numHashes() >= ns.hacknet.hashCost(p))) {\\n                        const cost = ns.hacknet.hashCost(spendAction);\\n                        if (cost > ns.hacknet.numHashes()) break;\\n                        success = ns.hacknet.spendHashes(spendAction, parameterizedSpendOptions.includes(spendAction) ? spendOnServer : undefined);\\n                        if (!success) // Minor warning, possible if there are multiple versions of this script running, one beats the other two the punch.\\n                            ns.print(`WARN: Failed to spend hashes on '${spendAction}'. (Cost: ${formatNumberShort(cost, 6, 3)} ` +\\n                                `Have: ${formatNumberShort(ns.hacknet.numHashes(), 6, 3)} Capacity: ${formatNumberShort(capacity, 6, 3)}`);\\n                        else if (spendAction != sellForMoney) // This would be to noisy late-game, since cost never scales\\n                            log(ns, `SUCCESS: Spent ${cost} hashes on '${spendAction}'. ` +\\n                                `Next upgrade will cost ${formatNumberShort(ns.hacknet.hashCost(spendAction), 6, 3)}.`, false, 'success');\\n                    }\\n                    await ns.sleep(1); // Defend against infinite loop if there's a bug\\n                }\\n                if (ns.hacknet.numHashes() < startingHashes)\\n                    ns.print(`SUCCESS: Spent ${(startingHashes - ns.hacknet.numHashes()).toFixed(0)} hashes ` +\\n                        (spendAllHashes ? '' : ` to avoid reaching capacity (${capacity})`) +\\n                        ` while earning ${globalProduction.toPrecision(3)} hashes per second.`);\\n            };\\n            // Spend hashes normally on any/all user-specified purchases        \\n            await fnSpendHashes(toBuy, liquidate);\\n            // Determine if we should try to upgrade our hacknet capacity\\n            const remaining = capacity - ns.hacknet.numHashes();\\n            if (remaining < reserve)\\n                log(ns, `INFO: We're still at hash capacity (${formatNumberShort(capacity, 6, 3)}) after spending hashes as instructed. ` +\\n                    `We currently have ${formatNumberShort(ns.hacknet.numHashes(), 6, 3)} hashes - which is ${remaining} away.`);\\n            else if (getMinCost(toBuy) > capacity - options['reserve-buffer'])\\n                log(ns, `INFO: Our hash capacity is ${formatNumberShort(capacity, 6, 3)}, but the cheapest upgrade we wish to purchase ` +\\n                    `costs ${formatNumberShort(getMinCost(toBuy), 6, 3)} hashes. A capacity upgrade is needed before anything else is purchase.`);\\n            else // Current hash capacity suffices\\n                continue;\\n            if (options['no-capacity-upgrades']) // Not allowed to upgrade hacknet capacity\\n                log(ns, `WARNING: spend-hacknet-hashes.js cannot afford any of the desired upgrades (${toBuy.join(\\\", \\\")}) at the ` +\\n                    `current hash capacity (${formatNumberShort(capacity, 6, 3)}), and --no-capacity-upgrades is set, ` +\\n                    `so we cannot increase our hash capacity.`, false, remaining < reserve ? 'warning' : undefined);\\n            else { // Try to upgrade hacknet capacity so we can save up for more upgrades\\n                let lowestLevel = Number.MAX_SAFE_INTEGER, lowestIndex = null;\\n                for (let i = 0; i < nodes; i++)\\n                    if (ns.hacknet.getNodeStats(i).hashCapacity < lowestLevel)\\n                        lowestIndex = i, lowestLevel = ns.hacknet.getNodeStats(i).hashCapacity;\\n                if (lowestIndex !== null && ns.hacknet.upgradeCache(lowestIndex, 1)) {\\n                    log(ns, `SUCCESS: Upgraded hacknet node ${lowestIndex} hash capacity in order to afford further purchases. ` +\\n                        `(You can disable this with --no-capacity-upgrades)`, false, 'success');\\n                    capacity = ns.hacknet.hashCapacity()\\n                } else if (nodes > 0)\\n                    log(ns, `WARNING: We cannot afford to buy any of the desired upgrades (${toBuy.join(\\\", \\\")}) at our current hash capacity, ` +\\n                        `and we failed to increase our hash capacity (cost: ${formatMoney(ns.hacknet.getCacheUpgradeCost(lowestIndex, 1))}).`, false, 'warning');\\n            }\\n            // If for any of the above reasons, we weren't able to upgrade capacity, calling 'SpendHashes' once more\\n            // with these arguments will only convert enough hashes to money to ensure they aren't wasted before the next tick.\\n            await fnSpendHashes([sellForMoney], false);\\n        }\\n        catch (err) {\\n            log(ns, `WARNING: spend-hacknet-hashes.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n    }\\n}\",\"filename\":\"spend-hacknet-hashes.js\",\"server\":\"home\"}}],[\"stanek.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    log, disableLogs, getFilePath, getConfiguration, formatNumberShort, formatRam,\\n    getNsDataThroughFile, waitForProcessToComplete, getActiveSourceFiles, instanceCount, unEscapeArrayArgs\\n} from './helpers.js'\\n\\n// Default sripts called at startup and shutdown of stanek\\nconst defaultStartupScript = getFilePath('daemon.js');\\nconst defaultStartupArgs = ['--reserved-ram', 1E100];\\nconst defaultCompletionScript = getFilePath('daemon.js');\\nconst defaultCompletionArgs = [];\\n// Name of the external script that will be created and called to generate charges\\nconst chargeScript = \\\"/Temp/stanek.js.charge.js\\\";\\nlet awakeningRep = 1E6, serenityRep = 100E6; // Base reputation cost - can be scaled by bitnode multipliers\\n\\nconst argsSchema = [\\n    ['reserved-ram', 32], // Don't use this RAM\\n    ['reserved-ram-ideal', 64], // Leave this amount of RAM free if it represents less than 5% of available RAM\\n    ['max-charges', 120], // Stop charging when all fragments have this many charges (diminishing returns - num charges is ^0.07 )\\n    // By default, starting an augmentation with stanek.js will still spawn daemon.js, but will instruct it not to schedule any hack cycles against home by 'reserving' all its RAM\\n    // TODO: Set these defaults in some way that the user can explicitly specify that they want to run **no** startup script and **no** completion script\\n    ['on-startup-script', null], // (Defaults in code) Spawn this script when stanek is launched WARNING: This argument may go away in the future since autopilot.js will orchestrate stanek\\n    ['on-startup-script-args', []], // Args for the above (Defaults in code) WARNING: This argument may go away in the future since autopilot.js will orchestrate stanek \\n    // When stanek completes, it will run daemon.js again (which will terminate the initial ram-starved daemon that is running)\\n    ['on-completion-script', null], // (Default in code) Spawn this script when max-charges is reached\\n    ['on-completion-script-args', []], // (Default in code) Optional args to pass to the script when launched\\n    ['no-tail', false], // By default, keeps a tail window open, because it's pretty important to know when this script is running (can't use home for anything else)\\n    ['reputation-threshold', 0.2], // By default, if we are this close to the rep needed for an unowned stanek upgrade (e.g. \\\"Stanek's Gift - Serenity\\\"), we will keep charging despite the 'max-charges' setting\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\nlet options, currentServer, maxCharges, idealReservedRam, chargeAttempts, sf4Level, shouldContinueForAug;\\n\\n/** Maximizes charge on stanek fragments based on current home RAM.\\n * NOTE: You should have no other scripts running on home while you do this to get the best peak charge possible\\n *       Stanek stats benefit more from charges with a high avg RAM used per charge, rather than just more charges. \\n * @param {NS} ns **/\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions || await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n    disableLogs(ns, ['sleep', 'run', 'getServerMaxRam', 'getServerUsedRam'])\\n\\n    // Validate whether we can run\\n    if ((await getActiveFragments(ns)).length == 0) {\\n        // Try to run our helper script to set up the grid\\n        const pid = ns.run(getFilePath('stanek.js.create.js'));\\n        if (pid) await waitForProcessToComplete(ns, pid);\\n        else log(ns, \\\"ERROR while attempting to run stanek.js.create.js (pid was 0)\\\");\\n        // Verify that this worked.\\n        if ((await getActiveFragments(ns)).length == 0)\\n            return log(ns, \\\"ERROR: You must manually populate your stanek grid with your desired fragments before you run this script to charge them.\\\", true, 'error');\\n    }\\n\\n    currentServer = await getNsDataThroughFile(ns, `ns.getHostname()`);\\n    maxCharges = options['max-charges']; // Don't bother adding charges beyond this amount\\n    idealReservedRam = 32; // Reserve this much RAM, if it wouldnt make a big difference anyway. Leaves room for other temp-scripts to spawn.\\n    let startupScript = options['on-startup-script'];\\n    let startupArgs = unEscapeArrayArgs(options['on-startup-script-args']);\\n    if (!startupScript) { // Apply defaults if not present.\\n        startupScript = defaultStartupScript;\\n        if (startupArgs.length == 0) startupArgs = defaultStartupArgs;\\n    }\\n    // If so configured, launch the start-up script to run alongside stanek and let it consume the RAM it needs before initiating stanek loops.\\n    if (ns.run(startupScript, 1, ...startupArgs)) {\\n        log(ns, `INFO: Stanek.js is launching accompanying 'on-startup-script': ${startupScript}...`, false, 'info');\\n        await ns.sleep(1000); // Give time for the accompanying script to start up and consume its required RAM footprint.\\n    } else\\n        log(ns, `WARNING: Stanek.js has started successfully, but failed to launch accompanying 'on-startup-script': ${startupScript}...`, false, 'warning');\\n    chargeAttempts = {}; // We keep track of how many times we've charged each segment, to work around a placement bug where fragments can overlap, and then don't register charge\\n\\n    const chargeScriptBody = \\\"export async function main(ns) { await ns.stanek.chargeFragment(ns.args[0], ns.args[1]); }\\\";\\n    const checkOnChargeScript = async () => { // We must use this periodically since cleanup might be run while we're charging.\\n        // Check if our charge script exists. If not, we can create it (facilitates copying stanek.js to a new server to run)\\n        if (ns.read(chargeScript) != chargeScriptBody) {\\n            await ns.write(chargeScript, chargeScriptBody, \\\"w\\\");\\n            await ns.sleep(100); // To be safe, there have been bugs with ns.write not waiting long enough\\n        }\\n    }\\n\\n    // Check what augs we own and establish the theshold to continue grinding REP if we're close to one.\\n    const ownedSourceFiles = await getActiveSourceFiles(ns);\\n    sf4Level = ownedSourceFiles[4] || 0;\\n    shouldContinueForAug = () => false;\\n    if (sf4Level == 0) {\\n        log(ns, `INFO: SF4 required to get owned faction rep and augmentation info. Ignoring the --reputation-threshold setting.`);\\n    } else {\\n        const ownedAugmentations = await getNsDataThroughFile(ns, `ns.singularity.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n        const [strAwakening, strSerenity] = [\\\"Stanek's Gift - Awakening\\\", \\\"Stanek's Gift - Serenity\\\"];\\n        const [awakeningOwned, serenityOwned] = [ownedAugmentations.includes(strAwakening), ownedAugmentations.includes(strSerenity)];\\n        if (!awakeningOwned || !serenityOwned) {\\n            [awakeningRep, serenityRep] = await getNsDataThroughFile(ns,\\n                `[${[strAwakening, strSerenity].map(a => `ns.singularity.getAugmentationRepReq(\\\\\\\"${a}\\\\\\\")`)}]`,\\n                '/Temp/stanek-aug-rep-reqs.txt');\\n            log(ns, `INFO: Stanek Augmentations Rep Requirements are Awakening: ${formatNumberShort(awakeningRep)}, ` +\\n                `Serenity: ${formatNumberShort(serenityRep)} (--reputation-threshold = ${options['reputation-threshold']})`);\\n        }\\n        shouldContinueForAug = (currentRep) => // return true if currentRep is high enough that we should keep grinding for the next unowned aug\\n            !awakeningOwned && options['reputation-threshold'] * awakeningRep <= currentRep && currentRep < awakeningRep ||\\n            !serenityOwned && options['reputation-threshold'] * serenityRep <= currentRep && currentRep < serenityRep\\n    }\\n\\n    // Start the main stanek loop\\n    let lastLoopSuccessful = true;\\n    while (true) {\\n        await ns.sleep(lastLoopSuccessful ? 10 : 1000); // Only sleep a short while between charges if things are going well\\n        lastLoopSuccessful = false;\\n        try {\\n            if (!options['no-tail']) ns.tail(); // Keep a tail window open unless otherwise configured\\n            await checkOnChargeScript();\\n            const fragmentsToCharge = await getFragmentsToCharge(ns);\\n            if (fragmentsToCharge === undefined) continue;\\n            if (fragmentsToCharge.length == 0) break; // All fragments at max desired charge\\n            lastLoopSuccessful = await tryChargeAllFragments(ns, fragmentsToCharge);\\n        }\\n        catch (err) {\\n            log(ns, `WARNING: stanek.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n    }\\n    log(ns, `SUCCESS: All stanek fragments at desired charge ${maxCharges}`, true, 'success');\\n    // Run the completion script before shutting down    \\n    let completionScript = options['on-completion-script'];\\n    let completionArgs = unEscapeArrayArgs(options['on-completion-script-args']);\\n    if (!completionScript) { // Apply defaults if not present.\\n        completionScript = defaultCompletionScript;\\n        if (completionArgs.length == 0) completionArgs = defaultCompletionArgs;\\n    }\\n    if (ns.run(completionScript, 1, ...completionArgs))\\n        log(ns, `INFO: Stanek.js shutting down and launching ${completionScript}...`, false, 'info');\\n    else\\n        log(ns, `WARNING: Stanek.js shutting down, but failed to launch ${completionScript}...`, false, 'warning');\\n}\\n\\n/** Get Fragments to Charge\\n * @param {NS} ns\\n * @returns {Promise<ActiveFragment[]>} whether all fragments were charged successfully **/\\nasync function getFragmentsToCharge(ns) {\\n    // Make sure we have the latest information about all fragments\\n    let fragments = await getActiveFragments(ns);\\n    if (fragments.length == 0) {\\n        log(ns, \\\"ERROR: Stanek fragments were cleared. You must re-populate the grid before charging can continue.\\\", true, 'error');\\n        return undefined;\\n    }\\n    // If we have SF4, get our updated faction rep, and determine if we should continue past --max-charges to earn rep for the next augmentation\\n    const churchRep = sf4Level ? await getNsDataThroughFile(ns, 'ns.singularity.getFactionRep(ns.args[0])', null, [\\\"Church of the Machine God\\\"]) : 0;\\n    const shouldContinue = shouldContinueForAug(churchRep);\\n\\n    // Collect information about each fragment's charge status, and prepare a status update\\n    let fragmentSummary = '';\\n    let minCharges = Number.MAX_SAFE_INTEGER;\\n    for (const fragment of fragments) {\\n        fragmentSummary += `Fragment ${String(fragment.id).padStart(2)} at [${fragment.x},${fragment.y}] ` +\\n            (fragment.id < 100 ? `Peak: ${formatNumberShort(fragment.highestCharge)} Charges: ${fragment.numCharge.toFixed(1)}` :\\n                `(booster, no charge effect)`) + `\\\\n`;\\n        if (fragment.numCharge == 0 && (chargeAttempts[fragment.id] || 0) > 0) { // Ignore fragments that aren't accepting charge.\\n            if (chargeAttempts[fragment.id] == 1 && fragment.id < 100) { // First time we do this, log a message\\n                log(ns, `WARNING: Detected that fragment ${fragment.id} at [${fragment.x},${fragment.y}] is not accepting charge nano (root overlaps with another segment root?)`, true, 'warning');\\n                chargeAttempts[fragment.id] = 2; // Hack: We will never try to charge this fragment again. Abuse this dict value so we don't see htis log again.\\n            }\\n        } else if (fragment.id < 100)\\n            minCharges = Math.min(minCharges, fragment.numCharge) // Track the least-charged fragment (ignoring fragments that take no charge)\\n    }\\n    minCharges = Math.ceil(minCharges); // Fractional charges now occur. Round these up.\\n    if (minCharges >= maxCharges && !shouldContinue && fragments.some(f => (chargeAttempts[f.id] || 0) > 0))\\n        return []; // Max charges reached\\n    // We will only charge non-booster fragments, and fragments that aren't stuck at 0 charge\\n    const fragmentsToCharge = fragments.filter(f => f.id < 100 && ((chargeAttempts[f.id] || 0) < 2 || f.numCharge > 0));\\n    // Log a status update\\n    log(ns, `Charging ${fragmentsToCharge.length}/${fragments.length} fragments ` + (!shouldContinue ? `to ${maxCharges}` : `until faction has ` +\\n        formatNumberShort(churchRep < awakeningRep ? awakeningRep : serenityRep) + ` rep (currently at ${formatNumberShort(churchRep)})`) +\\n        `. Curent charges:\\\\n${fragmentSummary}`);\\n    return fragmentsToCharge;\\n}\\n\\n/** Try to charge all the specified fragments using available ram\\n * @param {NS} ns\\n * @returns {Promise<bool>} whether all fragments were charged successfully **/\\nasync function tryChargeAllFragments(ns, fragmentsToCharge) {\\n    // Charge each fragment one at a time\\n    for (const fragment of fragmentsToCharge) {\\n        let availableRam = ns.getServerMaxRam(currentServer) - ns.getServerUsedRam(currentServer);\\n        let reservedRam = (idealReservedRam / availableRam < 0.05) ? options['reserved-ram-ideal'] : options['reserved-ram'];\\n        const threads = Math.floor((availableRam - reservedRam) / 2.0);\\n        if (threads <= 0) {\\n            log(ns, `WARNING: Insufficient free RAM on ${currentServer} to charge Stanek ` +\\n                `(${formatRam(availableRam)} free - ${formatRam(reservedRam)} reserved). Will try again later...`);\\n            continue;\\n        }\\n        const pid = ns.run(chargeScript, threads, fragment.x, fragment.y);\\n        if (!pid) {\\n            log(ns, `WARNING: Failed to charge Stanek with ${threads} threads thinking there was ${formatRam(availableRam)} free on ${currentServer}. ` +\\n                `Check if another script is fighting stanek.js for RAM. Will try again later...`);\\n            continue;\\n        }\\n        await waitForProcessToComplete(ns, pid);\\n        chargeAttempts[fragment.id] = 1 + (chargeAttempts[fragment.id] || 0);\\n    }\\n}\\n\\n/** Get the current active stanek fragments\\n * @param {NS} ns\\n * @returns {Promise<ActiveFragment[]>} **/\\nasync function getActiveFragments(ns) {\\n    return await getNsDataThroughFile(ns, 'ns.stanek.activeFragments()');\\n}\",\"filename\":\"stanek.js\",\"server\":\"home\"}}],[\"stanek.js.create.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log, getConfiguration, getNsDataThroughFile } from './helpers.js'\\n\\nconst argsSchema = [\\n    ['clear', false], // If set to true, will clear whatever layout is already there and create a new one\\n    ['force-width', null], // Force the layout less than or equal to the specified width\\n    ['force-height', null], // Force the layout less than or equal to the specified height\\n];\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const options = getConfiguration(ns, argsSchema);\\n    if (!options) return;\\n\\n    // Check if stanek was previously placed\\n    if (!options['clear']) {\\n        const fragments = await getNsDataThroughFile(ns, 'ns.stanek.activeFragments()');\\n        if (fragments.length > 0)\\n            return log(ns, `WARNING: Nothing to do, you've already populated Stanek's Gift. Exiting...`, true);\\n    }\\n\\n    // Find the saved layout that best matches \\n    const height = options['force-height'] || await getNsDataThroughFile(ns, 'ns.stanek.giftHeight()');\\n    const width = options['force-width'] || await getNsDataThroughFile(ns, 'ns.stanek.giftWidth()');\\n    const usableLayouts = layouts.filter(l => l.height <= height && l.width <= width);\\n    const bestLayout = usableLayouts.sort((l1, l2) => // Use the layout with the least amount of unused rows/columns\\n        (height - l1.height + width - l1.width) - (height - l2.height + width - l2.width))[0];\\n    log(ns, `Best layout found for current Stanek grid dimentions (height: ${height} width: ${width}) ` +\\n        `has height: ${bestLayout.height} width: ${bestLayout.width} fragments: ${bestLayout.fragments.length}`);\\n\\n    // Clear any prior layout if enabled\\n    if (options['clear']) {\\n        await getNsDataThroughFile(ns, 'ns.stanek.clearGift() || true', '/Temp/stanek-clearGift.txt');\\n        log(ns, 'Cleared any existing stanek layout.');\\n    }\\n\\n    // Place the layout\\n    log(ns, `Placing ${bestLayout.fragments.length} fragments:\\\\n` + JSON.stringify(bestLayout.fragments));\\n    const result = await getNsDataThroughFile(ns,\\n        'JSON.parse(ns.args[0]).reduce((t, f) => ns.stanek.placeFragment(f.x, f.y, f.rotation, f.id) && t, true)',\\n        '/Temp/stanek-placeFragments.txt', [JSON.stringify(bestLayout.fragments)]);\\n    if (result)\\n        log(ns, `SUCCESS: Placed ${bestLayout.fragments.length} Stanek fragments.`, true, 'success');\\n    else\\n        log(ns, `ERROR: Failed to place one or more fragments. The layout may be invalid.`, true, 'error');\\n}\\n\\n// DISCLAIMER: These layouts are mostly hack focused, but bring in additional important stats as there is room\\nconst layouts = [ // NOTE: Width appears to be always the same as, or one more than height.\\n    {\\n        \\\"height\\\": 2, \\\"width\\\": 3, \\\"fragments\\\": [ // BN 13.1 is this small\\n            { \\\"id\\\": 0, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 } // Hacking Mult\\n        ]\\n    }, {\\n        \\\"height\\\": 3, \\\"width\\\": 3, \\\"fragments\\\": [\\n            { \\\"id\\\": 1, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 3 }, // Hacking Mult\\n            { \\\"id\\\": 25, \\\"x\\\": 1, \\\"y\\\": 0, \\\"rotation\\\": 3 }, // Reputation\\n        ]\\n    }, {\\n        \\\"height\\\": 3, \\\"width\\\": 4, \\\"fragments\\\": [ // Note: Possible to fit 3 fragments, see \\\"alternative layouts\\\" below\\n            { \\\"id\\\": 0, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 1 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 2, \\\"y\\\": 0, \\\"rotation\\\": 1 } // Hacking Mult\\n        ]\\n    }, {\\n        \\\"height\\\": 4, \\\"width\\\": 4, \\\"fragments\\\": [ // Note: Possible to fit 4 fragments, but have to sacrifice a hacking mult piece\\n            { \\\"id\\\": 0, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 25, \\\"x\\\": 2, \\\"y\\\": 0, \\\"rotation\\\": 3 } // Reputation\\n        ]\\n    }, {\\n        \\\"height\\\": 4, \\\"width\\\": 5, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 25, \\\"x\\\": 3, \\\"y\\\": 1, \\\"rotation\\\": 3 }, // Reputation\\n            { \\\"id\\\": 104, \\\"x\\\": 2, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Booster *new*\\n        ]\\n    }, {\\n        \\\"height\\\": 5, \\\"width\\\": 5, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 1, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 25, \\\"x\\\": 3, \\\"y\\\": 2, \\\"rotation\\\": 3 }, // Reputation\\n            { \\\"id\\\": 105, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Booster\\n            { \\\"id\\\": 100, \\\"x\\\": 2, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Booster *new*\\n        ]\\n    }, {\\n        // NOTE: Things get pretty subjective after this. Should we prioritize boosting hacking multi or adding more stats?\\n        //       I've decided to start by adding in Hacking Speed, Hacknet Production + Cost as 3 stats more important than just more boost\\n        \\\"height\\\": 5, \\\"width\\\": 6, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 3, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 3, \\\"y\\\": 3, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 5, \\\"x\\\": 4, \\\"y\\\": 1, \\\"rotation\\\": 1 }, // Hacking Speed *new*\\n            { \\\"id\\\": 20, \\\"x\\\": 0, \\\"y\\\": 4, \\\"rotation\\\": 0 }, // Hacknet Production *new*\\n            { \\\"id\\\": 21, \\\"x\\\": 0, \\\"y\\\": 1, \\\"rotation\\\": 0 }, // Hacknet Cost Reduction *new*\\n            { \\\"id\\\": 25, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 2 }, // Reputation\\n            { \\\"id\\\": 102, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 2 } // Booster\\n        ]\\n    }, {\\n        \\\"height\\\": 6, \\\"width\\\": 6, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 2, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Hacking Mult\\n            { \\\"id\\\": 5, \\\"x\\\": 3, \\\"y\\\": 3, \\\"rotation\\\": 1 }, // Hacking Speed\\n            { \\\"id\\\": 20, \\\"x\\\": 5, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Hacknet Production\\n            { \\\"id\\\": 21, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacknet Cost Reduction\\n            { \\\"id\\\": 25, \\\"x\\\": 3, \\\"y\\\": 0, \\\"rotation\\\": 2 }, // Reputation\\n            { \\\"id\\\": 103, \\\"x\\\": 0, \\\"y\\\": 4, \\\"rotation\\\": 2 }, // Booster\\n            { \\\"id\\\": 104, \\\"x\\\": 2, \\\"y\\\": 0, \\\"rotation\\\": 1 } // Booster *new*\\n        ]\\n    }, { // Special thanks to @Ansopedi (a.k.a. Zoëkeeper) for solving for this layout\\n        \\\"height\\\": 6, \\\"width\\\": 7, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 3, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 1, \\\"y\\\": 3, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 5, \\\"x\\\": 4, \\\"y\\\": 1, \\\"rotation\\\": 1 }, // Hacking Speed\\n            { \\\"id\\\": 6, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hack power *new*\\n            { \\\"id\\\": 7, \\\"x\\\": 4, \\\"y\\\": 0, \\\"rotation\\\": 2 }, // Grow power *new*\\n            { \\\"id\\\": 20, \\\"x\\\": 6, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Hacknet Production\\n            { \\\"id\\\": 21, \\\"x\\\": 0, \\\"y\\\": 4, \\\"rotation\\\": 0 }, // Hacknet Cost Reduction\\n            { \\\"id\\\": 25, \\\"x\\\": 0, \\\"y\\\": 1, \\\"rotation\\\": 1 }, // Reputation\\n            { \\\"id\\\": 101, \\\"x\\\": 2, \\\"y\\\": 4, \\\"rotation\\\": 2 }, // Booster\\n            { \\\"id\\\": 102, \\\"x\\\": 1, \\\"y\\\": 1, \\\"rotation\\\": 0 }, // Booster\\n        ]\\n    }, { // Note: Late BN12, as Stanek gets bigger, Bladeburner also becomes a faster win condition, so we start adding those stats\\n        \\\"height\\\": 7, \\\"width\\\": 7, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 1, \\\"y\\\": 5, \\\"rotation\\\": 2 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 3, \\\"y\\\": 3, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 5, \\\"x\\\": 0, \\\"y\\\": 4, \\\"rotation\\\": 3 }, // Hacking Speed\\n            { \\\"id\\\": 6, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 1 }, // Hack power\\n            { \\\"id\\\": 7, \\\"x\\\": 1, \\\"y\\\": 1, \\\"rotation\\\": 1 }, // Grow power\\n            { \\\"id\\\": 20, \\\"x\\\": 1, \\\"y\\\": 0, \\\"rotation\\\": 2 }, // Hacknet Production\\n            { \\\"id\\\": 21, \\\"x\\\": 3, \\\"y\\\": 1, \\\"rotation\\\": 0 }, // Hacknet Cost Reduction\\n            { \\\"id\\\": 25, \\\"x\\\": 5, \\\"y\\\": 4, \\\"rotation\\\": 3 }, // Reputation\\n            { \\\"id\\\": 30, \\\"x\\\": 3, \\\"y\\\": 5, \\\"rotation\\\": 2 }, // Bladeburner Stats *new*\\n            { \\\"id\\\": 101, \\\"x\\\": 5, \\\"y\\\": 0, \\\"rotation\\\": 3 }, // Booster\\n            { \\\"id\\\": 106, \\\"x\\\": 1, \\\"y\\\": 2, \\\"rotation\\\": 3 }, // Booster\\n        ]\\n    }, {\\n        \\\"height\\\": 7, \\\"width\\\": 8, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 4, \\\"y\\\": 1, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 4, \\\"y\\\": 4, \\\"rotation\\\": 3 }, // Hacking Mult\\n            { \\\"id\\\": 5, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Hacking Speed\\n            { \\\"id\\\": 6, \\\"x\\\": 3, \\\"y\\\": 0, \\\"rotation\\\": 2 }, // Hack power\\n            { \\\"id\\\": 7, \\\"x\\\": 2, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Grow power\\n            { \\\"id\\\": 14, \\\"x\\\": 0, \\\"y\\\": 3, \\\"rotation\\\": 1 }, // Dexterity *new*\\n            { \\\"id\\\": 16, \\\"x\\\": 5, \\\"y\\\": 5, \\\"rotation\\\": 2 }, // Agility *new*\\n            { \\\"id\\\": 20, \\\"x\\\": 0, \\\"y\\\": 6, \\\"rotation\\\": 0 }, // Hacknet Production\\n            { \\\"id\\\": 21, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacknet Cost Reduction\\n            { \\\"id\\\": 25, \\\"x\\\": 6, \\\"y\\\": 0, \\\"rotation\\\": 3 }, // Reputation\\n            { \\\"id\\\": 30, \\\"x\\\": 2, \\\"y\\\": 4, \\\"rotation\\\": 0 }, // Bladeburner Stats\\n            { \\\"id\\\": 103, \\\"x\\\": 4, \\\"y\\\": 3, \\\"rotation\\\": 0 }, // Booster\\n            { \\\"id\\\": 105, \\\"x\\\": 1, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Booster\\n        ]\\n    }, { // Adds Charisma, which even a small boost makes a huge difference (hours) in grinding company rep\\n        // TODO: Consider adding charisma boosts a little earlier on in the prior 2 layouts.\\n        \\\"height\\\": 8, \\\"width\\\": 8, \\\"fragments\\\": [ // ~BN 12.50\\n            { \\\"id\\\": 0, \\\"x\\\": 3, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 2, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Hacking Mult\\n            { \\\"id\\\": 5, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 3 }, // Hacking Speed\\n            { \\\"id\\\": 6, \\\"x\\\": 7, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Hack power\\n            { \\\"id\\\": 7, \\\"x\\\": 4, \\\"y\\\": 5, \\\"rotation\\\": 3 }, // Grow power\\n            { \\\"id\\\": 14, \\\"x\\\": 3, \\\"y\\\": 4, \\\"rotation\\\": 3 }, // Dexterity\\n            { \\\"id\\\": 16, \\\"x\\\": 5, \\\"y\\\": 1, \\\"rotation\\\": 1 }, // Agility\\n            { \\\"id\\\": 18, \\\"x\\\": 6, \\\"y\\\": 5, \\\"rotation\\\": 1 }, // Charisma *new*\\n            { \\\"id\\\": 20, \\\"x\\\": 0, \\\"y\\\": 3, \\\"rotation\\\": 3 }, // Hacknet Production\\n            { \\\"id\\\": 21, \\\"x\\\": 6, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacknet Cost Reduction\\n            { \\\"id\\\": 25, \\\"x\\\": 2, \\\"y\\\": 5, \\\"rotation\\\": 3 }, // Reputation\\n            { \\\"id\\\": 30, \\\"x\\\": 0, \\\"y\\\": 6, \\\"rotation\\\": 0 }, // Bladeburner Stats\\n            { \\\"id\\\": 101, \\\"x\\\": 1, \\\"y\\\": 2, \\\"rotation\\\": 3 }, // Booster\\n            { \\\"id\\\": 105, \\\"x\\\": 4, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Booster\\n            { \\\"id\\\": 106, \\\"x\\\": 1, \\\"y\\\": 0, \\\"rotation\\\": 1 }, // Booster *new* (Thanks @aeroleo)\\n        ]\\n    }, { // Took a minute and found a way to cram Defense and Strength in\\n        \\\"height\\\": 8, \\\"width\\\": 9, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 4, \\\"y\\\": 1, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 4, \\\"y\\\": 4, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 5, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Hacking Speed\\n            { \\\"id\\\": 6, \\\"x\\\": 3, \\\"y\\\": 0, \\\"rotation\\\": 2 }, // Hack power\\n            { \\\"id\\\": 7, \\\"x\\\": 2, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Grow power\\n            { \\\"id\\\": 10, \\\"x\\\": 4, \\\"y\\\": 6, \\\"rotation\\\": 2 }, // Strength *new*\\n            { \\\"id\\\": 12, \\\"x\\\": 6, \\\"y\\\": 5, \\\"rotation\\\": 0 }, // Defense *new*\\n            { \\\"id\\\": 14, \\\"x\\\": 1, \\\"y\\\": 5, \\\"rotation\\\": 1 }, // Dexterity\\n            { \\\"id\\\": 16, \\\"x\\\": 7, \\\"y\\\": 0, \\\"rotation\\\": 3 }, // Agility\\n            { \\\"id\\\": 18, \\\"x\\\": 3, \\\"y\\\": 4, \\\"rotation\\\": 1 }, // Charisma\\n            { \\\"id\\\": 20, \\\"x\\\": 0, \\\"y\\\": 3, \\\"rotation\\\": 3 }, // Hacknet Production\\n            { \\\"id\\\": 21, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacknet Cost Reduction\\n            { \\\"id\\\": 25, \\\"x\\\": 4, \\\"y\\\": 3, \\\"rotation\\\": 2 }, // Reputation\\n            { \\\"id\\\": 30, \\\"x\\\": 2, \\\"y\\\": 5, \\\"rotation\\\": 1 }, // Bladeburner Stats\\n            { \\\"id\\\": 101, \\\"x\\\": 6, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Booster\\n            { \\\"id\\\": 105, \\\"x\\\": 1, \\\"y\\\": 2, \\\"rotation\\\": 0 } // Booster\\n        ]\\n    }, { // Ample Space ~ BN 12.85 to get more boosts on all stats\\n        \\\"height\\\": 9, \\\"width\\\": 9, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 4, \\\"y\\\": 1, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 1, \\\"x\\\": 4, \\\"y\\\": 4, \\\"rotation\\\": 0 }, // Hacking Mult\\n            { \\\"id\\\": 5, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Hacking Speed\\n            { \\\"id\\\": 6, \\\"x\\\": 4, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hack power\\n            { \\\"id\\\": 7, \\\"x\\\": 2, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Grow power\\n            { \\\"id\\\": 10, \\\"x\\\": 7, \\\"y\\\": 2, \\\"rotation\\\": 1 }, // Strength\\n            { \\\"id\\\": 12, \\\"x\\\": 5, \\\"y\\\": 7, \\\"rotation\\\": 0 }, // Defense\\n            { \\\"id\\\": 14, \\\"x\\\": 1, \\\"y\\\": 5, \\\"rotation\\\": 1 }, // Dexterity\\n            { \\\"id\\\": 16, \\\"x\\\": 5, \\\"y\\\": 6, \\\"rotation\\\": 0 }, // Agility\\n            { \\\"id\\\": 18, \\\"x\\\": 3, \\\"y\\\": 4, \\\"rotation\\\": 1 }, // Charisma\\n            { \\\"id\\\": 20, \\\"x\\\": 0, \\\"y\\\": 3, \\\"rotation\\\": 3 }, // Hacknet Production\\n            { \\\"id\\\": 21, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacknet Cost Reduction\\n            { \\\"id\\\": 25, \\\"x\\\": 4, \\\"y\\\": 3, \\\"rotation\\\": 2 }, // Reputation\\n            { \\\"id\\\": 30, \\\"x\\\": 2, \\\"y\\\": 5, \\\"rotation\\\": 1 }, // Bladeburner Stats\\n            { \\\"id\\\": 101, \\\"x\\\": 1, \\\"y\\\": 7, \\\"rotation\\\": 2 }, // Booster *new*\\n            { \\\"id\\\": 101, \\\"x\\\": 7, \\\"y\\\": 5, \\\"rotation\\\": 1 }, // Booster\\n            { \\\"id\\\": 105, \\\"x\\\": 1, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Booster\\n            { \\\"id\\\": 105, \\\"x\\\": 6, \\\"y\\\": 0, \\\"rotation\\\": 0 } // Booster *new*\\n        ]\\n    }\\n\\n];\\n\\n// Not used for anything, but captures our rough priorities when designing the above layouts\\nconst priorities = [\\n    { id: 25, weight: 13.0 }, /* Faction Rep */\\n    { id: 0, weight: 12.0 }, /* Hack Mult */\\n    { id: 1, weight: 11.0 }, /* Hack Mult */\\n    // Generally prefer adding one of these stats over triple-boosting the above\\n    { id: 5, weight: 1.15 }, /* Hack Speed */\\n    { id: 20, weight: 1.14 }, /* Hacknet Prod */\\n    { id: 21, weight: 1.13 }, /* Hacknet Cost */\\n    { id: 6, weight: 1.12 }, /* Hack Power */\\n    { id: 7, weight: 1.11 }, /* Grow Power */\\n    { id: 30, weight: 1.10 }, /* Bladeburner */\\n    { id: 16, weight: 1.09 }, /* Agi */\\n    { id: 14, weight: 1.08 }, /* Dex */\\n    // Generally prefer additional boost over the below\\n    { id: 28, weight: 0.99 }, /* Crime Money */\\n    { id: 18, weight: 0.98 }, /* Cha */\\n    { id: 10, weight: 0.97 }, /* Str */\\n    { id: 12, weight: 0.96 }, /* Def */\\n    { id: 28, weight: 0.95 }, /* Work Money */\\n]\\n\\n// Not used, but these alternative layouts favour fitting more stat pieces vs. boosting most important stats, use if you please\\nconst alternativeLayouts = [\\n    {\\n        \\\"height\\\": 3, \\\"width\\\": 4, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 1, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacking Chance\\n            { \\\"id\\\": 25, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 1 }, // Reputation\\n            { \\\"id\\\": 28, \\\"x\\\": 1, \\\"y\\\": 1, \\\"rotation\\\": 0 }, // Crime Money\\n        ]\\n    }, {\\n        \\\"height\\\": 4, \\\"width\\\": 4, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 2 }, // Hacking Chance\\n            { \\\"id\\\": 7, \\\"x\\\": 2, \\\"y\\\": 1, \\\"rotation\\\": 3 }, // Grow power\\n            { \\\"id\\\": 25, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 1 }, // Reputation\\n            { \\\"id\\\": 30, \\\"x\\\": 1, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Bladeburner\\n        ]\\n    }, {\\n        \\\"height\\\": 6, \\\"width\\\": 6, \\\"fragments\\\": [\\n            { \\\"id\\\": 0, \\\"x\\\": 0, \\\"y\\\": 2, \\\"rotation\\\": 0 }, // Hacking Chance\\n            { \\\"id\\\": 1, \\\"x\\\": 0, \\\"y\\\": 4, \\\"rotation\\\": 0 }, // Hacking Chance\\n            { \\\"id\\\": 5, \\\"x\\\": 2, \\\"y\\\": 1, \\\"rotation\\\": 0 }, // Hacking Speed\\n            { \\\"id\\\": 6, \\\"x\\\": 2, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hack power\\n            { \\\"id\\\": 7, \\\"x\\\": 2, \\\"y\\\": 3, \\\"rotation\\\": 2 }, // Grow power\\n            { \\\"id\\\": 20, \\\"x\\\": 5, \\\"y\\\": 1, \\\"rotation\\\": 1 }, // Hacknet Production\\n            { \\\"id\\\": 21, \\\"x\\\": 0, \\\"y\\\": 0, \\\"rotation\\\": 0 }, // Hacknet Cost Reduction\\n            { \\\"id\\\": 25, \\\"x\\\": 3, \\\"y\\\": 4, \\\"rotation\\\": 0 }, // Reputation\\n        ]\\n    }\\n]\",\"filename\":\"stanek.js.create.js\",\"server\":\"home\"}}],[\"stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    log, disableLogs, instanceCount, getConfiguration, getNsDataThroughFile, getActiveSourceFiles,\\n    getStocksValue, formatNumberShort, formatMoney, formatRam\\n} from './helpers.js'\\n\\nconst argsSchema = [\\n    ['show-peoplekilled', false],\\n    ['hide-stocks', false],\\n    ['hide-RAM-utilization', false],\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\nlet doc, hook0, hook1;\\nlet playerInBladeburner = false, nodeMap = {}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = getConfiguration(ns, argsSchema);\\n    if (!options || await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n\\n    const dictSourceFiles = await getActiveSourceFiles(ns, false); // Find out what source files the user has unlocked\\n    let resetInfo = await getNsDataThroughFile(ns, 'ns.getResetInfo()');\\n    const bitNode = resetInfo.currentNode;\\n    disableLogs(ns, ['sleep']);\\n\\n    // Globals need to reset at startup. Otherwise, they can survive e.g. flumes and new BNs and return stale results\\n    playerInBladeburner = false;\\n    nodeMap = {};\\n    doc = eval('document');\\n    hook0 = doc.getElementById('overview-extra-hook-0');\\n    hook1 = doc.getElementById('overview-extra-hook-1');\\n\\n    // Hook script exit to clean up after ourselves.\\n    ns.atExit(() => hook1.innerHTML = hook0.innerHTML = \\\"\\\")\\n\\n    addCSS(doc);\\n\\n    prepareHudElements(await getHudData(ns, bitNode, dictSourceFiles, options))\\n\\n    // Main stats update loop\\n    while (true) {\\n        try {\\n            const hudData = await getHudData(ns, bitNode, dictSourceFiles, options)\\n\\n            // update HUD elements with info collected above.\\n            for (const [header, show, formattedValue, toolTip] of hudData) {\\n                updateHudElement(header, show, formattedValue, toolTip)\\n            }\\n        } catch (err) {\\n            // Might run out of ram from time to time, since we use it dynamically\\n            log(ns, `WARNING: stats.js Caught (and suppressed) an unexpected error in the main loop. Update Skipped:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n\\nfunction prepareHudElements(hudData) {\\n    const newline = (id, txt, toolTip = \\\"\\\") => {\\n        const p = doc.createElement(\\\"p\\\");\\n        p.className = \\\"tooltip hidden\\\";\\n        const text = doc.createElement(\\\"span\\\");\\n        text.textContent = txt;\\n        p.appendChild(text);\\n        const tooltip = doc.createElement(\\\"span\\\");\\n        p.appendChild(tooltip);\\n        tooltip.textContent = toolTip;\\n        tooltip.className = \\\"tooltiptext\\\";\\n        nodeMap[id] = [text, tooltip, p]\\n        return p;\\n    }\\n\\n    for (const [header, visible, value, toolTip] of hudData) {\\n        const id = makeID(header)\\n        hook0.appendChild(newline(id + \\\"-title\\\", header.padEnd(9, \\\" \\\"), toolTip))\\n        hook1.appendChild(newline(id + \\\"-value\\\", value, toolTip))\\n    }\\n}\\n\\nfunction makeID(header) {\\n    return header.replace(\\\" \\\", \\\"\\\") ?? \\\"empty-header\\\"\\n}\\n\\nfunction updateHudElement(header, visible, value, toolTip) {\\n    const id = makeID(header),\\n        valId = id + \\\"-value\\\",\\n        titleId = id + \\\"-title\\\",\\n        maybeUpdate = (id, index, value) => {\\n            if (nodeMap[id][index].textContent != value)\\n                nodeMap[id][index].textContent = value\\n        }\\n\\n    if (visible) {\\n        maybeUpdate(valId, 0, value)\\n        maybeUpdate(valId, 1, toolTip)\\n        maybeUpdate(titleId, 1, toolTip)\\n        nodeMap[titleId][2].classList.remove(\\\"hidden\\\")\\n        nodeMap[valId][2].classList.remove(\\\"hidden\\\")\\n    } else {\\n        nodeMap[titleId][2].classList.add(\\\"hidden\\\")\\n        nodeMap[valId][2].classList.add(\\\"hidden\\\")\\n    }\\n}\\n\\n/** @param {NS} ns **/\\nasync function getHudData(ns, bitNode, dictSourceFiles, options) {\\n    const hudData = [];\\n\\n    // Show what bitNode we're currently playing in\\n    {\\n        const val = [\\\"BitNode\\\", true, `${bitNode}.${1 + (dictSourceFiles[bitNode] || 0)}`,\\n            `Detected as being one more than your current owned SF level (${dictSourceFiles[bitNode] || 0}) in the current bitnode (${bitNode}).`]\\n        hudData.push(val)\\n    }\\n\\n    // Show Hashes\\n    {\\n        const val1 = [\\\"Hashes\\\"]\\n        const val2 = [\\\" \\\"]\\n        if (9 in dictSourceFiles || 9 == bitNode) { // Section not relevant if you don't have access to hacknet servers\\n            const hashes = await getNsDataThroughFile(ns, '[ns.hacknet.numHashes(), ns.hacknet.hashCapacity()]', '/Temp/hash-stats.txt')\\n            if (hashes[1] > 0) {\\n                val1.push(true, `${formatNumberShort(hashes[0], 3, 1)}/${formatNumberShort(hashes[1], 3, 1)}`,\\n                    `Current Hashes ${hashes[0].toLocaleString('en')} / Current Hash Capacity ${hashes[1].toLocaleString('en')}`)\\n            } else val1.push(false)\\n            // Detect and notify the HUD if we are liquidating hashes (selling them as quickly as possible)               \\n            if (ns.isRunning('spend-hacknet-hashes.js', 'home', '--liquidate') || ns.isRunning('spend-hacknet-hashes.js', 'home', '-l')) {\\n                val2.push(true, \\\"Liquidating\\\", 'You have a script running that is selling hashes as quickly as possible (likely `spend-hacknet-hashes.js --liquidate`)')\\n            } else val2.push(false)\\n        } else {\\n            val1.push(false)\\n            val2.push(false)\\n        }\\n        hudData.push(val1, val2)\\n    }\\n\\n    {\\n        const val = [\\\"Stock\\\"]\\n        // Show Stocks (only if stockmaster.js isn't already doing the same)\\n        if (!options['hide-stocks'] && !doc.getElementById(\\\"stock-display-1\\\")) {\\n            const stkPortfolio = await getStocksValue(ns);\\n            // Also, don't bother showing a section for stock if we aren't holding anything\\n            if (stkPortfolio > 0) val.push(true, formatMoney(stkPortfolio))\\n            else val.push(false)\\n        } else val.push(false)\\n        hudData.push(val)\\n    }\\n\\n    // Show total instantaneous script income and experience per second (values provided directly by the game)\\n    hudData.push([\\\"Scr Inc\\\", true, formatMoney(ns.getTotalScriptIncome()[0], 3, 2) + '/sec', \\\"Total 'instantenous' income per second being earned across all scripts running on all servers.\\\"]);\\n    hudData.push([\\\"Scr Exp\\\", true, formatNumberShort(ns.getTotalScriptExpGain(), 3, 2) + '/sec', \\\"Total 'instantenous' hack experience per second being earned across all scripts running on all servers.\\\"]);\\n\\n    // Show reserved money\\n    {\\n        const val = [\\\"Reserve\\\"]\\n        const reserve = Number(ns.read(\\\"reserve.txt\\\") || 0);\\n        if (reserve > 0) {\\n            val.push(true, formatNumberShort(reserve, 3, 2), \\\"Most scripts will leave this much money unspent. Remove with `run reserve.js 0`\\\");\\n        } else val.push(false)\\n        hudData.push(val)\\n    }\\n\\n    // needed for gang and karma\\n    const gangInfo = await getGangInfo(ns);\\n\\n    // Show gang income and territory\\n    {\\n        const val1 = [\\\"Gang Inc\\\"]\\n        const val2 = [\\\"Territory\\\"]\\n        // Gang income is only relevant once gangs are unlocked\\n        if ((2 in dictSourceFiles || 2 == bitNode) && gangInfo) {\\n            // Add Gang Income\\n            val1.push(true, formatMoney(gangInfo.moneyGainRate * 5, 3, 2) + '/sec',\\n                `Gang (${gangInfo.faction}) income per second while doing tasks.` +\\n                `\\\\nIncome: ${formatMoney(gangInfo.moneyGainRate * 5)}/sec (${formatMoney(gangInfo.moneyGainRate)}/tick)` +\\n                `  Respect: ${formatNumberShort(gangInfo.respect)} (${formatNumberShort(gangInfo.respectGainRate)}/tick)` +\\n                `\\\\nNote: If you see 0, your gang may all be temporarily set to training or territory warfare.`);\\n            // Add Gang Territory\\n            val2.push(true, formatNumberShort(gangInfo.territory * 100, 4, 2) + \\\"%\\\",\\n                `How your gang is currently doing in territory warfare. Starts at 14.29%\\\\n` +\\n                `Gang: ${gangInfo.faction} ${gangInfo.isHacking ? \\\"(Hacking)\\\" : \\\"(Combat)\\\"}  ` +\\n                `Power: ${gangInfo.power.toLocaleString('en')}  Clash ${gangInfo.territoryWarfareEngaged ? \\\"enabled\\\" : \\\"disabled\\\"} ` +\\n                `(${(gangInfo.territoryClashChance * 100).toFixed(0)}% chance)`);\\n        } else {\\n            val1.push(false)\\n            val2.push(false)\\n        }\\n        hudData.push(val1, val2)\\n    }\\n\\n    // Show Karma if we're not in a gang yet\\n    {\\n        const val = [\\\"Karma\\\"]\\n        const karma = ns.heart.break();\\n        // Don't spoiler Karma if they haven't started doing crime yet\\n        if (karma <= -9\\n            // If in a gang, you know you have oodles of bad Karma. Save some space\\n            && !gangInfo) {\\n            let karmaShown = formatNumberShort(karma, 3, 2);\\n            if (2 in dictSourceFiles && 2 != bitNode && !gangInfo) karmaShown += '/54k'; // Display karma needed to unlock gangs ouside of BN2\\n            val.push(true, karmaShown, \\\"After Completing BN2, you need -54,000 Karma in other BNs to start a gang. You also need a tiny amount to join some factions. The most is -90 for 'The Syndicate'\\\");\\n        } else val.push(false)\\n        hudData.push(val)\\n    }\\n\\n    // Show number of kills if explicitly enabled\\n    {\\n        const val = [\\\"Kills\\\"]\\n        if (options['show-peoplekilled']) {\\n            const playerInfo = await getNsDataThroughFile(ns, 'ns.getPlayer()');\\n            const numPeopleKilled = playerInfo.numPeopleKilled;\\n            val.push(true, formatSixSigFigs(numPeopleKilled), \\\"Count of successful Homicides. Note: The most kills you need is 30 for 'Speakers for the Dead'\\\");\\n        } else val.push(false)\\n        hudData.push(val)\\n    }\\n\\n    // Show Bladeburner Rank and Skill Points\\n    {\\n        const val1 = [\\\"BB Rank\\\"]\\n        const val2 = [\\\"BB SP\\\"]\\n        // Bladeburner API unlocked\\n        if ((7 in dictSourceFiles || 7 == bitNode)\\n            // Check if we're in bladeburner. Once we find we are, we don't have to check again.\\n            && (playerInBladeburner = playerInBladeburner || await getNsDataThroughFile(ns, 'ns.bladeburner.inBladeburner()'))) {\\n            const bbRank = await getNsDataThroughFile(ns, 'ns.bladeburner.getRank()');\\n            const bbSP = await getNsDataThroughFile(ns, 'ns.bladeburner.getSkillPoints()');\\n            val1.push(true, formatSixSigFigs(bbRank), \\\"Your current bladeburner rank\\\");\\n            val2.push(true, formatSixSigFigs(bbSP), \\\"Your current unspent bladeburner skill points\\\");\\n        } else {\\n            val1.push(false)\\n            val2.push(false)\\n        }\\n        hudData.push(val1, val2)\\n    }\\n\\n    // Show various server / RAM utilization stats\\n    {\\n        const val1 = [\\\"Servers\\\"]\\n        const val2 = [\\\"Home RAM\\\"]\\n        const val3 = [\\\"All RAM\\\"]\\n        if (!options['hide-RAM-utilization']) {\\n            const servers = await getAllServersInfo(ns);\\n            const rooted = servers.filter(s => s.hasAdminRights).length;\\n            const purchased = servers.filter(s => s.hostname != \\\"home\\\" && s.purchasedByPlayer).length; // \\\"home\\\" counts as purchased by the game\\n            const likelyHacknet = servers.filter(s => s.hostname.startsWith(\\\"hacknet-node-\\\"));\\n            // Add Server count.\\n            val1.push(true, `${servers.length}/${rooted}/${purchased}`, `The number of servers on the network (${servers.length}) / ` +\\n                `number rooted (${rooted}) / number purchased ` + (likelyHacknet.length > 0 ?\\n                    `(${purchased - likelyHacknet.length} servers + ${likelyHacknet.length} hacknet servers)` : `(${purchased})`));\\n            const home = servers.find(s => s.hostname == \\\"home\\\");\\n            // Add Home RAM and Utilization\\n            val2.push(true, `${formatRam(home.maxRam)} ${(100 * home.ramUsed / home.maxRam).toFixed(1)}%`,\\n                `Shows total home RAM (and current utilization %)\\\\nDetails: ${home.cpuCores} cores and using ` +\\n                `${formatRam(home.ramUsed)} of ${formatRam(home.maxRam)} (${formatRam(home.maxRam - home.ramUsed)} free)`);\\n            // If the user has any scripts running on hacknet servers, assume they want them included in available RAM stats\\n            const includeHacknet = likelyHacknet.some(s => s.ramUsed > 0);\\n            const [totalMax, totalUsed] = servers.filter(s => s.hasAdminRights && (includeHacknet || !s.hostname.startsWith(\\\"hacknet-node-\\\")))\\n                .reduce(([totalMax, totalUsed], s) => [totalMax + s.maxRam, totalUsed + s.ramUsed], [0, 0]);\\n            // Add Total Network RAM and Utilization\\n            val3.push(true, `${formatRam(totalMax)} ${(100 * totalUsed / totalMax).toFixed(1)}%`,\\n                `Shows the sum-total RAM and utilization across all rooted hosts on the network` + (9 in dictSourceFiles || 9 == bitNode ?\\n                    (includeHacknet ? \\\"\\\\n(including hacknet servers, because you have scripts running on them)\\\" : \\\" (excluding hacknet servers)\\\") : \\\"\\\") +\\n                `\\\\nDetails: Using ${formatRam(totalUsed)} of ${formatRam(totalMax)} (${formatRam(totalMax - totalUsed)} free)`);\\n        } else {\\n            val1.push(false)\\n            val2.push(false)\\n            val3.push(false)\\n        }\\n        hudData.push(val1, val2, val3)\\n    }\\n\\n    // Show current share power\\n    {\\n        const val = [\\\"Share Pwr\\\"]\\n        const sharePower = await getNsDataThroughFile(ns, 'ns.getSharePower()');\\n        // Bitburner bug: Trace amounts of share power sometimes left over after we stop sharing\\n        if (sharePower > 1.0001) {\\n            val.push(true, formatNumberShort(sharePower, 3, 2),\\n                \\\"Uses RAM to boost faction reputation gain rate while working for factions (capped at 1.5) \\\" +\\n                \\\"\\\\nRun `daemon.js` with the `--no-share` flag to disable.\\\");\\n        } else val.push(false)\\n        hudData.push(val)\\n    }\\n\\n    return hudData\\n}\\n\\nfunction formatSixSigFigs(value, minDecimalPlaces = 0, maxDecimalPlaces = 0) {\\n    return value >= 1E7 ? formatNumberShort(value, 6, 3) :\\n        value.toLocaleString(undefined, { minimumFractionDigits: minDecimalPlaces, maximumFractionDigits: maxDecimalPlaces });\\n}\\n\\n/** @param {NS} ns\\n *  @returns {Promise<GangGenInfo|boolean>} Gang information, if we're in a gang, or False */\\nasync function getGangInfo(ns) {\\n    return await getNsDataThroughFile(ns, 'ns.gang.inGang() ? ns.gang.getGangInformation() : false', '/Temp/gang-stats.txt')\\n}\\n\\n/** @param {NS} ns \\n * @returns {Promise<Server[]>} **/\\nasync function getAllServersInfo(ns) {\\n    const serverNames = await getNsDataThroughFile(ns, 'scanAllServers(ns)');\\n    return await getNsDataThroughFile(ns, 'ns.args.map(ns.getServer)', '/Temp/getServers.txt', serverNames);\\n}\\n\\nfunction addCSS(doc) {\\n    let priorCss = doc.getElementById(\\\"statsCSS\\\");\\n    if (priorCss) priorCss.parentNode.removeChild(priorCss); // Remove old CSS to facilitate tweaking css above\\n    // Hopefully this logic remains valid for detecting which element is the HUD draggable window\\n    const hudParent = doc.getElementsByClassName(`MuiCollapse-root`)[0].parentElement;\\n    if (hudParent) hudParent.style.zIndex = 1E4; // Tail windows start around 1500, this should keep the HUD above them\\n    doc.head.insertAdjacentHTML('beforeend', css(hudParent ? eval('window').getComputedStyle(hudParent) : null));\\n}\\nconst css = (rootStyle) => `<style id=\\\"statsCSS\\\">\\n    .MuiTooltip-popper { z-index: 10001 } /* Sadly, not parented by its owners, so must be updated with MuiCollapse-root's parent */\\n    .tooltip  { margin: 0; position: relative; }\\n    .tooltip.hidden { display: none; }\\n    .tooltip:hover .tooltiptext { visibility: visible; opacity: 0.85; }\\n    .tooltip .tooltiptext {\\n        visibility: hidden; position: absolute; z-index: 1;\\n        right: 20px; top: 19px; padding: 2px 10px;\\n        text-align: right; white-space: pre;       \\n        border-radius: 6px; border: ${rootStyle?.border || \\\"inherit\\\"};\\n        background-color: ${rootStyle?.backgroundColor || \\\"#900C\\\"};\\n    }\\n</style>`;\\n\",\"filename\":\"stats.js\",\"server\":\"home\"}}],[\"stockmaster.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    instanceCount, getConfiguration, getNsDataThroughFile, runCommand, getActiveSourceFiles, tryGetBitNodeMultipliers,\\n    formatMoney, formatNumberShort, formatDuration, getStockSymbols\\n} from './helpers.js'\\n\\nlet disableShorts = false;\\nlet commission = 100000; // Buy/sell commission. Expected profit must exceed this to buy anything.\\nlet totalProfit = 0.0; // We can keep track of how much we've earned since start.\\nlet lastLog = \\\"\\\"; // We update faster than the stock-market ticks, but we don't log anything unless there's been a change\\nlet allStockSymbols = null; // Stores the set of all symbols collected at start\\nlet mock = false; // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anythingorecast\\nlet noisy = false; // If set to true, tprints and announces each time stocks are bought/sold\\nlet dictSourceFiles; // Populated at init, a dictionary of source-files the user has access to, and their level\\n// Pre-4S configuration (influences how we play the stock market before we have 4S data, after which everything's fool-proof)\\nlet showMarketSummary = false;  // If set to true, will always generate and display the pre-4s forecast table in a separate tail window\\nlet minTickHistory; // This much history must be gathered before we will offer a stock forecast.\\nlet longTermForecastWindowLength; // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected)\\nlet nearTermForecastWindowLength; // This much history will be used to detect recent negative trends and act on them immediately.\\n// The following pre-4s constants are hard-coded (not configurable via command line) but may require tweaking\\nconst marketCycleLength = 75; // Every this many ticks, all stocks have a 45% chance of \\\"reversing\\\" their probability. Something we must detect and act on quick to not lose profits.\\nconst maxTickHistory = 151; // This much history will be kept for purposes of detemining volatility and perhaps one day pinpointing the market cycle tick\\nconst inversionDetectionTolerance = 0.10; // If the near-term forecast is within this distance of (1 - long-term forecast), consider it a potential \\\"inversion\\\"\\nconst inversionLagTolerance = 5; // An inversion is \\\"trusted\\\" up to this many ticks after the normal nearTermForecastWindowLength expected detection time\\n// (Note: 33 total stocks * 45% inversion chance each cycle = ~15 expected inversions per cycle)\\n// The following pre-4s values are set during the lifetime of the program\\nlet marketCycleDetected = false; // We should not make risky purchasing decisions until the stock market cycle is detected. This can take a long time, but we'll be thanked\\nlet detectedCycleTick = 0; // This will be reset to zero once we've detected the market cycle point.\\nlet inversionAgreementThreshold = 6; // If this many stocks are detected as being in an \\\"inversion\\\", consider this the stock market cycle point\\nconst expectedTickTime = 6000;\\nconst catchUpTickTime = 4000;\\nlet lastTick = 0;\\nlet sleepInterval = 1000;\\nlet resetInfo = (/**@returns{ResetInfo}*/() => undefined)(); // Information about the current bitnode\\n\\nlet options;\\nconst argsSchema = [\\n    ['l', false], // Stop any other running stockmaster.js instances and sell all stocks\\n    ['liquidate', false], // Long-form alias for the above flag.\\n    ['mock', false], // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n    ['noisy', false], // If set to true, tprints and announces each time stocks are bought/sold\\n    ['disable-shorts', false], // If set to true, will not short any stocks. Will be set depending on having SF8.2 by default.\\n    ['reserve', null], // A fixed amount of money to not spend\\n    ['fracB', 0.4], // Fraction of assets to have as liquid before we consider buying more stock\\n    ['fracH', 0.2], // Fraction of assets to retain as cash in hand when buying\\n    ['buy-threshold', 0.0001], // Buy only stocks forecasted to earn better than a 0.01% return (1 Basis Point)\\n    ['sell-threshold', 0], // Sell stocks forecasted to earn less than this return (default 0% - which happens when prob hits 50% or worse)\\n    ['diversification', 0.34], // Before we have 4S data, we will not hold more than this fraction of our portfolio as a single stock\\n    ['disableHud', false], // Disable showing stock value in the HUD panel\\n    ['disable-purchase-tix-api', false], // Disable purchasing the TIX API if you do not already have it.\\n    // The following settings are related only to tweaking pre-4s stock-market logic\\n    ['show-pre-4s-forecast', false], // If set to true, will always generate and display the pre-4s forecast (if false, it's only shown while we hold no stocks)\\n    ['show-market-summary', false], // Same effect as \\\"show-pre-4s-forecast\\\", this market summary has become so informative, it's valuable even with 4s\\n    ['pre-4s-buy-threshold-probability', 0.15], // Before we have 4S data, only buy stocks whose probability is more than this far away from 0.5, to account for imprecision\\n    ['pre-4s-buy-threshold-return', 0.0015], // Before we have 4S data, Buy only stocks forecasted to earn better than this return (default 0.25% or 25 Basis Points)\\n    ['pre-4s-sell-threshold-return', 0.0005], // Before we have 4S data, Sell stocks forecasted to earn less than this return (default 0.15% or 15 Basis Points)\\n    ['pre-4s-min-tick-history', 21], // This much history must be gathered before we will use pre-4s stock forecasts to make buy/sell decisions. (Default 21)\\n    ['pre-4s-forecast-window', 51], // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected) (Default 76)\\n    ['pre-4s-inversion-detection-window', 10], // This much history will be used to detect recent negative trends and act on them immediately. (Default 10)\\n    ['pre-4s-min-blackout-window', 10], // Do not make any new purchases this many ticks before the detected stock market cycle tick, to avoid buying a position that reverses soon after\\n    ['pre-4s-minimum-hold-time', 10], // A recently bought position must be held for this long before selling, to avoid rash decisions due to noise after a fresh market cycle. (Default 10)\\n    ['buy-4s-budget', 0.8], // Maximum corpus value we will sacrifice in order to buy 4S. Setting to 0 will never buy 4s.\\n];\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** Requires access to the TIX API. Purchases access to the 4S Mkt Data API as soon as it can \\n * @param {NS} ns */\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions) return; // Invalid options, or ran in --help mode.\\n\\n    // If given the \\\"liquidate\\\" command, try to kill any versions of this script trading in stocks\\n    // NOTE: We must do this immediately before we start resetting / overwriting global state below (which is shared between script instances)\\n    const hasTixApiAccess = await getNsDataThroughFile(ns, 'ns.stock.hasTIXAPIAccess()');\\n    if (runOptions.l || runOptions.liquidate) {\\n        if (!hasTixApiAccess) return log(ns, 'ERROR: Cannot liquidate stocks because we do not have Tix Api Access', true, 'error');\\n        log(ns, 'INFO: Killing any other stockmaster processes...', false, 'info');\\n        await runCommand(ns, `ns.ps().filter(proc => proc.filename == '${ns.getScriptName()}' && !proc.args.includes('-l') && !proc.args.includes('--liquidate'))` +\\n            `.forEach(proc => ns.kill(proc.pid))`, '/Temp/kill-stockmarket-scripts.js');\\n        log(ns, 'INFO: Checking for and liquidating any stocks...', false, 'info');\\n        await liquidate(ns); // Sell all stocks\\n        return;\\n    } // Otherwise, prevent multiple instances of this script from being started, even with different args.\\n    if (await instanceCount(ns) > 1) return;\\n\\n    ns.disableLog(\\\"ALL\\\");\\n    // Extract various options from the args (globals, purchasing decision factors, pre-4s factors)\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n    mock = options.mock;\\n    noisy = options.noisy;\\n    const fracB = options.fracB;\\n    const fracH = options.fracH;\\n    const diversification = options.diversification;\\n    const disableHud = options.disableHud || options.liquidate || options.mock;\\n    disableShorts = options['disable-shorts'];\\n    const pre4sBuyThresholdProbability = options['pre-4s-buy-threshold-probability'];\\n    const pre4sMinBlackoutWindow = options['pre-4s-min-blackout-window'] || 1;\\n    const pre4sMinHoldTime = options['pre-4s-minimum-hold-time'] || 0;\\n    minTickHistory = options['pre-4s-min-tick-history'] || 21;\\n    nearTermForecastWindowLength = options['pre-4s-inversion-detection-window'] || 10;\\n    longTermForecastWindowLength = options['pre-4s-forecast-window'] || (marketCycleLength + 1);\\n    showMarketSummary = options['show-pre-4s-forecast'] || options['show-market-summary'];\\n    // Other global values must be reset at start lest they be left in memory from a prior run\\n    lastTick = 0, totalProfit = 0, lastLog = \\\"\\\", marketCycleDetected = false, detectedCycleTick = 0, inversionAgreementThreshold = 6;\\n    let myStocks = [], allStocks = [];\\n    let player = await getPlayerInfo(ns);\\n    resetInfo = await getNsDataThroughFile(ns, 'ns.getResetInfo()');\\n\\n    if (!hasTixApiAccess) { // You cannot use the stockmaster until you have API access\\n        if (options['disable-purchase-tix-api'])\\n            return log(ns, \\\"ERROR: You do not have stock market API access, and --disable-purchase-tix-api is set.\\\", true);\\n        let success = false;\\n        log(ns, `INFO: You are missing stock market API access. (NOTE: This is granted for free once you have SF8). ` +\\n            `Waiting until we can have the 5b needed to buy it. (Run with --disable-purchase-tix-api to disable this feature.)`, true);\\n        do {\\n            await ns.sleep(sleepInterval);\\n            try {\\n                const reserve = options['reserve'] != null ? options['reserve'] : Number(ns.read(\\\"reserve.txt\\\") || 0);\\n                success = await tryGetStockMarketAccess(ns, player.money - reserve);\\n            } catch (err) {\\n                log(ns, `WARNING: stockmaster.js Caught (and suppressed) an unexpected error while waiting to buy stock market access:\\\\n` +\\n                    (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n            }\\n        } while (!success);\\n    }\\n\\n    dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    if (!disableShorts && (!(8 in dictSourceFiles) || dictSourceFiles[8] < 2)) {\\n        log(ns, \\\"INFO: Shorting stocks has been disabled (you have not yet unlocked access to shorting)\\\");\\n        disableShorts = true;\\n    }\\n\\n    allStockSymbols = await getStockSymbols(ns);\\n    allStocks = await initAllStocks(ns);\\n\\n    let bitnodeMults;\\n    if (5 in dictSourceFiles) bitnodeMults = await tryGetBitNodeMultipliers(ns);\\n    // Assume bitnode mults are 1 if user doesn't have this API access yet\\n    if (!bitnodeMults) bitnodeMults = { FourSigmaMarketDataCost: 1, FourSigmaMarketDataApiCost: 1 };\\n\\n    if (showMarketSummary) await launchSummaryTail(ns); // Opens a separate script / window to continuously display the Pre4S forecast\\n\\n    let hudElement = null;\\n    if (!disableHud) {\\n        hudElement = initializeHud();\\n        ns.atExit(() => hudElement.parentElement.parentElement.parentElement.removeChild(hudElement.parentElement.parentElement));\\n    }\\n\\n    log(ns, `Welcome! Please note: all stock purchases will initially result in a Net (unrealized) Loss. This is not only due to commission, but because each stock has a 'spread' (difference in buy price and sell price). ` +\\n        `This script is designed to buy stocks that are most likely to surpass that loss and turn a profit, but it will take a few minutes to see the progress.\\\\n\\\\n` +\\n        `If you choose to stop the script, make sure you SELL all your stocks (can go 'run ${ns.getScriptName()} --liquidate') to get your money back.\\\\n\\\\nGood luck!\\\\n~ Insight\\\\n\\\\n`)\\n\\n    let pre4s = true;\\n    while (true) {\\n        try {\\n            const playerStats = await getPlayerInfo(ns);\\n            const reserve = options['reserve'] != null ? options['reserve'] : Number(ns.read(\\\"reserve.txt\\\") || 0);\\n            // Check whether we have 4s access yes (once we do, we can stop checking)\\n            if (pre4s) pre4s = !(await checkAccess(ns, 'has4SDataTIXAPI'));\\n            const holdings = await refresh(ns, !pre4s, allStocks, myStocks); // Returns total stock value\\n            const corpus = holdings + playerStats.money; // Corpus means total stocks + cash\\n            const maxHoldings = (1 - fracH) * corpus; // The largest value of stock we could hold without violiating fracH (Fraction to keep as cash)\\n            if (pre4s && !mock && await tryGet4SApi(ns, playerStats, bitnodeMults, corpus * (options['buy-4s-budget'] - fracH) - reserve))\\n                continue; // Start the loop over if we just bought 4S API access\\n            // Be more conservative with our decisions if we don't have 4S data\\n            const thresholdToBuy = pre4s ? options['pre-4s-buy-threshold-return'] : options['buy-threshold'];\\n            const thresholdToSell = pre4s ? options['pre-4s-sell-threshold-return'] : options['sell-threshold'];\\n            if (myStocks.length > 0)\\n                doStatusUpdate(ns, allStocks, myStocks, hudElement);\\n            else if (hudElement) hudElement.innerText = \\\"$0.000 \\\";\\n            if (pre4s && allStocks[0].priceHistory.length < minTickHistory) {\\n                log(ns, `Building a history of stock prices (${allStocks[0].priceHistory.length}/${minTickHistory})...`);\\n                await ns.sleep(sleepInterval);\\n                continue;\\n            }\\n\\n            // Sell forecasted-to-underperform shares (worse than some expected return threshold)\\n            let sales = 0;\\n            for (let stk of myStocks) {\\n                if (stk.absReturn() <= thresholdToSell || stk.bullish() && stk.sharesShort > 0 || stk.bearish() && stk.sharesLong > 0) {\\n                    if (pre4s && stk.ticksHeld < pre4sMinHoldTime) {\\n                        if (!stk.warnedBadPurchase) log(ns, `WARNING: Thinking of selling ${stk.sym} with ER ${formatBP(stk.absReturn())}, but holding out as it was purchased just ${stk.ticksHeld} ticks ago...`);\\n                        stk.warnedBadPurchase = true; // Hack to ensure we don't spam this warning\\n                    } else {\\n                        sales += await doSellAll(ns, stk);\\n                        stk.warnedBadPurchase = false;\\n                    }\\n                }\\n            }\\n            if (sales > 0) continue; // If we sold anything, loop immediately (no need to sleep) and refresh stats immediately before making purchasing decisions.\\n\\n            // If we haven't gone above a certain liquidity threshold, don't attempt to buy more stock\\n            // Avoids death-by-a-thousand-commissions before we get super-rich, stocks are capped, and this is no longer an issue\\n            // BUT may mean we miss striking while the iron is hot while waiting to build up more funds.\\n            if (playerStats.money / corpus > fracB) {\\n                // Compute the cash we have to spend (such that spending it all on stock would bring us down to a liquidity of fracH)\\n                let cash = Math.min(playerStats.money - reserve, maxHoldings - holdings);\\n                // If we haven't detected the market cycle (or haven't detected it reliably), assume it might be quite soon and restrict bets to those that can turn a profit in the very-near term.\\n                const estTick = Math.max(detectedCycleTick, marketCycleLength - (!marketCycleDetected ? 10 : inversionAgreementThreshold <= 8 ? 20 : inversionAgreementThreshold <= 10 ? 30 : marketCycleLength));\\n                // Buy shares with cash remaining in hand if exceeding some buy threshold. Prioritize targets whose expected return will cover the ask/bit spread the soonest\\n                for (const stk of allStocks.sort(purchaseOrder)) {\\n                    if (cash <= 0) break; // Break if we are out of money (i.e. from prior purchases)\\n                    // Do not purchase a stock if it is not forecasted to recover from the ask/bid spread before the next market cycle and potential probability inversion\\n                    if (stk.blackoutWindow() >= marketCycleLength - estTick) continue;\\n                    if (pre4s && (Math.max(pre4sMinHoldTime, pre4sMinBlackoutWindow) >= marketCycleLength - estTick)) continue;\\n                    // Skip if we already own all possible shares in this stock, or if the expected return is below our threshold, or if shorts are disabled and stock is bearish\\n                    if (stk.ownedShares() == stk.maxShares || stk.absReturn() <= thresholdToBuy || (disableShorts && stk.bearish())) continue;\\n                    // If pre-4s, do not purchase any stock whose last inversion was too recent, or whose probability is too close to 0.5\\n                    if (pre4s && (stk.lastInversion < minTickHistory || Math.abs(stk.prob - 0.5) < pre4sBuyThresholdProbability)) continue;\\n\\n                    // Enforce diversification: Don't hold more than x% of our portfolio as a single stock (as corpus increases, this naturally stops being a limiter)\\n                    // Inflate our budget / current position value by a factor of stk.spread_pct to avoid repeated micro-buys of a stock due to the buy/ask spread making holdings appear more diversified after purchase\\n                    let budget = Math.min(cash, maxHoldings * (diversification + stk.spread_pct) - stk.positionValue() * (1.01 + stk.spread_pct))\\n                    let purchasePrice = stk.bullish() ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n                    let affordableShares = Math.floor((budget - commission) / purchasePrice);\\n                    let numShares = Math.min(stk.maxShares - stk.ownedShares(), affordableShares);\\n                    if (numShares <= 0) continue;\\n                    // Don't buy fewer shares than can beat the comission before the next stock market cycle (after covering the spread), lest the position reverse before we break-even.\\n                    let ticksBeforeCycleEnd = marketCycleLength - estTick - stk.timeToCoverTheSpread();\\n                    if (ticksBeforeCycleEnd < 1) continue; // We're cutting it too close to the market cycle, position might reverse before we break-even on commission\\n                    let estEndOfCycleValue = numShares * purchasePrice * ((stk.absReturn() + 1) ** ticksBeforeCycleEnd - 1); // Expected difference in purchase price and value at next market cycle end\\n                    let owned = stk.ownedShares() > 0;\\n                    if (estEndOfCycleValue <= 2 * commission)\\n                        log(ns, (owned ? '' : `We currently have ${formatNumberShort(stk.ownedShares(), 3, 1)} shares in ${stk.sym} valued at ${formatMoney(stk.positionValue())} ` +\\n                            `(${(100 * stk.positionValue() / maxHoldings).toFixed(1)}% of corpus, capped at ${(diversification * 100).toFixed(1)}% by --diversification).\\\\n`) +\\n                            `Despite attractive ER of ${formatBP(stk.absReturn())}, ${owned ? 'more ' : ''}${stk.sym} was not bought. ` +\\n                            `\\\\nBudget: ${formatMoney(budget)} can only buy ${numShares.toLocaleString('en')} ${owned ? 'more ' : ''}shares @ ${formatMoney(purchasePrice)}. ` +\\n                            `\\\\nGiven an estimated ${marketCycleLength - estTick} ticks left in market cycle, less ${stk.timeToCoverTheSpread().toFixed(1)} ticks to cover the spread (${(stk.spread_pct * 100).toFixed(2)}%), ` +\\n                            `remaining ${ticksBeforeCycleEnd.toFixed(1)} ticks would only generate ${formatMoney(estEndOfCycleValue)}, which is less than 2x commission (${formatMoney(2 * commission, 3)})`);\\n                    else\\n                        cash -= await doBuy(ns, stk, numShares);\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `WARNING: stockmaster.js Caught (and suppressed) an unexpected error in the main loop:\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n        await ns.sleep(sleepInterval);\\n    }\\n}\\n\\n/** Ram-dodge getting updated player info. Note that this is the only async routine called in the main loop.\\n * If latency or ram instability is an issue, you may wish to try uncommenting the direct request.\\n * @param {NS} ns\\n * @returns {Promise<Player>} */\\nasync function getPlayerInfo(ns) {\\n    return await getNsDataThroughFile(ns, `ns.getPlayer()`);\\n}\\n\\nfunction getTimeInBitnode() { return Date.now() - resetInfo.lastNodeReset; }\\n\\n/* A sorting function to put stocks in the order we should prioritize investing in them */\\nlet purchaseOrder = (a, b) => (Math.ceil(a.timeToCoverTheSpread()) - Math.ceil(b.timeToCoverTheSpread())) || (b.absReturn() - a.absReturn());\\n\\n/** @param {NS} ns\\n * Generic helper for dodging the hefty RAM requirements of stock functions by spawning a temporary script to collect info for us. */\\nasync function getStockInfoDict(ns, stockFunction) {\\n    allStockSymbols ??= await getStockSymbols(ns);\\n    if (allStockSymbols == null) throw new Error(`No WSE API Access yet, this call to ns.stock.${stockFunction} is premature.`);\\n    return await getNsDataThroughFile(ns,\\n        `Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${stockFunction}(sym)]))`,\\n        `/Temp/stock-${stockFunction}.txt`, allStockSymbols);\\n};\\n\\n/** @param {NS} ns **/\\nasync function initAllStocks(ns) {\\n    let dictMaxShares = await getStockInfoDict(ns, 'getMaxShares'); // Only need to get this once, it never changes\\n    return allStockSymbols.map(s => ({\\n        sym: s,\\n        maxShares: dictMaxShares[s], // Value never changes once retrieved\\n        expectedReturn: function () { // How much holdings are expected to appreciate (or depreciate) in the future\\n            // To add conservatism to pre-4s estimates, we reduce the probability by 1 standard deviation without crossing the midpoint\\n            let normalizedProb = (this.prob - 0.5);\\n            let conservativeProb = normalizedProb < 0 ? Math.min(0, normalizedProb + this.probStdDev) : Math.max(0, normalizedProb - this.probStdDev);\\n            return this.vol * conservativeProb;\\n        },\\n        absReturn: function () { return Math.abs(this.expectedReturn()); }, // Appropriate to use when can just as well buy a short position as a long position\\n        bullish: function () { return this.prob > 0.5 },\\n        bearish: function () { return !this.bullish(); },\\n        ownedShares: function () { return this.sharesLong + this.sharesShort; },\\n        owned: function () { return this.ownedShares() > 0; },\\n        positionValueLong: function () { return this.sharesLong * this.bid_price; },\\n        positionValueShort: function () { return this.sharesShort * (2 * this.boughtPriceShort - this.ask_price); }, // Shorts work a bit weird\\n        positionValue: function () { return this.positionValueLong() + this.positionValueShort(); },\\n        // How many stock market ticks must occur at the current expected return before we regain the value lost by the spread between buy and sell prices.\\n        // This can be derived by taking the compound interest formula (future = current * (1 + expected_return) ^ n) and solving for n\\n        timeToCoverTheSpread: function () { return Math.log(this.ask_price / this.bid_price) / Math.log(1 + this.absReturn()); },\\n        // We should not buy this stock within this many ticks of a Market cycle, or we risk being forced to sell due to a probability inversion, and losing money due to the spread\\n        blackoutWindow: function () { return Math.ceil(this.timeToCoverTheSpread()); },\\n        // Pre-4s properties used for forecasting\\n        priceHistory: [],\\n        lastInversion: 0,\\n    }));\\n}\\n\\n/** @param {NS} ns **/\\nasync function refresh(ns, has4s, allStocks, myStocks) {\\n    let holdings = 0;\\n\\n    // Dodge hefty RAM requirements by spawning a sequence of temporary scripts to collect info for us one function at a time\\n    const dictAskPrices = await getStockInfoDict(ns, 'getAskPrice');\\n    const dictBidPrices = await getStockInfoDict(ns, 'getBidPrice');\\n    const dictVolatilities = !has4s ? null : await getStockInfoDict(ns, 'getVolatility');\\n    const dictForecasts = !has4s ? null : await getStockInfoDict(ns, 'getForecast');\\n    const dictPositions = mock ? null : await getStockInfoDict(ns, 'getPosition');\\n    const ticked = allStocks.some(stk => stk.ask_price != dictAskPrices[stk.sym]); // If any price has changed since our last update, the stock market has \\\"ticked\\\"\\n\\n    if (ticked) {\\n        if (Date.now() - lastTick < expectedTickTime - sleepInterval) {\\n            if (Date.now() - lastTick < catchUpTickTime - sleepInterval) {\\n                let changedPrices = allStocks.filter(stk => stk.ask_price != dictAskPrices[stk.sym]);\\n                log(ns, `WARNING: Detected a stock market tick after only ${formatDuration(Date.now() - lastTick)}, but expected ~${formatDuration(expectedTickTime)}. ` +\\n                    (changedPrices.length >= 33 ? '(All stocks updated)' : `The following ${changedPrices.length} stock prices changed: ${changedPrices.map(stk =>\\n                        `${stk.sym} ${formatMoney(stk.ask_price)} -> ${formatMoney(dictAskPrices[stk.sym])}`).join(\\\", \\\")}`), false, 'warning');\\n            } else\\n                log(ns, `INFO: Detected a rapid stock market tick (${formatDuration(Date.now() - lastTick)}), likely to make up for lag / offline time.`)\\n        }\\n        lastTick = Date.now()\\n    }\\n\\n    myStocks.length = 0;\\n    for (const stk of allStocks) {\\n        const sym = stk.sym;\\n        stk.ask_price = dictAskPrices[sym]; // The amount we would pay if we bought the stock (higher than 'price')\\n        stk.bid_price = dictBidPrices[sym]; // The amount we would recieve if we sold the stock (lower than 'price')\\n        stk.spread = stk.ask_price - stk.bid_price;\\n        stk.spread_pct = stk.spread / stk.ask_price; // The percentage of value we lose just by buying the stock\\n        stk.price = (stk.ask_price + stk.bid_price) / 2; // = ns.stock.getPrice(sym);\\n        stk.vol = has4s ? dictVolatilities[sym] : stk.vol;\\n        stk.prob = has4s ? dictForecasts[sym] : stk.prob;\\n        stk.probStdDev = has4s ? 0 : stk.probStdDev; // Standard deviation around the est. probability\\n        // Update our current portfolio of owned stock\\n        let [priorLong, priorShort] = [stk.sharesLong, stk.sharesShort];\\n        stk.position = mock ? null : dictPositions[sym];\\n        stk.sharesLong = mock ? (stk.sharesLong || 0) : stk.position[0];\\n        stk.boughtPrice = mock ? (stk.boughtPrice || 0) : stk.position[1];\\n        stk.sharesShort = mock ? (stk.shares_short || 0) : stk.position[2];\\n        stk.boughtPriceShort = mock ? (stk.boughtPrice_short || 0) : stk.position[3];\\n        holdings += stk.positionValue();\\n        if (stk.owned()) myStocks.push(stk); else stk.ticksHeld = 0;\\n        if (ticked) // Increment ticksHeld, or reset it if we have no position in this stock or reversed our position last tick.\\n            stk.ticksHeld = !stk.owned() || (priorLong > 0 && stk.sharesLong == 0) || (priorShort > 0 && stk.sharesShort == 0) ? 0 : 1 + (stk.ticksHeld || 0);\\n    }\\n    if (ticked) await updateForecast(ns, allStocks, has4s); // Logic below only required on market tick\\n    return holdings;\\n}\\n\\n// Historical probability can be inferred from the number of times the stock was recently observed increasing over the total number of observations\\nconst forecast = history => history.reduce((ups, price, idx) => idx == 0 ? 0 : (history[idx - 1] > price ? ups + 1 : ups), 0) / (history.length - 1);\\n// An \\\"inversion\\\" can be detected if two probabilities are far enough apart and are within \\\"tolerance\\\" of p1 being equal to 1-p2\\nconst tol2 = inversionDetectionTolerance / 2;\\nconst detectInversion = (p1, p2) => ((p1 >= 0.5 + tol2) && (p2 <= 0.5 - tol2) && p2 <= (1 - p1) + inversionDetectionTolerance)\\n        /* Reverse Condition: */ || ((p1 <= 0.5 - tol2) && (p2 >= 0.5 + tol2) && p2 >= (1 - p1) - inversionDetectionTolerance);\\n\\n/** @param {NS} ns **/\\nasync function updateForecast(ns, allStocks, has4s) {\\n    const currentHistory = allStocks[0].priceHistory.length;\\n    const prepSummary = showMarketSummary || mock || (!has4s && (currentHistory < minTickHistory || allStocks.filter(stk => stk.owned()).length == 0)); // Decide whether to display the market summary table.\\n    const inversionsDetected = []; // Keep track of individual stocks whose probability has inverted (45% chance of happening each \\\"cycle\\\")\\n    detectedCycleTick = (detectedCycleTick + 1) % marketCycleLength; // Keep track of stock market cycle (which occurs every 75 ticks)\\n    for (const stk of allStocks) {\\n        stk.priceHistory.unshift(stk.price);\\n        if (stk.priceHistory.length > maxTickHistory) // Limit the rolling window size\\n            stk.priceHistory.splice(maxTickHistory, 1);\\n        // Volatility is easy - the largest observed % movement in a single tick\\n        if (!has4s) stk.vol = stk.priceHistory.reduce((max, price, idx) => Math.max(max, idx == 0 ? 0 : Math.abs(stk.priceHistory[idx - 1] - price) / price), 0);\\n        // We want stocks that have the best expected return, averaged over a long window for greater precision, but the game will occasionally invert probabilities\\n        // (45% chance every 75 updates), so we also compute a near-term forecast window to allow for early-detection of inversions so we can ditch our position.\\n        stk.nearTermForecast = forecast(stk.priceHistory.slice(0, nearTermForecastWindowLength));\\n        let preNearTermWindowProb = forecast(stk.priceHistory.slice(nearTermForecastWindowLength, nearTermForecastWindowLength + marketCycleLength)); // Used to detect the probability before the potential inversion event.\\n        // Detect whether it appears as though the probability of this stock has recently undergone an inversion (i.e. prob => 1 - prob)\\n        stk.possibleInversionDetected = has4s ? detectInversion(stk.prob, stk.lastTickProbability || stk.prob) : detectInversion(preNearTermWindowProb, stk.nearTermForecast);\\n        stk.lastTickProbability = stk.prob;\\n        if (stk.possibleInversionDetected) inversionsDetected.push(stk);\\n    }\\n    // Detect whether our auto-detected \\\"stock market cycle\\\" timing should be adjusted based on the number of potential inversions observed\\n    let summary = \\\"\\\";\\n    if (inversionsDetected.length > 0) {\\n        summary += `${inversionsDetected.length} Stocks appear to be reversing their outlook: ${inversionsDetected.map(s => s.sym).join(', ')} (threshold: ${inversionAgreementThreshold})\\\\n`;\\n        if (inversionsDetected.length >= inversionAgreementThreshold && (has4s || currentHistory >= minTickHistory)) { // We believe we have detected the stock market cycle!\\n            const newPredictedCycleTick = has4s ? 0 : nearTermForecastWindowLength; // By the time we've detected it, we're this many ticks past the cycle start\\n            if (detectedCycleTick != newPredictedCycleTick)\\n                log(ns, `Threshold for changing predicted market cycle met (${inversionsDetected.length} >= ${inversionAgreementThreshold}). ` +\\n                    `Changing current market tick from ${detectedCycleTick} to ${newPredictedCycleTick}.`);\\n            marketCycleDetected = true;\\n            detectedCycleTick = newPredictedCycleTick;\\n            // Don't adjust this in the future unless we see another day with as much or even more agreement (capped at 14, it seems sometimes our cycles get out of sync with\\n            // actual cycles and we need to reset our clock even after previously determining the cycle with great certainty.)\\n            inversionAgreementThreshold = Math.max(14, inversionsDetected.length);\\n        }\\n    }\\n    // Act on any inversions (if trusted), compute the probability, and prepare the stock summary\\n    for (const stk of allStocks) {\\n        // Don't \\\"trust\\\" (act on) a detected inversion unless it's near the time when we're capable of detecting market cycle start. Avoids most false-positives.\\n        if (stk.possibleInversionDetected && (has4s && detectedCycleTick == 0 ||\\n            (!has4s && (detectedCycleTick >= nearTermForecastWindowLength / 2) && (detectedCycleTick <= nearTermForecastWindowLength + inversionLagTolerance))))\\n            stk.lastInversion = detectedCycleTick; // If we \\\"trust\\\" a probability inversion has occurred, probability will be calculated based on only history since the last inversion.\\n        else\\n            stk.lastInversion++;\\n        // Only take the stock history since after the last inversion to compute the probability of the stock.\\n        const probWindowLength = Math.min(longTermForecastWindowLength, stk.lastInversion);\\n        stk.longTermForecast = forecast(stk.priceHistory.slice(0, probWindowLength));\\n        if (!has4s) {\\n            stk.prob = stk.longTermForecast;\\n            stk.probStdDev = Math.sqrt((stk.prob * (1 - stk.prob)) / probWindowLength);\\n        }\\n        const signalStrength = 1 + (stk.bullish() ? (stk.nearTermForecast > stk.prob ? 1 : 0) + (stk.prob > 0.8 ? 1 : 0) : (stk.nearTermForecast < stk.prob ? 1 : 0) + (stk.prob < 0.2 ? 1 : 0));\\n        if (prepSummary) { // Example: AERO  ++   Prob: 54% (t51: 54%, t10: 67%) tLast⇄:190 Vol:0.640% ER: 2.778BP Spread:1.784% ttProfit: 65 Pos: 14.7M long  (held 189 ticks)\\n            stk.debugLog = `${stk.sym.padEnd(5, ' ')} ${(stk.bullish() ? '+' : '-').repeat(signalStrength).padEnd(3)} ` +\\n                `Prob:${(stk.prob * 100).toFixed(0).padStart(3)}% (t${probWindowLength.toFixed(0).padStart(2)}:${(stk.longTermForecast * 100).toFixed(0).padStart(3)}%, ` +\\n                `t${Math.min(stk.priceHistory.length, nearTermForecastWindowLength).toFixed(0).padStart(2)}:${(stk.nearTermForecast * 100).toFixed(0).padStart(3)}%) ` +\\n                `tLast⇄:${(stk.lastInversion + 1).toFixed(0).padStart(3)} Vol:${(stk.vol * 100).toFixed(2)}% ER:${formatBP(stk.expectedReturn()).padStart(8)} ` +\\n                `Spread:${(stk.spread_pct * 100).toFixed(2)}% ttProfit:${stk.blackoutWindow().toFixed(0).padStart(3)}`;\\n            if (stk.owned()) stk.debugLog += ` Pos: ${formatNumberShort(stk.ownedShares(), 3, 1)} (${stk.ownedShares() == stk.maxShares ? 'max' :\\n                ((100 * stk.ownedShares() / stk.maxShares).toFixed(0).padStart(2) + '%')}) ${stk.sharesLong > 0 ? 'long ' : 'short'} (held ${stk.ticksHeld} ticks)`;\\n            if (stk.possibleInversionDetected) stk.debugLog += ' ⇄⇄⇄';\\n        }\\n    }\\n    // Print a summary of stocks as of this most recent tick (if enabled)\\n    if (prepSummary) {\\n        summary += `Market day ${detectedCycleTick + 1}${marketCycleDetected ? '' : '?'} of ${marketCycleLength} (${marketCycleDetected ? (100 * inversionAgreementThreshold / 19).toPrecision(2) : '0'}% certain) ` +\\n            `Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\\\n` + allStocks.sort(purchaseOrder).map(s => s.debugLog).join(\\\"\\\\n\\\")\\n        if (showMarketSummary) await updateForecastFile(ns, summary); else log(ns, summary);\\n    }\\n    // Write out a file of stock probabilities so that other scripts can make use of this (e.g. hack orchestrator can manipulate the stock market)\\n    await ns.write('/Temp/stock-probabilities.txt', JSON.stringify(Object.fromEntries(\\n        allStocks.map(stk => [stk.sym, { prob: stk.prob, sharesLong: stk.sharesLong, sharesShort: stk.sharesShort }]))), \\\"w\\\");\\n}\\n\\n// Helpers to display the stock market summary in a separate window.\\nlet summaryFile = '/Temp/stockmarket-summary.txt';\\nlet updateForecastFile = async (ns, summary) => await ns.write(summaryFile, summary, 'w');\\nlet launchSummaryTail = async ns => {\\n    let summaryTailScript = summaryFile.replace('.txt', '-tail.js');\\n    if (await getNsDataThroughFile(ns, `ns.scriptRunning('${summaryTailScript}', ns.getHostname())`, '/Temp/stockmarket-summary-is-running.txt'))\\n        return;\\n    //await getNsDataThroughFile(ns, `ns.scriptKill('${summaryTailScript}', ns.getHostname())`, summaryTailScript.replace('.js', '-kill.js')); // Only needed if we're changing the script below\\n    await runCommand(ns, `ns.disableLog('sleep'); ns.tail(); let lastRead = '';\\n        while (true) { \\n            let read = ns.read('${summaryFile}');\\n            if (lastRead != read) ns.print(lastRead = read);\\n            await ns.sleep(1000); \\n        }`, summaryTailScript);\\n}\\n\\n// Ram-dodging helpers that spawn temporary scripts to buy/sell rather than pay 2.5GB ram per variant\\nlet buyStockWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'buyStock'); // ns.stock.buyStock(sym, numShares);\\nlet buyShortWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'buyShort'); // ns.stock.buyShort(sym, numShares);\\nlet sellStockWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'sellStock'); // ns.stock.sellStock(sym, numShares);\\nlet sellShortWrapper = async (ns, sym, numShares) => await transactStock(ns, sym, numShares, 'sellShort'); // ns.stock.sellShort(sym, numShares);\\nlet transactStock = async (ns, sym, numShares, action) =>\\n    await getNsDataThroughFile(ns, `ns.stock.${action}(ns.args[0], ns.args[1])`, null, [sym, numShares]);\\n\\n/** @param {NS} ns \\n * Automatically buys either a short or long position depending on the outlook of the stock. */\\nasync function doBuy(ns, stk, sharesToBuy) {\\n    // We include -2*commission in the \\\"holdings value\\\" of our stock, but if we make repeated purchases of the same stock, we have to track\\n    // the additional commission somewhere. So only subtract it from our running profit if this isn't our first purchase of this symbol\\n    let price = 0; //price wasn't defined yet.\\n    if (stk.owned())\\n        totalProfit -= commission;\\n    let long = stk.bullish();\\n    let expectedPrice = long ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n    log(ns, `INFO: ${long ? 'Buying  ' : 'Shorting'} ${formatNumberShort(sharesToBuy, 3, 3).padStart(5)} (` +\\n        `${stk.maxShares == sharesToBuy + stk.ownedShares() ? '@max shares' : `${formatNumberShort(sharesToBuy + stk.ownedShares(), 3, 3).padStart(5)}/${formatNumberShort(stk.maxShares, 3, 3).padStart(5)}`}) ` +\\n        `${stk.sym.padEnd(5)} @ ${formatMoney(expectedPrice).padStart(9)} for ${formatMoney(sharesToBuy * expectedPrice).padStart(9)} (Spread:${(stk.spread_pct * 100).toFixed(2)}% ` +\\n        `ER:${formatBP(stk.expectedReturn()).padStart(8)}) Ticks to Profit: ${stk.timeToCoverTheSpread().toFixed(2)}`, noisy, 'info');\\n    try {\\n        price = mock ? expectedPrice : Number(await transactStock(ns, stk.sym, sharesToBuy, long ? 'buyStock' : 'buyShort'));\\n    } catch (err) {\\n        if (long) throw err;\\n        disableShorts = true;\\n        log(ns, `WARN: Failed to short ${stk.sym} (Shorts not available?). Disabling shorts...`, true, 'warning');\\n        return 0;\\n    }\\n    // The rest of this work is for troubleshooting / mock-mode purposes\\n    if (price == 0) {\\n        const playerMoney = (await getPlayerInfo(ns)).money;\\n        if (playerMoney < sharesToBuy * expectedPrice)\\n            log(ns, `WARN: Failed to ${long ? 'buy' : 'short'} ${stk.sym} because money just recently dropped to ${formatMoney(playerMoney)} and we can no longer afford it.`, noisy);\\n        else\\n            log(ns, `ERROR: Failed to ${long ? 'buy' : 'short'} ${stk.sym} @ ${formatMoney(expectedPrice)} (0 was returned) despite having ${formatMoney(playerMoney)}.`, true, 'error');\\n        return 0;\\n    } else if (price != expectedPrice) {\\n        log(ns, `WARNING: ${long ? 'Bought' : 'Shorted'} ${stk.sym} @ ${formatMoney(price)} but expected ${formatMoney(expectedPrice)} (spread: ${formatMoney(stk.spread)})`, false, 'warning');\\n        price = expectedPrice; // Known Bitburner bug for now, short returns \\\"price\\\" instead of \\\"bid_price\\\". Correct this so running profit calcs are correct.\\n    }\\n    if (mock && long) stk.boughtPrice = (stk.boughtPrice * stk.sharesLong + price * sharesToBuy) / (stk.sharesLong + sharesToBuy);\\n    if (mock && !long) stk.boughtPriceShort = (stk.boughtPriceShort * stk.sharesShort + price * sharesToBuy) / (stk.sharesShort + sharesToBuy);\\n    if (long) stk.sharesLong += sharesToBuy; else stk.sharesShort += sharesToBuy; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n    return sharesToBuy * price + commission; // Return the amount spent on the transaction so it can be subtracted from our cash on hand\\n}\\n\\n/** @param {NS} ns \\n * Sell our current position in this stock. */\\nasync function doSellAll(ns, stk) {\\n    let long = stk.sharesLong > 0;\\n    if (long && stk.sharesShort > 0) // Detect any issues here - we should always sell one before buying the other.\\n        log(ns, `ERROR: Somehow ended up both ${stk.sharesShort} short and ${stk.sharesLong} long on ${stk.sym}`, true, 'error');\\n    let expectedPrice = long ? stk.bid_price : stk.ask_price; // Depends on whether we will be selling a long or short position\\n    let sharesSold = long ? stk.sharesLong : stk.sharesShort;\\n    let price = mock ? expectedPrice : await transactStock(ns, stk.sym, sharesSold, long ? 'sellStock' : 'sellShort');\\n    const profit = (long ? stk.sharesLong * (price - stk.boughtPrice) : stk.sharesShort * (stk.boughtPriceShort - price)) - 2 * commission;\\n    log(ns, `${profit > 0 ? 'SUCCESS' : 'WARNING'}: Sold all ${formatNumberShort(sharesSold, 3, 3).padStart(5)} ${stk.sym.padEnd(5)} ${long ? ' long' : 'short'} positions ` +\\n        `@ ${formatMoney(price).padStart(9)} for a ` + (profit > 0 ? `PROFIT of ${formatMoney(profit).padStart(9)}` : ` LOSS  of ${formatMoney(-profit).padStart(9)}`) + ` after ${stk.ticksHeld} ticks`,\\n        noisy, noisy ? (profit > 0 ? 'success' : 'error') : undefined);\\n    if (price == 0) {\\n        log(ns, `ERROR: Failed to sell ${sharesSold} ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(expectedPrice)} - 0 was returned.`, true, 'error');\\n        return 0;\\n    } else if (price != expectedPrice) {\\n        log(ns, `WARNING: Sold ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(price)} but expected ${formatMoney(expectedPrice)} (spread: ${formatMoney(stk.spread)})`, false, 'warning');\\n        price = expectedPrice; // Known Bitburner bug for now, sellSort returns \\\"price\\\" instead of \\\"ask_price\\\". Correct this so running profit calcs are correct.\\n    }\\n    if (long) stk.sharesLong -= sharesSold; else stk.sharesShort -= sharesSold; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n    totalProfit += profit;\\n    return price * sharesSold - commission; // Return the amount of money recieved from the transaction\\n}\\n\\nlet formatBP = fraction => formatNumberShort(fraction * 100 * 100, 3, 2) + \\\" BP\\\";\\n\\n/** Log / tprint / toast helper.\\n * @param {NS} ns */\\nlet log = (ns, message, tprint = false, toastStyle = \\\"\\\") => {\\n    if (message == lastLog) return;\\n    ns.print(message);\\n    if (tprint) ns.tprint(message);\\n    if (toastStyle) ns.toast(message, toastStyle);\\n    return lastLog = message;\\n}\\n\\nfunction doStatusUpdate(ns, stocks, myStocks, hudElement = null) {\\n    let maxReturnBP = 10000 * Math.max(...myStocks.map(s => s.absReturn())); // The largest return (in basis points) in our portfolio\\n    let minReturnBP = 10000 * Math.min(...myStocks.map(s => s.absReturn())); // The smallest return (in basis points) in our portfolio\\n    let est_holdings_cost = myStocks.reduce((sum, stk) => sum + (stk.owned() ? commission : 0) +\\n        stk.sharesLong * stk.boughtPrice + stk.sharesShort * stk.boughtPriceShort, 0);\\n    let liquidation_value = myStocks.reduce((sum, stk) => sum - (stk.owned() ? commission : 0) + stk.positionValue(), 0);\\n    let status = `Long ${myStocks.filter(s => s.sharesLong > 0).length}, Short ${myStocks.filter(s => s.sharesShort > 0).length} of ${stocks.length} stocks ` +\\n        (myStocks.length == 0 ? '' : `(ER ${minReturnBP.toFixed(1)}-${maxReturnBP.toFixed(1)} BP) `) +\\n        `Profit: ${formatMoney(totalProfit, 3)} Holdings: ${formatMoney(liquidation_value, 3)} (Cost: ${formatMoney(est_holdings_cost, 3)}) ` +\\n        `Net: ${formatMoney(totalProfit + liquidation_value - est_holdings_cost, 3)}`\\n    log(ns, status);\\n    if (hudElement) hudElement.innerText = formatMoney(liquidation_value, 6, 3);\\n}\\n\\n/** @param {NS} ns **/\\nasync function liquidate(ns) {\\n    allStockSymbols ??= await getStockSymbols(ns);\\n    if (allStockSymbols == null) return; // Nothing to liquidate, no API Access\\n    let totalStocks = 0, totalSharesLong = 0, totalSharesShort = 0, totalRevenue = 0;\\n    const dictPositions = mock ? null : await getStockInfoDict(ns, 'getPosition');\\n    for (const sym of allStockSymbols) {\\n        var [sharesLong, , sharesShort, avgShortCost] = dictPositions[sym];\\n        if (sharesLong + sharesShort == 0) continue;\\n        totalStocks++, totalSharesLong += sharesLong, totalSharesShort += sharesShort;\\n        if (sharesLong > 0) totalRevenue += (await sellStockWrapper(ns, sym, sharesLong)) * sharesLong - commission;\\n        if (sharesShort > 0) totalRevenue += (2 * avgShortCost - (await sellShortWrapper(ns, sym, sharesShort))) * sharesShort - commission;\\n    }\\n    log(ns, `Sold ${totalSharesLong.toLocaleString('en')} long shares and ${totalSharesShort.toLocaleString('en')} short shares ` +\\n        `in ${totalStocks} stocks for ${formatMoney(totalRevenue, 3)}`, true, 'success');\\n}\\n\\n/** @param {NS} ns **/\\n/** @param {Player} playerStats **/\\nasync function tryGet4SApi(ns, playerStats, bitnodeMults, budget) {\\n    if (await checkAccess(ns, 'has4SDataTIXAPI')) return false; // Only return true if we just bought it\\n    const cost4sData = 1E9 * bitnodeMults.FourSigmaMarketDataCost;\\n    const cost4sApi = 25E9 * bitnodeMults.FourSigmaMarketDataApiCost;\\n    const has4S = await checkAccess(ns, 'has4SData');\\n    const totalCost = (has4S ? 0 : cost4sData) + cost4sApi;\\n    // Liquidate shares if it would allow us to afford 4S API data\\n    if (totalCost > budget) /* Need to reserve some money to invest */\\n        return false;\\n    if (playerStats.money < totalCost)\\n        await liquidate(ns);\\n    if (!has4S) {\\n        if (await tryBuy(ns, 'purchase4SMarketData'))\\n            log(ns, `SUCCESS: Purchased 4SMarketData for ${formatMoney(cost4sData)} ` +\\n                `(At ${formatDuration(getTimeInBitnode())} into BitNode)`, true, 'success');\\n        else\\n            log(ns, 'ERROR attempting to purchase 4SMarketData!', false, 'error');\\n    }\\n    if (await tryBuy(ns, 'purchase4SMarketDataTixApi')) {\\n        log(ns, `SUCCESS: Purchased 4SMarketDataTixApi for ${formatMoney(cost4sApi)} ` +\\n            `(At ${formatDuration(getTimeInBitnode())} into BitNode)`, true, 'success');\\n        return true;\\n    } else {\\n        log(ns, 'ERROR attempting to purchase 4SMarketDataTixApi!', false, 'error');\\n        if (!(5 in dictSourceFiles)) { // If we do not have access to bitnode multipliers, assume the cost is double and try again later\\n            log(ns, 'INFO: Bitnode mults are not available (SF5) - assuming everything is twice as expensive in the current bitnode.');\\n            bitnodeMults.FourSigmaMarketDataCost *= 2;\\n            bitnodeMults.FourSigmaMarketDataApiCost *= 2;\\n        }\\n    }\\n    return false;\\n}\\n\\n/** @param {NS} ns \\n * @param {\\\"hasWSEAccount\\\"|\\\"hasTIXAPIAccess\\\"|\\\"has4SData\\\"|\\\"has4SDataTIXAPI\\\"} stockFn\\n * Helper to check for one of the stock access functions */\\nasync function checkAccess(ns, stockFn) {\\n    return await getNsDataThroughFile(ns, `ns.stock.${stockFn}()`)\\n}\\n\\n/** @param {NS} ns \\n * @param {\\\"purchaseWseAccount\\\"|\\\"purchaseTixApi\\\"|\\\"purchase4SMarketData\\\"|\\\"purchase4SMarketDataTixApi\\\"} stockFn\\n * Helper to try and buy a stock access. Yes, the code is the same as above, but I wanted to be explicit. */\\nasync function tryBuy(ns, stockFn) {\\n    return await getNsDataThroughFile(ns, `ns.stock.${stockFn}()`)\\n}\\n\\n/** @param {NS} ns \\n * @param {number} budget - The amount we are willing to spend on WSE and API access\\n * Tries to purchase access to the stock market **/\\nasync function tryGetStockMarketAccess(ns, budget) {\\n    if (await checkAccess(ns, 'hasTIXAPIAccess')) return true; // Already have access\\n    const costWseAccount = 200E6;\\n    const costTixApi = 5E9;\\n    const hasWSE = await checkAccess(ns, 'hasWSEAccount');\\n    const totalCost = (hasWSE ? 0 : costWseAccount) + costTixApi;\\n    if (totalCost > budget) return false;\\n    if (!hasWSE) {\\n        if (await tryBuy(ns, 'purchaseWseAccount'))\\n            log(ns, `SUCCESS: Purchased a WSE (stockmarket) account for ${formatMoney(costWseAccount)} ` +\\n                `(At ${formatDuration(getTimeInBitnode())} into BitNode)`, true, 'success');\\n        else\\n            log(ns, 'ERROR attempting to purchase WSE account!', false, 'error');\\n    }\\n    if (await tryBuy(ns, 'purchaseTixApi')) {\\n        log(ns, `SUCCESS: Purchased Tix (stockmarket) Api access for ${formatMoney(costTixApi)} ` +\\n            `(At ${formatDuration(getTimeInBitnode())} into BitNode)`, true, 'success');\\n        return true;\\n    } else\\n        log(ns, 'ERROR attempting to purchase Tix Api!', false, 'error');\\n    return false;\\n}\\n\\nfunction initializeHud() {\\n    const d = eval(\\\"document\\\");\\n    let htmlDisplay = d.getElementById(\\\"stock-display-1\\\");\\n    if (htmlDisplay !== null) return htmlDisplay;\\n    // Get the custom display elements in HUD.\\n    let customElements = d.getElementById(\\\"overview-extra-hook-0\\\").parentElement.parentElement;\\n    // Make a clone of the hook for extra hud elements, and move it up under money\\n    let stockValueTracker = customElements.cloneNode(true);\\n    // Remove any nested elements created by stats.js\\n    stockValueTracker.querySelectorAll(\\\"p > p\\\").forEach(el => el.parentElement.removeChild(el));\\n    // Change ids since duplicate id's are invalid\\n    stockValueTracker.querySelectorAll(\\\"p\\\").forEach((el, i) => el.id = \\\"stock-display-\\\" + i);\\n    // Get out output element\\n    htmlDisplay = stockValueTracker.querySelector(\\\"#stock-display-1\\\");\\n    // Display label and default value\\n    stockValueTracker.querySelectorAll(\\\"p\\\")[0].innerText = \\\"Stock\\\";\\n    htmlDisplay.innerText = \\\"$0.000 \\\"\\n    // Insert our element right after Money\\n    customElements.parentElement.insertBefore(stockValueTracker, customElements.parentElement.childNodes[2]);\\n    return htmlDisplay;\\n}\",\"filename\":\"stockmaster.js\",\"server\":\"home\"}}],[\"sync-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// This is a proof-of-concept script that can continuously push changes to scripts on your home server to all other servers.\\n// Run this script once to push the latest version of your scripts any other servers that have a copy.\\n// Warning: If you keep try to edit and save a file while this script is running, it will probably crash your game the first time you save a file.\\nconst loopingMode = false;\\nconst home = \\\"home\\\";\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    let scan = (server, parent) => ns.scan(server)\\n        .map(newServer => newServer != parent ? scan(newServer, server) : server).flat();\\n    [\\\"scan\\\", \\\"scp\\\"].forEach(log => ns.disableLog(log));\\n    const serverList = scan(home);\\n    do {\\n        const fileList = ns.ls(home);\\n        const latestContents = Object.fromEntries(fileList.map(s => [s, ns.read(s)]));\\n        for (const server of serverList.filter(s => s != home)) {\\n            const serverFiles = ns.ls(server); // What files does the server have\\n            for (const file of serverFiles.filter(s => fileList.includes(s))) {\\n                await ns.scp(file, home, server); // No way to read a remote file, so we have to temporarily copy it home\\n                if (ns.read(file) != latestContents[file]) { // Remote file was out of date.\\n                    ns.print(`The file ${file} was out of date on ${server}. Updating...`);\\n                    await ns.write(file, latestContents[file], \\\"w\\\"); // Restore original home file\\n                    await ns.scp(file, server, home); // Update the remote copy\\n                    const runningInstances = ns.ps(server).filter(p => p.filename == file);\\n                    runningInstances.forEach(p => { // Restart any running instances\\n                        ns.print(`Restarting script ${file} on ${server} (was running with pid ${p.pid})...`);\\n                        ns.kill(p.pid);\\n                        ns.exec(p.filename, server, p.threads, ...p.args);\\n                    })\\n                }\\n            }\\n        }\\n        if (loopingMode) await ns.sleep(1000);\\n    } while (loopingMode);\\n}\",\"filename\":\"sync-scripts.js\",\"server\":\"home\"}}],[\"work-for-factions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    instanceCount, getConfiguration, getNsDataThroughFile, getFilePath, getActiveSourceFiles, tryGetBitNodeMultipliers,\\n    formatDuration, formatMoney, formatNumberShort, disableLogs, log\\n} from './helpers.js'\\n\\nlet options;\\nconst argsSchema = [\\n    ['first', []], // Grind rep with these factions first. Also forces a join of this faction if we normally wouldn't (e.g. no desired augs or all augs owned)\\n    ['skip', []], // Don't work for these factions\\n    ['o', false], // Immediately grind company factions for rep after getting their invite, rather than first getting all company invites we can\\n    ['desired-stats', []], // Factions will be removed from our 'early-faction-order' once all augs with these stats have been bought out\\n    ['no-focus', false], // Disable doing work that requires focusing (crime), and forces study/faction/company work to be non-focused (even if it means incurring a penalty)\\n    ['no-studying', false], // Disable studying.\\n    ['pay-for-studies-threshold', 200000], // Only be willing to pay for our studies if we have this much money\\n    ['training-stat-per-multi-threshold', 100], // Heuristic: Estimate that we can train this many levels for every mult / exp_mult we have in a reasonable amount of time.\\n    ['no-coding-contracts', false], // Disable purchasing coding contracts for reputation\\n    ['no-crime', false], // Disable doing crimes at all. (Also disabled with --no-focus)\\n    ['crime-focus', false], // Useful in crime-focused BNs when you want to focus on crime related factions\\n    ['fast-crimes-only', false], // Assasination and Heist are so slow, I can see people wanting to disable them just so they can interrupt at will.\\n    ['invites-only', false], // Just work to get invites, don't work for augmentations / faction rep\\n    ['prioritize-invites', false], // Prioritize working for as many invites as is practical before starting to grind for faction reputation\\n    ['get-invited-to-every-faction', false], // You want to be in every faction? You got it!\\n    ['karma-threshold-for-gang-invites', -40000], // Prioritize working for gang invites once we have this much negative Karma\\n    ['disable-treating-gang-as-sole-provider-of-its-augs', false], // Set to true if you still want to grind for rep with factions that only have augs your gang provides\\n    ['no-bladeburner-check', false], // By default, will avoid working if bladeburner is active and \\\"The Blade's Simulacrum\\\" isn't installed\\n];\\n\\nconst companySpecificConfigs = [\\n    { name: \\\"NWO\\\", statModifier: 25 },\\n    { name: \\\"MegaCorp\\\", statModifier: 25 },\\n    { name: \\\"Blade Industries\\\", statModifier: 25 },\\n    { name: \\\"Fulcrum Secret Technologies\\\", companyName: \\\"Fulcrum Technologies\\\" }, // Special snowflake\\n    { name: \\\"Silhouette\\\", companyName: \\\"TBD\\\", repRequiredForFaction: 999e9 /* Hack to force work until max promotion. */ }\\n]\\nconst jobs = [ // Job stat requirements for a company with a base stat modifier of +224 (modifier of all megacorps except the ones above which are 25 higher)\\n    { name: \\\"it\\\", reqRep: [0, 7E3, 35E3, 175E3], reqHack: [225, 250, 275, 375], reqCha: [0, 0, 275, 300], repMult: [0.9, 1.1, 1.3, 1.4] },\\n    { name: \\\"software\\\", reqRep: [0, 8E3, 40E3, 200E3, 400E3, 800E3, 1.6e6, 3.2e6], reqHack: [225, 275, 475, 625, 725, 725, 825, 975], reqCha: [0, 0, 275, 375, 475, 475, 625, 725], repMult: [0.9, 1.1, 1.3, 1.5, 1.6, 1.6, 1.75, 2] },\\n]\\nconst factions = [\\\"Illuminati\\\", \\\"Daedalus\\\", \\\"The Covenant\\\", \\\"ECorp\\\", \\\"MegaCorp\\\", \\\"Bachman & Associates\\\", \\\"Blade Industries\\\", \\\"NWO\\\", \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\",\\n    \\\"Four Sigma\\\", \\\"KuaiGong International\\\", \\\"Fulcrum Secret Technologies\\\", \\\"BitRunners\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Sector-12\\\",\\n    \\\"Volhaven\\\", \\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Silhouette\\\", \\\"Tetrads\\\", \\\"Slum Snakes\\\", \\\"Netburners\\\", \\\"Tian Di Hui\\\", \\\"CyberSec\\\"];\\nconst cannotWorkForFactions = [\\\"Church of the Machine God\\\", \\\"Bladeburners\\\", \\\"Shadows of Anarchy\\\"]\\n// These factions should ideally be completed in this order\\nconst preferredEarlyFactionOrder = [\\n    \\\"Netburners\\\", // Improve hash income, which is useful or critical for almost all BNs\\n    \\\"Tian Di Hui\\\", \\\"Aevum\\\", // These give all the company_rep and faction_rep bonuses early game    \\n    \\\"Daedalus\\\", // Once we have all faction_rep boosting augs, there's no reason not to work towards Daedalus as soon as it's available/feasible so we can buy Red Pill\\n    \\\"CyberSec\\\", /* Quick, and NightSec aug depends on an aug from here */ \\\"NiteSec\\\", \\\"Tetrads\\\", // Cha augs to speed up earning company promotions\\n    \\\"Bachman & Associates\\\", // Boost company/faction rep for future augs\\n    \\\"BitRunners\\\", // Fast source of some unique hack augs\\n    \\\"Fulcrum Secret Technologies\\\", // Will be removed if hack level is too low to backdoor their server\\n    \\\"ECorp\\\", // More cmp_rep augs, and some strong hack ones as well\\n    \\\"The Black Hand\\\", // Fastest sources of hacking augs after the above companies\\n    \\\"The Dark Army\\\", // Unique cmp_rep aug TODO: Can it sensibly be gotten before megacorps? Requires 300 all combat stats.\\n    \\\"Clarke Incorporated\\\", \\\"OmniTek Incorporated\\\", \\\"NWO\\\", // More hack augs from companies\\n    \\\"Chongqing\\\", // Unique Source of big 1.4x hack exp boost (Can only join if not in e.g. Aevum as well)\\n];\\n// This is an approximate order of most useful augmentations left to offer, assuming all early-game factions have been cleaned out\\nconst preferredCompanyFactionOrder = [\\n    \\\"Bachman & Associates\\\", // Augs boost company_rep by 1.65, faction_rep by 1.50. Lower rep-requirements than ECorp augs, so should be a priority to speed up future resets\\n    \\\"ECorp\\\", // Offers 2.26 multi worth of company_rep and major hacking stat boosts (1.51 hack / 1.54 exp / 1.43 success / 3.0 grow / 2.8 money / 1.25 speed), but high rep reqs\\n    \\\"Clarke Incorporated\\\", // Biggest boost to hacking after above factions (1.38)\\n    \\\"OmniTek Incorporated\\\", // Next big boost to hacking after above factions (1.20) (NWO is bigger, but this has lower Cha reqs.)\\n    \\\"NWO\\\", // Biggest boost to hacking after above factions (1.26)\\n    \\\"Blade Industries\\\", // Mostly redundant after Ecorp - provides remaining hack-related augs (1.10 money, 1.03 speed)\\n    \\\"MegaCorp\\\", // Offers 1 unique aug boosting all physical traits by 1.35\\n    \\\"KuaiGong International\\\", // 1.40 to agility, defense, strength\\n    \\\"Fulcrum Secret Technologies\\\", // Big boosts to company_rep and hacking, but requires high hack level to backdoor their server, so might have to be left until later\\n    \\\"Four Sigma\\\", // No unique augs, but note that if accessible early on, Fulcrum + Four Sigma is a one-two punch to get all company rep boosting augs in just 2 factions\\n]\\n// Order in which to focus on crime factions. Start with the hardest-to-earn invites, assume we will skip to next best if not achievable.\\nconst preferredCrimeFactionOrder = [\\\"Slum Snakes\\\", \\\"Tetrads\\\", \\\"Speakers for the Dead\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"The Covenant\\\", \\\"Daedalus\\\", \\\"Netburners\\\", \\\"NiteSec\\\", \\\"The Black Hand\\\"];\\n// Gang factions in order of ease-of-invite. If gangs are available, as we near 54K Karma to unlock gangs (as per --karma-threshold-for-gang-invites), we will attempt to get into any/all of these.\\nconst desiredGangFactions = [\\\"Slum Snakes\\\", \\\"The Syndicate\\\", \\\"The Dark Army\\\", \\\"Speakers for the Dead\\\"];\\n// Previously this was needed because you couldn't work for any gang factions once in a gang, but that was changed.\\nconst allGangFactions = [\\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"Tetrads\\\", \\\"Slum Snakes\\\", \\\"The Black Hand\\\", \\\"NiteSec\\\"];\\n\\nconst loopSleepInterval = 5000; // 5 seconds\\nconst statusUpdateInterval = 60 * 1000; // 1 minute (outside of this, minor updates in e.g. stats aren't logged)\\nconst checkForNewPrioritiesInterval = 10 * 60 * 1000; // 10 minutes. Interrupt whatever we're doing and check whether we could be doing something more useful.\\nconst waitForFactionInviteTime = 30 * 1000; // The game will only issue one new invite every 25 seconds, so if you earned two by travelling to one city, might have to wait a while\\n\\nlet shouldFocus; // Whether we should focus on work or let it be backgrounded (based on whether \\\"Neuroreceptor Management Implant\\\" is owned, or \\\"--no-focus\\\" is specified)\\n// And a bunch of globals because managing state and encapsulation is hard.\\nlet hasFocusPenalty, hasSimulacrum, repToDonate, fulcrummHackReq, notifiedAboutDaedalus, playerInBladeburner;\\nlet bitnodeMultipliers, dictSourceFiles, dictFactionFavors, playerGang, mainLoopStart, scope, numJoinedFactions, lastTravel, crimeCount;\\nlet firstFactions, skipFactions, completedFactions, softCompletedFactions, mostExpensiveAugByFaction, mostExpensiveDesiredAugByFaction;\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if (lastFlag == \\\"--first\\\" || lastFlag == \\\"--skip\\\")\\n        return factions.map(f => f.replaceAll(' ', '_')).sort();\\n    return [];\\n}\\n\\n// Bit of an ugly afterthought, but this is all over the place to break out of whatever we're doing and return to the main loop.\\nconst breakToMainLoop = () => Date.now() > mainLoopStart + checkForNewPrioritiesInterval;\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    const runOptions = getConfiguration(ns, argsSchema);\\n    if (!runOptions || await instanceCount(ns) > 1) return; // Prevent multiple instances of this script from being started, even with different args.\\n    options = runOptions; // We don't set the global \\\"options\\\" until we're sure this is the only running instance\\n    disableLogs(ns, ['sleep']);\\n\\n    // Reset globals whose value can persist between script restarts in weird situations\\n    lastTravel = crimeCount = 0;\\n    notifiedAboutDaedalus = playerInBladeburner = false;\\n\\n    // Process configuration options\\n    firstFactions = (options['first'] || []).map(f => f.replaceAll('_', ' ')); // Factions that end up in this list will be prioritized and joined regardless of their augmentations available.\\n    options.skip = (options.skip || []).map(f => f.replaceAll('_', ' '));\\n    // Default desired-stats if none were specified\\n    if (options['desired-stats'].length == 0)\\n        options['desired-stats'] = options['crime-focus'] ? ['str', 'def', 'dex', 'agi', 'faction_rep', 'hacknet', 'crime'] :\\n            ['hacking', 'faction_rep', 'company_rep', 'charisma', 'hacknet', 'crime_money']\\n\\n    // Log some of the options in effect\\n    ns.print(`--desired-stats matching: ${options['desired-stats'].join(\\\", \\\")}`);\\n    if (firstFactions.length > 0) ns.print(`--first factions: ${firstFactions.join(\\\", \\\")}`);\\n    if (options.skip.length > 0) ns.print(`--skip factions: ${options.skip.join(\\\", \\\")}`);\\n    if (options['fast-crimes-only']) ns.print(`--fast-crimes-only`);\\n\\n    // Find out whether the user can use this script\\n    dictSourceFiles = await getActiveSourceFiles(ns); // Find out what source files the user has unlocked\\n    if (!(4 in dictSourceFiles))\\n        return log(ns, \\\"ERROR: You cannot automate working for factions until you have unlocked singularity access (SF4).\\\", true, 'error');\\n    else if (dictSourceFiles[4] < 3)\\n        log(ns, `WARNING: Singularity functions are much more expensive with lower levels of SF4 (you have SF4.${dictSourceFiles[4]}). ` +\\n            `You may encounter RAM issues with and have to wait until you have more RAM available to run this script successfully.`, false, 'warning');\\n\\n    let loadingComplete = false; // In the event of suboptimal RAM conditions, keep trying to start until we succeed\\n    while (!loadingComplete) {\\n        try {\\n            await loadStartupData(ns);\\n            loadingComplete = true;\\n        } catch (err) {\\n            log(ns, 'WARNING: work-for-factions.js caught an unhandled error while starting up. Trying again in 5 seconds...\\\\n' +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n            await ns.sleep(5000);\\n        }\\n    }\\n\\n    mainLoopStart = Date.now();\\n    scope = 0;\\n    while (true) { // After each loop, we will repeat all prevous work \\\"strategies\\\" to see if anything new has been unlocked, and add one more \\\"strategy\\\" to the queue\\n        try {\\n            await mainLoop(ns);\\n        } catch (err) {\\n            log(ns, 'WARNING: work-for-factions.js caught an unhandled error in its main loop. Trying again in 5 seconds...\\\\n' +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n            await ns.sleep(5000);\\n            scope--; // Cancel out work scope increasing on the next iteration.\\n        }\\n        await ns.sleep(1); // Infinite loop protection in case somehow we loop without doing any meaningful work\\n    }\\n}\\n\\n/** @param {NS} ns */\\nasync function loadStartupData(ns) {\\n    repToDonate = await getNsDataThroughFile(ns, 'ns.getFavorToDonate()');\\n    const playerInfo = await getPlayerInfo(ns);\\n    const allKnownFactions = factions.concat(playerInfo.factions.filter(f => !factions.includes(f)));\\n    bitnodeMultipliers = await tryGetBitNodeMultipliers(ns) ||\\n    {   // BN mults are used to estimate time to train up stats. Default to 1.0 if unknown\\n        HackingLevelMultiplier: 1.0,\\n        StrengthLevelMultiplier: 1.0,\\n        DefenseLevelMultiplier: 1.0,\\n        DexterityLevelMultiplier: 1.0,\\n        AgilityLevelMultiplier: 1.0,\\n        CharismaLevelMultiplier: 1.0,\\n        ClassGymExpGain: 1.0,\\n        CrimeExpGain: 1.0,\\n    };\\n\\n    // Get some faction and augmentation information to decide what remains to be purchased\\n    dictFactionFavors = await getNsDataThroughFile(ns, dictCommand('ns.singularity.getFactionFavor(o)'), '/Temp/getFactionFavors.txt', allKnownFactions);\\n    const dictFactionAugs = await getNsDataThroughFile(ns, dictCommand('ns.singularity.getAugmentationsFromFaction(o)'), '/Temp/getAugmentationsFromFactions.txt', allKnownFactions);\\n    const augmentationNames = [...new Set(Object.values(dictFactionAugs).flat())];\\n    const dictAugRepReqs = await getNsDataThroughFile(ns, dictCommand('ns.singularity.getAugmentationRepReq(o)'), '/Temp/getAugmentationRepReqs.txt', augmentationNames);\\n    const dictAugStats = await getNsDataThroughFile(ns, dictCommand('ns.singularity.getAugmentationStats(o)'), '/Temp/getAugmentationStats.txt', augmentationNames);\\n    const ownedAugmentations = await getNsDataThroughFile(ns, `ns.singularity.getOwnedAugmentations(true)`, '/Temp/player-augs-purchased.txt');\\n    const installedAugmentations = await getNsDataThroughFile(ns, `ns.singularity.getOwnedAugmentations()`, '/Temp/player-augs-installed.txt');\\n    // Based on what augmentations we own, we can change our own behaviour (e.g. whether to allow work to steal focus)\\n    hasFocusPenalty = !installedAugmentations.includes(\\\"Neuroreceptor Management Implant\\\"); // Check if we have an augmentation that lets us not have to focus at work (always nicer if we can background it)\\n    shouldFocus = !options['no-focus'] && hasFocusPenalty; // Focus at work for the best rate of rep gain, unless focus activities are disabled via command line\\n    hasSimulacrum = installedAugmentations.includes(\\\"The Blade's Simulacrum\\\");\\n\\n    // Find out if we're in a gang\\n    const gangInfo = await getGangInfo(ns);\\n    playerGang = gangInfo ? gangInfo.faction : null;\\n    if (playerGang && !options['disable-treating-gang-as-sole-provider-of-its-augs']) {\\n        // Whatever augmentations the gang provides are so easy to get from them, might as well ignore any other factions that have them.\\n        const gangAugs = dictFactionAugs[playerGang];\\n        ns.print(`Your gang ${playerGang} provides easy access to ${gangAugs.length} augs. Ignoring these augs from the original factions that provide them.`);\\n        for (const faction of allKnownFactions.filter(f => f != playerGang))\\n            dictFactionAugs[faction] = dictFactionAugs[faction].filter(a => !gangAugs.includes(a));\\n    }\\n\\n    mostExpensiveAugByFaction = Object.fromEntries(allKnownFactions.map(f => [f,\\n        dictFactionAugs[f].filter(aug => !ownedAugmentations.includes(aug))\\n            .reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    //ns.print(\\\"Most expensive unowned aug by faction: \\\" + JSON.stringify(mostExpensiveAugByFaction));\\n    // TODO: Detect when the most expensive aug from two factions is the same - only need it from the first one. (Update lists and remove 'afforded' augs?)\\n    mostExpensiveDesiredAugByFaction = Object.fromEntries(allKnownFactions.map(f => [f,\\n        dictFactionAugs[f].filter(aug => !ownedAugmentations.includes(aug) && (\\n            Object.keys(dictAugStats[aug]).length == 0 || options['desired-stats'].length == 0 ||\\n            Object.keys(dictAugStats[aug]).some(key => options['desired-stats'].some(stat => key.includes(stat)))\\n        )).reduce((max, aug) => Math.max(max, dictAugRepReqs[aug]), -1)]));\\n    //ns.print(\\\"Most expensive desired aug by faction: \\\" + JSON.stringify(mostExpensiveDesiredAugByFaction));\\n\\n    // Filter out factions who have no augs (or tentatively filter those with no desirable augs) unless otherwise configured. The exception is\\n    // we will always filter the most-precluding city factions, (but not [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"], which can all be joined simultaneously)\\n    // TODO: Think this over more. need to filter e.g. chonquing if volhaven is incomplete...\\n    const filterableFactions = (options['get-invited-to-every-faction'] ? [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"] : allKnownFactions);\\n    // Unless otherwise configured, we will skip factions with no remaining augmentations\\n    completedFactions = filterableFactions.filter(fac => mostExpensiveAugByFaction[fac] == -1);\\n    softCompletedFactions = filterableFactions.filter(fac => mostExpensiveDesiredAugByFaction[fac] == -1 && !completedFactions.includes(fac));\\n    skipFactions = options.skip.concat(cannotWorkForFactions).concat(completedFactions).filter(fac => !firstFactions.includes(fac));\\n    if (completedFactions.length > 0)\\n        ns.print(`${completedFactions.length} factions will be skipped (for having all augs purchased): ${completedFactions.join(\\\", \\\")}`);\\n    if (softCompletedFactions.length > 0)\\n        ns.print(`${softCompletedFactions.length} factions will initially be skipped (all desired augs purchased): ${softCompletedFactions.join(\\\", \\\")}`);\\n\\n    // TODO: If --prioritize-invites is set, we should have a preferred faction order that puts easiest-invites-to-earn at the front (e.g. all city factions)\\n    numJoinedFactions = playerInfo.factions.length;\\n    fulcrummHackReq = await getServerRequiredHackLevel(ns, \\\"fulcrumassets\\\");\\n}\\n\\n/** @param {NS} ns */\\nasync function mainLoop(ns) {\\n    if (!breakToMainLoop()) scope++; // Increase the scope of work if the last iteration completed early (i.e. due to all work within that scope being complete)\\n    mainLoopStart = Date.now();\\n    ns.print(`INFO: Starting main work loop with scope: ${scope}...`);\\n\\n    // Update information that may have changed since our last loop\\n    const player = await getPlayerInfo(ns);\\n    if (player.factions.length > numJoinedFactions) { // If we've recently joined a new faction, reset our work scope\\n        scope = 1; // Back to basics until we've satisfied all highest-priority work\\n        numJoinedFactions = player.factions.length;\\n    }\\n    // Immediately accept any outstanding faction invitations for factions we want to earn rep with soon\\n    // TODO: If check if we would qualify for an invite to any factions just by travelling, and do so to start earning passive rep\\n    const invites = await checkFactionInvites(ns);\\n    const invitesToAccept = options['get-invited-to-every-faction'] || options['prioritize-invites'] ?\\n        invites.filter(f => !skipFactions.includes(f)) :\\n        invites.filter(f => !skipFactions.includes(f) && !softCompletedFactions.includes(f));\\n    for (const invite of invitesToAccept)\\n        await tryJoinFaction(ns, invite);\\n    // Get some information about gangs (if unlocked)\\n    if (2 in dictSourceFiles) {\\n        if (!playerGang) { // Check if we've joined a gang since our last iteration\\n            const gangInfo = await getGangInfo(ns);\\n            playerGang = gangInfo ? gangInfo.faction : null;\\n            // If we've only just now joined a gang, we have to reload startup data, because the augs offered by our gang faction has now changed.\\n            if (playerGang) await loadStartupData(ns);\\n        }\\n        if (ns.heart.break() <= options['karma-threshold-for-gang-invites']) { // Start trying to earn gang faction invites if we're close to unlocking gangs\\n            if (!playerGang) {\\n                log(ns, `INFO: We are nearing the Karma required to unlock gangs (${formatNumberShort(ns.heart.break())} / -54K). Prioritize earning gang faction invites.`);\\n                for (const factionName of desiredGangFactions)\\n                    await earnFactionInvite(ns, factionName);\\n            }\\n        }\\n    }\\n    // If bladeburner is currently active, but we do not yet have The Blade's Simulacrum decide, we may choose to we pause working.        \\n    if (7 in dictSourceFiles && !hasSimulacrum && !options['no-bladeburner-check']) {\\n        if (playerGang) { // Heuristic: If we're in a gang, its rep will give us access to most augs, we can take a break from working in favour of bladeburner progress\\n            // Check if the player has joined bladeburner (can stop checking once we see they are)\\n            playerInBladeburner = playerInBladeburner || await getNsDataThroughFile(ns, 'ns.bladeburner.inBladeburner()');\\n            if (playerInBladeburner) {\\n                ns.print(`INFO: Gang will give us most augs, so pausing work to allow Bladeburner to operate.`);\\n                await stop(ns); // stop working so bladeburner can run\\n                await ns.sleep(checkForNewPrioritiesInterval);\\n                return;\\n            }\\n        }\\n    }\\n\\n    // Remove Fulcrum from our \\\"EarlyFactionOrder\\\" if hack level is insufficient to backdoor their server\\n    let priorityFactions = options['crime-focus'] ? preferredCrimeFactionOrder.slice() : preferredEarlyFactionOrder.slice();\\n    if (player.skills.hacking < fulcrummHackReq - 10) { // Assume that if we're within 10, we'll get there by the time we've earned the invite\\n        priorityFactions.splice(priorityFactions.findIndex(c => c == \\\"Fulcrum Secret Technologies\\\"), 1);\\n        ns.print(`Fulcrum faction server requires ${fulcrummHackReq} hack, so removing from our initial priority list for now.`);\\n    } // TODO: Otherwise, if we get Fulcrum, we have no need for a couple other company factions\\n\\n    // Strategy 1: Tackle a consolidated list of desired faction order, interleaving simple factions and megacorporations\\n    const factionWorkOrder = firstFactions.concat(priorityFactions.filter(f => // Remove factions from our initial \\\"work order\\\" if we've bought all desired augmentations.\\n        !firstFactions.includes(f) && !skipFactions.includes(f) && !softCompletedFactions.includes(f)));\\n    for (const faction of factionWorkOrder) {\\n        if (breakToMainLoop()) break; // Only continue on to the next faction if it isn't time for a high-level update.\\n        let earnedNewFactionInvite = false;\\n        if (preferredCompanyFactionOrder.includes(faction)) // If this is a company faction, we need to work for the company first\\n            earnedNewFactionInvite = await workForMegacorpFactionInvite(ns, faction, true);\\n        // If new work was done for a company or their faction, restart the main work loop to see if we've since unlocked a higher-priority faction in the list\\n        if (earnedNewFactionInvite || await workForSingleFaction(ns, faction)) {\\n            scope--; // De-increment scope so that effecitve scope doesn't increase on the next loop (i.e. it will be incremented back to what it is now)\\n            break;\\n        }\\n    }\\n    if (scope <= 1 || breakToMainLoop()) return;\\n\\n    // Strategy 2: Grind XP with all priority factions that are joined or can be joined, until every single one has desired REP\\n    for (const faction of factionWorkOrder)\\n        if (!breakToMainLoop()) await workForSingleFaction(ns, faction);\\n    if (scope <= 2 || breakToMainLoop()) return;\\n\\n    // Strategy 3: Work for any megacorporations not yet completed to earn their faction invites. Once joined, we don't lose these factions on reset.\\n    let megacorpFactions = preferredCompanyFactionOrder.filter(f => !skipFactions.includes(f));\\n    await workForAllMegacorps(ns, megacorpFactions, false);\\n    if (scope <= 3 || breakToMainLoop()) return;\\n\\n    // Strategy 4: Work for megacorps again, but this time also work for the company factions once the invite is earned\\n    await workForAllMegacorps(ns, megacorpFactions, true);\\n    if (scope <= 4 || breakToMainLoop()) return;\\n\\n    // Strategies 5+ now work towards getting an invite to *all factions in the game* (sorted by least-expensive final aug (correlated to easiest faction-invite requirement))\\n    let joinedFactions = player.factions; // In case our hard-coded list of factions is missing anything, merge it with the list of all factions\\n    let knownFactions = factions.concat(joinedFactions.filter(f => !factions.includes(f)));\\n    let allIncompleteFactions = knownFactions.filter(f => !skipFactions.includes(f) && !completedFactions.includes(f)).sort((a, b) => mostExpensiveAugByFaction[a] - mostExpensiveAugByFaction[b]);\\n    // Strategy 5: For *all factions in the game*, try to earn an invite and work for rep until we can afford the most-expensive *desired* aug (or unlock donations, whichever comes first)\\n    for (const faction of allIncompleteFactions.filter(f => !softCompletedFactions.includes(f)))\\n        if (!breakToMainLoop()) await workForSingleFaction(ns, faction);\\n    if (scope <= 5 || breakToMainLoop()) return;\\n\\n    // Strategy 6: Revisit all factions until each has enough rep to unlock donations - so if we can't afford all augs this reset, at least we don't need to grind for rep on the next reset\\n    // For this, we reverse the order (ones with augs costing the most-rep to least) since these will take the most time to re-grind rep for if we can't buy them this reset.\\n    for (const faction of allIncompleteFactions.reverse())\\n        if (breakToMainLoop()) // Only continue on to the next faction if it isn't time for a high-level update.\\n            await workForSingleFaction(ns, faction, true);\\n    if (scope <= 6 || breakToMainLoop()) return;\\n\\n    // Strategy 7:  Next, revisit all factions and grind XP until we can afford the most expensive aug, even if we could just buy the required rep next reset\\n    for (const faction of allIncompleteFactions.reverse()) // Re-reverse the sort order so we start with the easiest (cheapest) faction augs to complete\\n        if (breakToMainLoop()) // Only continue on to the next faction if it isn't time for a high-level update.\\n            await workForSingleFaction(ns, faction, true, true);\\n    if (scope <= 7 || breakToMainLoop()) return;\\n\\n    // Strategy 8: Busy ourselves for a while longer, then loop to see if there anything more we can do for the above factions\\n    let factionsWeCanWorkFor = joinedFactions.filter(f => !options.skip.includes(f) && !cannotWorkForFactions.includes(f) && f != playerGang);\\n    let foundWork = false;\\n    if (factionsWeCanWorkFor.length > 0 && !options['crime-focus']) {\\n        // Do a little work for whatever faction has the most favor (e.g. to earn EXP and enable additional neuroflux purchases)\\n        let mostFavorFaction = factionsWeCanWorkFor.sort((a, b) => (dictFactionFavors[b] || 0) - (dictFactionFavors[a] || 0))[0];\\n        let targetRep = 1000 + (await getFactionReputation(ns, mostFavorFaction)) * 1.05; // Hack: Grow rep by ~5%, plus 1000 incase it's currently 0\\n        ns.print(`INFO: All useful work complete. Grinding an additional 5% rep (to ${formatNumberShort(targetRep)}) ` +\\n            `with highest-favor faction: ${mostFavorFaction} (${(dictFactionFavors[mostFavorFaction] || 0).toFixed(2)} favor)`);\\n        foundWork = await workForSingleFaction(ns, mostFavorFaction, false, false, targetRep);\\n    }\\n    if (!foundWork && !options['no-crime']) { // Otherwise, kill some time by doing crimes for a little while\\n        ns.print(`INFO: Nothing to do. Doing a little crime...`);\\n        await crimeForKillsKarmaStats(ns, 0, -ns.heart.break() + 1000 /* Hack: Decrease Karma by 1000 */, 0);\\n    } else if (!foundWork) { // If our hands our tied, twiddle our thumbs a bit\\n        ns.print(`INFO: Nothing to do. Sleeping for 30 seconds to see if magically we join a faction`);\\n        await ns.sleep(30000);\\n    }\\n    if (scope <= 8) scope--; // Cap the 'scope' value from increasing perpetually when we're on our last strategy\\n}\\n\\n// Ram-dodging helper, runs a command for all items in a list and returns a dictionary.\\nconst dictCommand = (command) => `Object.fromEntries(ns.args.map(o => [o, ${command}]))`;\\n\\nconst requiredMoneyByFaction = {\\n    \\\"Tian Di Hui\\\": 1E6, \\\"Sector-12\\\": 15E6, \\\"Chongqing\\\": 20E6, \\\"New Tokyo\\\": 20E6, \\\"Ishima\\\": 30E6, \\\"Aevum\\\": 40E6, \\\"Volhaven\\\": 50E6,\\n    \\\"Slum Snakes\\\": 1E6, \\\"Silhouette\\\": 15E6, \\\"The Syndicate\\\": 10E6, \\\"The Covenant\\\": 75E9, \\\"Daedalus\\\": 100E9, \\\"Illuminati\\\": 150E9\\n};\\nconst requiredBackdoorByFaction = { \\\"CyberSec\\\": \\\"CSEC\\\", \\\"NiteSec\\\": \\\"avmnite-02h\\\", \\\"The Black Hand\\\": \\\"I.I.I.I\\\", \\\"BitRunners\\\": \\\"run4theh111z\\\", \\\"Fulcrum Secret Technologies\\\": \\\"fulcrumassets\\\" };\\nconst requiredHackByFaction = { \\\"Tian Di Hui\\\": 50, \\\"Netburners\\\": 80, \\\"Speakers for the Dead\\\": 100, \\\"The Syndicate\\\": 200, \\\"The Dark Army\\\": 300, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 2500, \\\"Illuminati\\\": 1500 };\\nconst requiredCombatByFaction = { \\\"Slum Snakes\\\": 30, \\\"Tetrads\\\": 75, \\\"Speakers for the Dead\\\": 300, \\\"The Syndicate\\\": 200, \\\"The Dark Army\\\": 300, \\\"The Covenant\\\": 850, \\\"Daedalus\\\": 1500, \\\"Illuminati\\\": 1200 };\\nconst requiredKarmaByFaction = { \\\"Slum Snakes\\\": 9, \\\"Tetrads\\\": 18, \\\"Silhouette\\\": 22, \\\"Speakers for the Dead\\\": 45, \\\"The Dark Army\\\": 45, \\\"The Syndicate\\\": 90 };\\nconst requiredKillsByFaction = { \\\"Speakers for the Dead\\\": 30, \\\"The Dark Army\\\": 5 };\\nconst reqHackingOrCombat = [\\\"Daedalus\\\"]; // Special case factions that require only hacking or combat stats, not both\\n\\n/** @param {NS} ns */\\nasync function earnFactionInvite(ns, factionName) {\\n    let player = await getPlayerInfo(ns);\\n    const joinedFactions = player.factions;\\n    if (joinedFactions.includes(factionName)) return true;\\n    var invitations = await checkFactionInvites(ns);\\n    if (invitations.includes(factionName))\\n        return await tryJoinFaction(ns, factionName);\\n\\n    // Can't join certain factions for various reasons\\n    let reasonPrefix = `Cannot join faction \\\"${factionName}\\\" because`;\\n    let precludingFaction;\\n    if ([\\\"Aevum\\\", \\\"Sector-12\\\"].includes(factionName) && (precludingFaction = [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"].find(f => joinedFactions.includes(f))) ||\\n        [\\\"Volhaven\\\"].includes(factionName) && (precludingFaction = [\\\"Aevum\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"].find(f => joinedFactions.includes(f))))\\n        return ns.print(`${reasonPrefix} precluding faction \\\"${precludingFaction}\\\"\\\" has been joined.`);\\n    let requirement;\\n    // See if we can take action to earn an invite for the next faction under consideration\\n    let workedForInvite = false;\\n    // If committing crimes can help us join a faction - we know how to do that\\n    let doCrime = false;\\n    if ((requirement = requiredKarmaByFaction[factionName]) && -ns.heart.break() < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient Karma. Need: ${-requirement}, Have: ${ns.heart.break()}`);\\n        doCrime = true;\\n    }\\n    if ((requirement = requiredKillsByFaction[factionName]) && player.numPeopleKilled < requirement) {\\n        ns.print(`${reasonPrefix} you have insufficient kills. Need: ${requirement}, Have: ${player.numPeopleKilled}`);\\n        doCrime = true;\\n    }\\n    // Check on physical stat requirements\\n    const physicalStats = [\\\"strength\\\", \\\"defense\\\", \\\"dexterity\\\", \\\"agility\\\"];\\n    // Establish some helper functions used to determine how fast we can train a stat\\n    const title = s => s && s[0].toUpperCase() + s.slice(1); // Annoyingly bitnode multis capitalize the first letter physical stat name\\n    const heuristic = (stat, trainingBitnodeMult) =>\\n        Math.sqrt(player.mults[stat] * bitnodeMultipliers[`${title(stat)}LevelMultiplier`] *\\n            /* */ player.mults[`${stat}_exp`] * trainingBitnodeMult);\\n    const crimeHeuristic = (stat) => heuristic(stat, bitnodeMultipliers.CrimeExpGain); // When training with crime\\n    const classHeuristic = (stat) => heuristic(stat, bitnodeMultipliers.ClassGymExpGain); // When training in university\\n    // Check which stats need to be trained up\\n    requirement = requiredCombatByFaction[factionName];\\n    let deficientStats = !requirement ? [] : physicalStats.map(stat => ({ stat, value: player.skills[stat] })).filter(stat => stat.value < requirement);\\n    // Hash for special-case factions (just 'Daedalus' for now) requiring *either* hacking *or* combat\\n    if (reqHackingOrCombat.includes(factionName) && deficientStats.length > 0 && (\\n        // Compare roughly how long it will take to train up our hacking stat\\n        (requiredHackByFaction[factionName] - player.skills.hacking) / classHeuristic('hacking') <\\n        // To the slowest time it will take to train up our deficient physical stats\\n        Math.min(...deficientStats.map(s => (requiredCombatByFaction[factionName] - s.value) / crimeHeuristic(s.stat)))))\\n        ns.print(`Ignoring combat requirement for ${factionName} as we are more likely to unlock them via hacking stats.`);\\n    else if (deficientStats.length > 0) {\\n        ns.print(`${reasonPrefix} you have insufficient combat stats. Need: ${requirement} of each, Have ` +\\n            physicalStats.map(s => `${s.slice(0, 3)}: ${player.skills[s]}`).join(\\\", \\\"));\\n        const em = requirement / options['training-stat-per-multi-threshold'];\\n        // Hack: Create a rough heuristic suggesting how much multi we need to train physical stats in a reasonable amount of time. TODO: Be smarter\\n        if (deficientStats.map(s => s.stat).some(s => crimeHeuristic(s) < em))\\n            return ns.print(\\\"Some mults * exp_mults * bitnode mults appear to be too low to increase stats in a reasonable amount of time. \\\" +\\n                `You can control this with --training-stat-per-multi-threshold. Current sqrt(mult*exp_mult*bn_mult*bn_exp_mult) ` +\\n                `should be ~${formatNumberShort(em, 2)}, have ` + deficientStats.map(s => s.stat).map(s => `${s.slice(0, 3)}: sqrt(` +\\n                    `${formatNumberShort(player.mults[s])}*${formatNumberShort(player.mults[`${s}_exp`])}*` +\\n                    `${formatNumberShort(bitnodeMultipliers[`${title(s)}LevelMultiplier`])}*` +\\n                    `${formatNumberShort(bitnodeMultipliers.CrimeExpGain)})=${formatNumberShort(crimeHeuristic(s))}`).join(\\\", \\\"));\\n        doCrime = true; // TODO: There could be more efficient ways to gain combat stats than homicide, although at least this serves future crime factions\\n    }\\n    if (doCrime && options['no-crime'])\\n        return ns.print(`${reasonPrefix} Doing crime to meet faction requirements is disabled. (--no-crime or --no-focus)`);\\n    if (doCrime)\\n        workedForInvite = await crimeForKillsKarmaStats(ns, requiredKillsByFaction[factionName] || 0, requiredKarmaByFaction[factionName] || 0, requiredCombatByFaction[factionName] || 0);\\n\\n    // Study for hack levels if that's what's keeping us\\n    // Note: Check if we have insuffient hack to backdoor this faction server. If we have sufficient hack, we will \\\"waitForInvite\\\" below assuming an external script is backdooring ASAP \\n    let serverReqHackingLevel = 0;\\n    if (requirement = requiredBackdoorByFaction[factionName]) {\\n        serverReqHackingLevel = await getServerRequiredHackLevel(ns, requirement);\\n        if (player.skills.hacking < serverReqHackingLevel) {\\n            ns.print(`${reasonPrefix} you must first backdoor ${requirement}, which needs hack: ${serverReqHackingLevel}, Have: ${player.skills.hacking}`);\\n        }\\n    }\\n    requirement = Math.max(serverReqHackingLevel, requiredHackByFaction[factionName] || 0)\\n    if (requirement && player.skills.hacking < requirement &&\\n        // Special case (Daedalus): Don't grind for hack requirement if we previously did a grind for the physical requirements\\n        !(reqHackingOrCombat.includes(factionName) && workedForInvite)) {\\n        ns.print(`${reasonPrefix} you have insufficient hack level. Need: ${requirement}, Have: ${player.skills.hacking}`);\\n        const em = requirement / options['training-stat-per-multi-threshold'];\\n        if (options['no-studying'])\\n            return ns.print(`--no-studying is set, nothing we can do to improve hack level.`);\\n        else if (classHeuristic('hacking') < em)\\n            return ns.print(`Your combination of Hacking mult (${formatNumberShort(player.mults.hacking)}), exp_mult ` +\\n                `(${formatNumberShort(player.mults.hacking_exp)}), and bitnode hacking / study exp mults ` +\\n                `(${formatNumberShort(bitnodeMultipliers.HackingLevelMultiplier)}) / (${formatNumberShort(bitnodeMultipliers.ClassGymExpGain)}) ` +\\n                `are probably too low to increase hack from ${player.skills.hacking} to ${requirement} in a reasonable amount of time ` +\\n                `(${formatNumberShort(classHeuristic('hacking'))} < ${formatNumberShort(em, 2)} - configure with --training-stat-per-multi-threshold)`);\\n        let studying = false;\\n        if (player.money > options['pay-for-studies-threshold']) { // If we have sufficient money, pay for the best studies\\n            if (player.city != \\\"Volhaven\\\") await goToCity(ns, \\\"Volhaven\\\");\\n            studying = await study(ns, false, \\\"Algorithms\\\");\\n        } else if (uniByCity[player.city]) // Otherwise only go to free university if our city has a university\\n            studying = await study(ns, false, \\\"Study Computer Science\\\");\\n        else\\n            return ns.print(`You have insufficient money (${formatMoney(player.money)} < --pay-for-studies-threshold ` +\\n                `${formatMoney(options['pay-for-studies-threshold'])}) to travel or pay for studies, and your current ` +\\n                `city ${player.city} does not have a university from which to take free computer science.`);\\n        if (studying)\\n            workedForInvite = await monitorStudies(ns, 'hacking', requirement);\\n        // If we studied for hacking, and were awaiting a backdoor, spawn the backdoor script now  \\n        if (workedForInvite && serverReqHackingLevel) {\\n            player = await getPlayerInfo(ns);\\n            if (player.skills.hacking > requirement) {\\n                ns.print(`Current hacking level ${player.skills.hacking} seems to now meet the backdoor requirement ${requirement}. Spawning backdoor-all-servers.js...`);\\n                ns.run(getFilePath(\\\"/Tasks/backdoor-all-servers.js\\\"));\\n            }\\n        }\\n    }\\n    if (breakToMainLoop()) return false;\\n\\n    // Skip factions whose remaining requirement is money. There's not much we can do to earn money\\n    if ((requirement = requiredMoneyByFaction[factionName]) && player.money < requirement)\\n        return ns.print(`${reasonPrefix} you have insufficient money. Need: ${formatMoney(requirement)}, Have: ${formatMoney(player.money)}`);\\n\\n    // If travelling can help us join a faction - we can do that too\\n    player = await getPlayerInfo(ns);\\n    let travelledForInvite = false;\\n    let travelToCityOrDidRecently = async city => // Helper to consider us as having travelled for an invite if we did just now, or recently\\n        player.city != city && await goToCity(ns, city) || player.city == city && (Date.now() - lastTravel < 60000)\\n    if (['Tian Di Hui', 'Tetrads', 'The Dark Army'].includes(factionName))\\n        travelledForInvite = await travelToCityOrDidRecently('Chongqing');\\n    else if (['The Syndicate'].includes(factionName))\\n        travelledForInvite = await travelToCityOrDidRecently('Sector-12');\\n    else if ([\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Sector-12\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"].includes(factionName))\\n        travelledForInvite = await travelToCityOrDidRecently(factionName);\\n    if (travelledForInvite) {\\n        workedForInvite = true;\\n        player = await getPlayerInfo(ns); // Update player.city\\n    }\\n\\n    // Special case, earn a CEO position to gain an invite to Silhouette\\n    if (\\\"Silhouette\\\" == factionName) {\\n        ns.print(`You must be a CO (e.g. CEO/CTO) of a company to earn an invite to ${factionName}. This may take a while!`);\\n        let factionConfig = companySpecificConfigs.find(f => f.name == factionName); // We set up Silhouette with a \\\"company-specific-config\\\" so that we can work for an invite like any megacorporation faction.\\n        let companyNames = preferredCompanyFactionOrder.map(f => companySpecificConfigs.find(cf => cf.name == f)?.companyName || f);\\n        let favorByCompany = await getNsDataThroughFile(ns, dictCommand('ns.singularity.getCompanyFavor(o)'), '/Temp/getCompanyFavors.txt', companyNames);\\n        let repByCompany = await getNsDataThroughFile(ns, dictCommand('ns.singularity.getCompanyRep(o)'), '/Temp/getCompanyReps.txt', companyNames);\\n        // Change the company to work for into whichever company we can get to CEO fastest with. Minimize needed_rep/rep_gain_rate. CEO job is at 3.2e6 rep, so (3.2e6-current_rep)/(100+favor).\\n        factionConfig.companyName = companyNames.sort((a, b) => (3.2e6 - repByCompany[a]) / (100 + favorByCompany[a]) - (3.2e6 - repByCompany[b]) / (100 + favorByCompany[b]))[0];\\n        // Hack: We will be working indefinitely, so we rely on an external script (daemon + faction-manager) to join this faction for us, or for checkForNewPrioritiesInterval to elapse.\\n        workedForInvite = await workForMegacorpFactionInvite(ns, factionName, false); // Work until CTO and the external script joins this faction, triggering an exit condition.\\n    }\\n\\n    if (breakToMainLoop()) return false;\\n    if (workedForInvite === true) // If we took some action to earn the faction invite, wait for it to come in\\n        return await waitForFactionInvite(ns, factionName);\\n    else\\n        return ns.print(`Nothing we can do at this time to earn an invitation to faction \\\"${factionName}\\\"...`);\\n}\\n\\n/** @param {NS} ns */\\nasync function goToCity(ns, cityName) {\\n    const player = await getPlayerInfo(ns);\\n    if (player.city == cityName) {\\n        ns.print(`Already in city ${cityName}`);\\n        return true;\\n    }\\n    if (await getNsDataThroughFile(ns, `ns.singularity.travelToCity(ns.args[0])`, null, [cityName])) {\\n        lastTravel = Date.now()\\n        log(ns, `Travelled from ${player.city} to ${cityName}`, false, 'info');\\n        return true;\\n    }\\n    if (player.money < 200000)\\n        log(ns, `WARN: Insufficient funds to travel from ${player.city} to ${cityName}`, false, 'warning');\\n    else\\n        log(ns, `ERROR: Failed to travel from ${player.city} to ${cityName} for some reason...`, false, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns */\\nexport async function crimeForKillsKarmaStats(ns, reqKills, reqKarma, reqStats, doFastCrimesOnly = false) {\\n    const bestCrimesByDifficulty = [\\\"heist\\\", \\\"assassinate\\\", \\\"homicide\\\", \\\"mug\\\"]; // Will change crimes as our success rate improves\\n    const chanceThresholds = [0.75, 0.9, 0.5, 0]; // Will change crimes once we reach this probability of success for better all-round gains\\n    doFastCrimesOnly = doFastCrimesOnly || (options ? options['fast-crimes-only'] : false);\\n    let player = await getPlayerInfo(ns);\\n    let strRequirements = [];\\n    let forever = reqKills >= Number.MAX_SAFE_INTEGER || reqKarma >= Number.MAX_SAFE_INTEGER || reqStats >= Number.MAX_SAFE_INTEGER;\\n    if (reqKills) strRequirements.push(() => `${reqKills} kills (Have ${player.numPeopleKilled})`);\\n    if (reqKarma) strRequirements.push(() => `-${reqKarma} Karma (Have ${Math.round(ns.heart.break()).toLocaleString('en')})`);\\n    if (reqStats) strRequirements.push(() => `${reqStats} of each combat stat (Have ` +\\n        `Str: ${player.skills.strength}, Def: ${player.skills.defense}, Dex: ${player.skills.dexterity}, Agi: ${player.skills.agility})`);\\n    let anyStatsDeficient = (p) => p.skills.strength < reqStats || p.skills.defense < reqStats ||\\n        /*                      */ p.skills.dexterity < reqStats || p.skills.agility < reqStats;\\n    let crime, lastCrime, crimeTime, lastStatusUpdateTime, needStats;\\n    while (forever || (needStats = anyStatsDeficient(player)) || player.numPeopleKilled < reqKills || -ns.heart.break() < reqKarma) {\\n        if (!forever && breakToMainLoop()) return ns.print('INFO: Interrupting crime to check on high-level priorities.');\\n        let crimeChances = await getNsDataThroughFile(ns, `Object.fromEntries(ns.args.map(c => [c, ns.singularity.getCrimeChance(c)]))`, '/Temp/crime-chances.txt', bestCrimesByDifficulty);\\n        let karma = -ns.heart.break();\\n        crime = crimeCount < 2 ? (crimeChances[\\\"homicide\\\"] > 0.75 ? \\\"homicide\\\" : \\\"mug\\\") : // Start with a few fast & easy crimes to boost stats if we're just starting\\n            (!needStats && (player.numPeopleKilled < reqKills || karma < reqKarma)) ? \\\"homicide\\\" : // If *all* we need now is kills or Karma, homicide is the fastest way to do that, even at low proababilities\\n                bestCrimesByDifficulty.find((c, index) => doFastCrimesOnly && index <= 1 ? 0 : crimeChances[c] >= chanceThresholds[index]); // Otherwise, crime based on success chance vs relative reward (precomputed)\\n        // Warn if current crime is disrupted\\n        let currentWork = await getCurrentWorkInfo(ns);\\n        let crimeType = currentWork.crimeType;\\n        if (!lastCrime || !(crimeType && crimeType.toLowerCase().includes(lastCrime))) {\\n            if (lastCrime) {\\n                log(ns, `Committing Crime \\\"${lastCrime}\\\" Interrupted. (Now: ${crimeType}) Restarting...`, false, 'warning');\\n                ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep doing crime\\n            }\\n            let focusArg = shouldFocus === undefined ? true : shouldFocus; // Only undefined if running as imported function\\n            crimeTime = await getNsDataThroughFile(ns, 'ns.singularity.commitCrime(ns.args[0], ns.args[1])', null, [crime, focusArg])\\n            if (shouldFocus) ns.tail(); // Force a tail window open when auto-criming with focus so that the user can more easily kill this script\\n        }\\n        // Periodic status update with progress\\n        if (lastCrime != crime || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            lastCrime = crime;\\n            lastStatusUpdateTime = Date.now();\\n            ns.print(`Committing \\\"${crime}\\\" (${(100 * crimeChances[crime]).toPrecision(3)}% success) ` +\\n                (forever ? 'forever...' : `until we reach ${strRequirements.map(r => r()).join(', ')}`));\\n        }\\n        // Sleep for some multiple of the crime time to avoid interrupting a crime in progress on the next status update\\n        let sleepTime = 1 + Math.ceil(loopSleepInterval / crimeTime) * crimeTime;\\n        await ns.sleep(sleepTime);\\n\\n        crimeCount++;\\n        player = await getPlayerInfo(ns);\\n    }\\n    ns.print(`Done committing crimes. Reached ${strRequirements.map(r => r()).join(', ')}`);\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nasync function studyForCharisma(ns, focus) {\\n    await goToCity(ns, 'Volhaven');\\n    return await study(ns, focus, 'Leadership', 'ZB Institute Of Technology');\\n}\\n\\nconst uniByCity = Object.fromEntries([[\\\"Aevum\\\", \\\"Summit University\\\"], [\\\"Sector-12\\\", \\\"Rothman University\\\"], [\\\"Volhaven\\\", \\\"ZB Institute of Technology\\\"]]);\\n\\n/** @param {NS} ns */\\nasync function study(ns, focus, course, university = null) {\\n    if (options['no-studying']) {\\n        log(ns, `WARNING: Could not study '${course}' because --no-studying is set.`, false, 'warning');\\n        return;\\n    }\\n    const playerCity = (await getPlayerInfo(ns)).city;\\n    if (!university) { // Auto-detect the university in our city\\n        university = uniByCity[playerCity];\\n        if (!university) {\\n            log(ns, `WARNING: Could not study '${course}' because we are in city '${playerCity}' without a university.`, false, 'warning');\\n            return;\\n        }\\n    }\\n    if (await getNsDataThroughFile(ns, `ns.singularity.universityCourse(ns.args[0], ns.args[1], ns.args[2])`, null, [university, course, focus])) {\\n        log(ns, `Started studying '${course}' at '${university}'`, false, 'success');\\n        return true;\\n    }\\n    log(ns, `ERROR: For some reason, failed to study '${course}' at university '${university}' (Not in correct city? Player is in '${playerCity}')`, false, 'error');\\n    return false;\\n}\\n\\n/** @param {NS} ns\\n * @returns {Promise<{ type: \\\"COMPANY\\\"|\\\"FACTION\\\"|\\\"CLASS\\\"|\\\"CRIME\\\", cyclesWorked: number, crimeType: string, classType: string, location: string, companyName: string, factionName: string, factionWorkType: string }>} */\\nasync function getCurrentWorkInfo(ns) {\\n    return (await getNsDataThroughFile(ns, 'ns.singularity.getCurrentWork()')) ?? {};\\n}\\n\\n/** @param {NS} ns\\n * Helper to wait for studies to be complete */\\nasync function monitorStudies(ns, stat, requirement) {\\n    let lastStatusUpdateTime = 0;\\n    const initialWork = await getCurrentWorkInfo(ns);\\n    while (!breakToMainLoop()) {\\n        const currentWork = await getCurrentWorkInfo(ns);\\n        if (!currentWork.classType || currentWork.classType != initialWork.classType) {\\n            log(ns, `WARNING: Somebody interrupted our studies.` +\\n                `\\\\nWAS: ${JSON.stringify(initialWork)}\\\\nNOW: ${JSON.stringify(currentWork)}`, false, 'warning');\\n            return;\\n        }\\n        const player = await getPlayerInfo(ns);\\n        if (player.skills[stat] >= requirement) {\\n            log(ns, `SUCCESS: Achieved ${stat} level ${player.skills[stat]} >= ${requirement} while studying`, false, 'info');\\n            return true;\\n        }\\n        if ((Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            lastStatusUpdateTime = Date.now();\\n            log(ns, `Studying \\\"${currentWork.classType}\\\" at ${currentWork.location} until ${stat} reaches ${requirement}. ` +\\n                `Currently at ${player.skills[stat]}...`, false, 'info'); // TODO: Compute an ETA, and configure training threshold based on ETA\\n        }\\n        await ns.sleep(loopSleepInterval);\\n    }\\n}\\n\\n/** @param {NS} ns */\\nexport async function waitForFactionInvite(ns, factionName, maxWaitTime = waitForFactionInviteTime) {\\n    ns.print(`Waiting for invite from faction \\\"${factionName}\\\" (game may delay this up to ${formatDuration(maxWaitTime)})...`);\\n    let waitTime = maxWaitTime;\\n    let lastFactionCount = null;\\n    do {\\n        var invitations = await checkFactionInvites(ns);\\n        var joinedFactions = (await getPlayerInfo(ns)).factions;\\n        const factionCount = invitations.length + joinedFactions.length;\\n        if (invitations.includes(factionName) || joinedFactions.includes(factionName))\\n            break;\\n        // If we recieved an invite, just not for the faction we wanted, reset the timer\\n        if (lastFactionCount === null) lastFactionCount = factionCount;\\n        if (factionCount > lastFactionCount) {\\n            ns.print(`INFO: Recieved a new invite, but not from \\\"${factionName}\\\". ` +\\n                `Invites are sent on a delay, so resetting the ${formatDuration(maxWaitTime)} timer...`);\\n            waitTime = maxWaitTime;\\n            lastFactionCount = factionCount;\\n        }\\n        await ns.sleep(loopSleepInterval);\\n    } while (!invitations.includes(factionName) && !joinedFactions.includes(factionName) && (waitTime -= loopSleepInterval) > 0);\\n    if (joinedFactions.includes(factionName)) // Another script may have auto-joined this faction before we could\\n        ns.print(`An external script has joined faction \\\"${factionName}\\\" for us.`);\\n    else if (!invitations.includes(factionName)) {\\n        log(ns, `ERROR: Waited ${formatDuration(maxWaitTime)}, but still have not recieved an invite for faction: \\\"${factionName}\\\" (Requirements not met?)`, false, 'error');\\n        return;\\n    } else if (!(await tryJoinFaction(ns, factionName))) {\\n        log(ns, `ERROR: Something went wrong. Earned \\\"${factionName}\\\" faction invite, but failed to join it.`, false, 'error');\\n        return;\\n    }\\n    return true;\\n}\\n\\n/** @param {NS} ns */\\nexport async function tryJoinFaction(ns, factionName) {\\n    var joinedFactions = (await getPlayerInfo(ns)).factions;\\n    if (joinedFactions.includes(factionName))\\n        return true;\\n    if (!(await getNsDataThroughFile(ns, `ns.singularity.joinFaction(ns.args[0])`, null, [factionName])))\\n        return false;\\n    log(ns, `Joined faction \\\"${factionName}\\\"`, false, 'success');\\n    return true;\\n}\\n\\n/** @param {NS} ns\\n * @returns {Promise<Player>} the result of ns.getPlayer() */\\nasync function getPlayerInfo(ns) {\\n    //return ns.getPlayer(); // Note: We may decide that we call this frequently enough it is not worth ram-dodging\\n    return await getNsDataThroughFile(ns, `ns.getPlayer()`);\\n}\\n\\n/** @param {NS} ns\\n *  @returns {Promise<string[]>} List of new faction invites */\\nasync function checkFactionInvites(ns) {\\n    return await getNsDataThroughFile(ns, 'ns.singularity.checkFactionInvitations()');\\n}\\n\\n/** @param {NS} ns\\n *  @returns {Promise<GangGenInfo|boolean>} Gang information, if we're in a gang, or False */\\nasync function getGangInfo(ns) {\\n    return await getNsDataThroughFile(ns, 'ns.gang.inGang() ? ns.gang.getGangInformation() : false', '/Temp/gang-stats.txt')\\n}\\n\\n/** @param {NS} ns \\n *  @returns {Promise<Number>} Current reputation with the specified faction */\\nasync function getFactionReputation(ns, factionName) {\\n    return await getNsDataThroughFile(ns, `ns.singularity.getFactionRep(ns.args[0])`, null, [factionName]);\\n}\\n\\n/** @param {NS} ns\\n *  @returns {Promise<Number>} Current reputation with the specified company */\\nasync function getCompanyReputation(ns, companyName) {\\n    return await getNsDataThroughFile(ns, `ns.singularity.getCompanyRep(ns.args[0])`, null, [companyName]);\\n}\\n\\n/** @param {NS} ns\\n *  @returns {Promise<Number>} Current favour with the specified faction */\\nasync function getCurrentFactionFavour(ns, factionName) {\\n    return await getNsDataThroughFile(ns, `ns.singularity.getFactionFavor(ns.args[0])`, null, [factionName]);\\n}\\n\\n/** @param {NS} ns\\n *  @returns {Promise<Number>} The hacking level required for the specified server */\\nasync function getServerRequiredHackLevel(ns, serverName) {\\n    return await getNsDataThroughFile(ns, `ns.getServerRequiredHackingLevel(ns.args[0])`, null, [serverName]);\\n}\\n\\n/** A special check for when we unlock donations with Daedalus, this is usually a good time to reset. \\n * @param {NS} ns */\\nasync function daedalusSpecialCheck(ns, favorRepRequired, currentReputation) {\\n    if (favorRepRequired == 0 || currentReputation < favorRepRequired) return false;\\n    // If we would be unlocking donations, but actually, we're pretty close to just being able to afford TRP, no impetus to reset.\\n    if (currentReputation >= 0.9 * 2.500e6) return false;\\n    log(ns, `INFO: You have enough reputation with Daedalus (have ${formatNumberShort(currentReputation)}) that you will ` +\\n        `unlock donations (needed ${formatNumberShort(favorRepRequired)}) with them on your next reset.`, !notifiedAboutDaedalus, \\\"info\\\");\\n    await ns.write(\\\"/Temp/Daedalus-donation-rep-attained.txt\\\", \\\"True\\\", \\\"w\\\"); // HACK: To notify autopilot that we can reset for rep now.\\n    notifiedAboutDaedalus = true;\\n}\\n\\nlet lastFactionWorkStatus = \\\"\\\";\\n/** @param {NS} ns \\n * Checks how much reputation we need with this faction to either buy all augmentations or get 150 favour, then works to that amount.\\n * */\\nexport async function workForSingleFaction(ns, factionName, forceUnlockDonations = false, forceBestAug = false, forceRep = undefined) {\\n    const repToFavour = (rep) => Math.ceil(25500 * 1.02 ** (rep - 1) - 25000);\\n    let highestRepAug = forceBestAug ? mostExpensiveAugByFaction[factionName] : mostExpensiveDesiredAugByFaction[factionName];\\n    let startingFavor = dictFactionFavors[factionName] || 0;\\n    let favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n    // When to stop grinding faction rep (usually ~467,000 to get 150 favour) Set this lower if there are no augs requiring that much REP\\n    let factionRepRequired = forceRep ? forceRep : forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n    if (highestRepAug == -1 && !firstFactions.includes(factionName) && !forceRep && !options['get-invited-to-every-faction'])\\n        return ns.print(`All \\\"${factionName}\\\" augmentations are owned. Skipping unlocking faction...`);\\n    // Ensure we get an invite to location-based factions we might want / need\\n    if (!await earnFactionInvite(ns, factionName))\\n        return ns.print(`We are not yet part of faction \\\"${factionName}\\\". Skipping working for faction...`);\\n    if (startingFavor >= repToDonate && !forceRep) // If we have already unlocked donations via favour - no need to grind for rep\\n        return ns.print(`Donations already unlocked for \\\"${factionName}\\\". You should buy access to augs. Skipping working for faction...`);\\n    if (playerGang == factionName) // Cannot work for your own gang faction.\\n        return ns.print(`\\\"${factionName}\\\" is your gang faction. You can only earn rep in your gang via respect.`);\\n    if (forceUnlockDonations && mostExpensiveAugByFaction[factionName] < 0.2 * factionRepRequired) { // Special check to avoid pointless donation unlocking\\n        ns.print(`The last \\\"${factionName}\\\" aug is only ${mostExpensiveAugByFaction[factionName].toLocaleString('en')} rep, ` +\\n            `not worth grinding ${favorRepRequired.toLocaleString('en')} rep to unlock donations.`);\\n        forceUnlockDonations = false;\\n        factionRepRequired = highestRepAug = mostExpensiveAugByFaction[factionName];\\n    }\\n\\n    let currentReputation = await getFactionReputation(ns, factionName);\\n    // If the best faction aug is within 10% of our current rep, grind all the way to it so we can get it immediately, regardless of our current rep target\\n    if (forceBestAug || highestRepAug <= 1.1 * Math.max(currentReputation, factionRepRequired))\\n        factionRepRequired = Math.max(highestRepAug, factionRepRequired);\\n    if (factionName == \\\"Daedalus\\\") await daedalusSpecialCheck(ns, favorRepRequired, currentReputation);\\n    if (currentReputation >= factionRepRequired)\\n        return ns.print(`Faction \\\"${factionName}\\\" required rep of ${Math.round(factionRepRequired).toLocaleString('en')} has already been attained ` +\\n            `(Current rep: ${Math.round(currentReputation).toLocaleString('en')}). Skipping working for faction...`)\\n\\n    ns.print(`Faction \\\"${factionName}\\\" Highest Aug Req: ${highestRepAug?.toLocaleString('en')}, Current Favor (` +\\n        `${startingFavor?.toFixed(2)}/${repToDonate?.toFixed(2)}) Req: ${Math.round(favorRepRequired).toLocaleString('en')}`);\\n    if (options['invites-only'])\\n        return ns.print(`--invites-only Skipping working for faction...`);\\n    if (options['prioritize-invites'] && !forceUnlockDonations && !forceBestAug && !forceRep)\\n        return ns.print(`--prioritize-invites Skipping working for faction for now...`);\\n\\n    let lastStatusUpdateTime = 0;\\n    let workAssigned = false; // Use to track whether work previously assigned by this script is being disrupted\\n    let bestFactionJob = null;\\n    while ((currentReputation = (await getFactionReputation(ns, factionName))) < factionRepRequired) {\\n        if (breakToMainLoop()) return ns.print('INFO: Interrupting faction work to check on high-level priorities.');\\n        const currentWork = await getCurrentWorkInfo(ns);\\n        let factionJob = currentWork.factionWorkType;\\n        // Detect if faction work was interrupted and log a warning\\n        if (workAssigned && currentWork.factionName != factionName) {\\n            log(ns, `Work for faction ${factionName} was interrupted (Now: ${JSON.stringify(currentWork)}). Restarting...`, false, 'warning');\\n            workAssigned = false;\\n            ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep working\\n        }\\n        // Periodically check again what the best faction work is (may change with stats over time)\\n        if ((Date.now() - lastStatusUpdateTime) > statusUpdateInterval)\\n            workAssigned = false; // This will force us to redetermine the best faction work.\\n        // Heads up! Current implementation of \\\"detectBestFactionWork\\\" changes the work currently being done, so we must always re-assign work afterwards \\n        if (!workAssigned)\\n            bestFactionJob = await detectBestFactionWork(ns, factionName);\\n        // For purposes of being informative, log a message if the detected \\\"bestFactionJob\\\" is different from what we were previously doing\\n        if (currentWork.factionName == factionName && factionJob != bestFactionJob) {\\n            log(ns, `INFO: Detected that \\\"${bestFactionJob}\\\" gives more rep than previous work \\\"${factionJob}\\\". Switching...`);\\n            workAssigned = false;\\n        }\\n        // Ensure we are doing the best faction work (must always be done after \\\"detect\\\" routine is run)    \\n        if (!workAssigned) {\\n            if (await startWorkForFaction(ns, factionName, bestFactionJob, shouldFocus)) {\\n                workAssigned = true;\\n                if (shouldFocus) ns.tail(); // Keep a tail window open if we're stealing focus\\n            } else {\\n                log(ns, `ERROR: Something went wrong, failed to start \\\"${bestFactionJob}\\\" work for faction \\\"${factionName}\\\" (Is gang faction, or not joined?)`, false, 'error');\\n                break;\\n            }\\n        }\\n\\n        let status = `Doing '${bestFactionJob}' work for \\\"${factionName}\\\" until ${Math.round(factionRepRequired).toLocaleString('en')} rep.`;\\n        if (lastFactionWorkStatus != status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            lastFactionWorkStatus = status;\\n            lastStatusUpdateTime = Date.now();\\n            // Measure approximately how quickly we're gaining reputation to give a rough ETA\\n            const repGainRate = await measureFactionRepGainRate(ns, factionName);\\n            const eta_milliseconds = 1000 * (factionRepRequired - currentReputation) / repGainRate;\\n            ns.print(`${status} Currently at ${Math.round(currentReputation).toLocaleString('en')}, ` +\\n                `earning ${formatNumberShort(repGainRate)} rep/sec. ` +\\n                (hasFocusPenalty && !shouldFocus ? '(after 20% non-focus Penalty) ' : '') + `(ETA: ${formatDuration(eta_milliseconds)})`);\\n        }\\n        await tryBuyReputation(ns);\\n        await ns.sleep(loopSleepInterval);\\n        if (!forceBestAug && !forceRep) { // Detect our rep requirement decreasing (e.g. if we exported for our daily +1 faction rep)\\n            let currentFavor = await getCurrentFactionFavour(ns, factionName);\\n            if (currentFavor === undefined)\\n                log(ns, `ERROR: WTF... getCurrentFactionFavour returned 'undefined' for factionName: ${factionName}`, true, 'error');\\n            else if (currentFavor > startingFavor) {\\n                startingFavor = dictFactionFavors[factionName] = currentFavor;\\n                favorRepRequired = Math.max(0, repToFavour(repToDonate) - repToFavour(startingFavor));\\n                factionRepRequired = forceUnlockDonations ? favorRepRequired : Math.min(highestRepAug, favorRepRequired);\\n            }\\n        }\\n    }\\n    if (currentReputation >= factionRepRequired)\\n        ns.print(`Attained ${Math.round(currentReputation).toLocaleString('en')} rep with \\\"${factionName}\\\" ` +\\n            `(needed ${factionRepRequired.toLocaleString('en')}).`);\\n    if (factionName == \\\"Daedalus\\\") await daedalusSpecialCheck(ns, favorRepRequired, currentReputation);\\n    return currentReputation >= factionRepRequired;\\n}\\n\\n/** Stop whatever focus work we're currently doing\\n * @param {NS} ns */\\nasync function stop(ns) { return await getNsDataThroughFile(ns, `ns.singularity.stopAction()`); }\\n\\n/** Start the specified faction work\\n * @param {NS} ns */\\nasync function startWorkForFaction(ns, factionName, work, focus) {\\n    //log(ns, `INFO: startWorkForFaction(${factionName}, ${work}, ${focus})`);\\n    return await getNsDataThroughFile(ns, `ns.singularity.workForFaction(ns.args[0], ns.args[1], ns.args[2])`, null, [factionName, work, focus])\\n}\\n\\n/** Measure our rep gain rate (per second)\\n * @param {NS} ns\\n * @param {() => Promise<number>} fnSampleReputation - An async function that samples the reputation at a current point in time */\\nasync function measureRepGainRate(ns, fnSampleReputation) {\\n    //return (await getPlayerInfo(ns)).workRepGainRate;\\n    // The game no longer provides the rep gain rate for a given work type, so we must measure it\\n    const initialReputation = await fnSampleReputation();\\n    let nextTickReputation;\\n    let start = Date.now();\\n    while (initialReputation == (nextTickReputation = await fnSampleReputation()) && Date.now() - start < 450)\\n        await ns.sleep(50);\\n    return (nextTickReputation - initialReputation) * 5; // Assume this rep gain was for a 200 tick\\n}\\n/** Measure our faction rep gain rate (per second)\\n * @param {NS} ns */\\nasync function measureFactionRepGainRate(ns, factionName) {\\n    return await measureRepGainRate(ns, async () => await getFactionReputation(ns, factionName));\\n}\\n/** Measure our company rep gain rate (per second)\\n * @param {NS} ns */\\nasync function measureCompanyRepGainRate(ns, companyName) {\\n    return await measureRepGainRate(ns, async () => await getCompanyReputation(ns, companyName));\\n}\\n\\n/** Try all work types and see what gives the best rep gain with this faction!\\n * @param {NS} ns \\n * @param {string} factionName The name of the faction to work for\\n * @returns {Promise<FactionWorkType>} The faction work type measured to give the best reputation gain rate */\\nasync function detectBestFactionWork(ns, factionName) {\\n    let bestWork, bestRepRate = 0;\\n    for (const work of Object.values(ns.enums.FactionWorkType)) {\\n        if (!(await startWorkForFaction(ns, factionName, work, shouldFocus))) {\\n            //ns.print(`\\\"${factionName}\\\": \\\"${work}\\\"\\\" work not supported.`);\\n            continue; // This type of faction work must not be supported\\n        }\\n        const currentRepGainRate = await measureFactionRepGainRate(ns, factionName);\\n\\n        //ns.print(`\\\"${factionName}\\\" work ${work} provides ${formatNumberShort(currentRepGainRate)} rep rate`);\\n        if (currentRepGainRate > bestRepRate) {\\n            bestRepRate = currentRepGainRate;\\n            bestWork = work;\\n        }\\n    }\\n    if (bestWork === undefined) {\\n        mainLoopStart = 0; // Force break out of whatever work loop we're in to update info (maybe we formed a gang with the faction we were working for?)\\n        throw Error(`The faction \\\"${factionName}\\\" does not support any of the known work types. Cannot work for this faction!`);\\n    }\\n    return bestWork;\\n}\\n\\n/** @param {NS} ns \\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions to work for, sorted in the order they should be worked for\\n *  @param {Array<string>} megacorpFactionsInPreferredOrder - The list of all corporate factions, sorted in the order they should be worked for\\n * */\\nexport async function workForAllMegacorps(ns, megacorpFactionsInPreferredOrder, alsoWorkForCompanyFactions, oneCompanyFactionAtATime) {\\n    let player = await getPlayerInfo(ns);\\n    if (player.skills.hacking < 225)\\n        return ns.print(`Hacking Skill ${player.skills.hacking} is to low to work for any megacorps (min req. 225).`);\\n    let joinedCompanyFactions = player.factions.filter(f => megacorpFactionsInPreferredOrder.includes(f)); // Company factions we've already joined\\n    if (joinedCompanyFactions.length > 0)\\n        ns.print(`${joinedCompanyFactions.length} companies' factions have already been joined: ${joinedCompanyFactions.join(\\\", \\\")}`)\\n    let doFactionWork = alsoWorkForCompanyFactions && oneCompanyFactionAtATime;\\n    // Earn each obtainabl megacorp faction invite, and optionally also grind faction rep\\n    let earnedAnyInvite = false;\\n    for (const factionName of megacorpFactionsInPreferredOrder) {\\n        const earnedInvite = await workForMegacorpFactionInvite(ns, factionName, doFactionWork);\\n        earnedAnyInvite = earnedAnyInvite || earnedInvite;\\n        if (earnedInvite && doFactionWork && !breakToMainLoop())\\n            await workForSingleFaction(ns, factionName);\\n        if (breakToMainLoop()) return;\\n    }\\n    if (alsoWorkForCompanyFactions && !oneCompanyFactionAtATime) { // If configured, start grinding rep with company factions we've joined\\n        if (earnedAnyInvite) // Avoid log noise by only logging this when a new invite was earned\\n            ns.print(`Done working for companies, now working for all incomplete company factions...`);\\n        for (const factionName of megacorpFactionsInPreferredOrder)\\n            if (!breakToMainLoop()) await workForSingleFaction(ns, factionName);\\n    }\\n}\\n\\n/** Helper to spend hashes on something and return the amount of hashes spent (if any)\\n * @param {NS} ns */\\nasync function trySpendHashes(ns, spendOn) {\\n    return await getNsDataThroughFile(ns,\\n        'ns.hacknet.numHashes() + ns.hacknet.spendHashes(ns.args[0]) - ns.hacknet.numHashes()',\\n        '/Temp/hacknet-spendHashes-returnSpent.txt', [spendOn]);\\n}\\n\\n/** If we're wealthy, hashes have relatively little monetary value, spend hacknet-node hashes on contracts to gain rep faster\\n * @param {NS} ns */\\nexport async function tryBuyReputation(ns) {\\n    if (options['no-coding-contracts']) return;\\n    if ((await getPlayerInfo(ns)).money > 100E9) { // If we're wealthy, hashes have relatively little monetary value, spend hacknet-node hashes on contracts to gain rep faster\\n        let spentHashes = await trySpendHashes(ns, \\\"Generate Coding Contract\\\");\\n        if (spentHashes > 0) {\\n            log(ns, `Generated a new coding contract for ${formatNumberShort(Math.round(spentHashes / 100) * 100)} hashes`, false, 'success');\\n        }\\n    }\\n}\\n\\n// Used when working for a company to see if their server has been backdoored. If so, we can expect an increase in rep-gain (used for predicting an ETA)\\nconst serverByCompany = { \\\"Bachman & Associates\\\": \\\"b-and-a\\\", \\\"ECorp\\\": \\\"ecorp\\\", \\\"Clarke Incorporated\\\": \\\"clarkinc\\\", \\\"OmniTek Incorporated\\\": \\\"omnitek\\\", \\\"NWO\\\": \\\"nwo\\\", \\\"Blade Industries\\\": \\\"blade\\\", \\\"MegaCorp\\\": \\\"megacorp\\\", \\\"KuaiGong International\\\": \\\"kuai-gong\\\", \\\"Fulcrum Technologies\\\": \\\"fulcrumtech\\\", \\\"Four Sigma\\\": \\\"4sigma\\\" };\\n\\n/** Apply to the specified role at the specified company\\n * @param {NS} ns */\\nasync function tryApplyToCompany(ns, company, role) {\\n    return await getNsDataThroughFile(ns, `ns.singularity.applyToCompany(ns.args[0], ns.args[1])`, null, [company, role])\\n}\\n\\n/** Check if the server associated with the specified company has been backdoored.\\n * @param {NS} ns */\\nasync function checkForBackdoor(ns, companyName) {\\n    return await getNsDataThroughFile(ns, `ns.getServer(ns.args[0]).backdoorInstalled`, null, [serverByCompany[companyName]]);\\n}\\n\\n/** @param {NS} ns */\\nexport async function workForMegacorpFactionInvite(ns, factionName, waitForInvite) {\\n    const companyConfig = companySpecificConfigs.find(c => c.name == factionName); // For anything company-specific\\n    const companyName = companyConfig?.companyName || factionName; // Name of the company that gives the faction (same for all but Fulcrum)\\n    const statModifier = companyConfig?.statModifier || 0; // How much e.g. Hack / Cha is needed for a promotion above the base requirement for the job\\n\\n    let player = await getPlayerInfo(ns);\\n    if (player.factions.includes(factionName)) return false; // Only return true if we did work to earn a new faction invite\\n    if ((await checkFactionInvites(ns)).includes(factionName))\\n        return waitForInvite ? await waitForFactionInvite(ns, factionName) : false;\\n    // TODO: In some scenarios, the best career path may require combat stats, this hard-codes the optimal path for hack stats\\n    const itJob = jobs.find(j => j.name == \\\"it\\\");\\n    const softwareJob = jobs.find(j => j.name == \\\"software\\\");\\n    if (itJob.reqHack[0] + statModifier > player.skills.hacking) // We don't qualify to work for this company yet if we can't meet IT qualifications (lowest there are)\\n        return ns.print(`Cannot yet work for \\\"${companyName}\\\": Need Hack ${itJob.reqHack[0] + statModifier} to get hired (current Hack: ${player.skills.hacking});`);\\n    ns.print(`Going to work for Company \\\"${companyName}\\\" next...`)\\n    let currentReputation, currentRole = \\\"\\\", currentJobTier = -1; // TODO: Derive our current position and promotion index based on player.jobs[companyName]\\n    let lastStatus = \\\"\\\", lastStatusUpdateTime = 0;\\n    let isStudying = false, isWorking = false;\\n    let backdoored = await checkForBackdoor(ns, companyName);\\n    let repRequiredForFaction = (companyConfig?.repRequiredForFaction || 400_000) - (backdoored ? 100_000 : 0);\\n    while (((currentReputation = (await getCompanyReputation(ns, companyName))) < repRequiredForFaction) && !player.factions.includes(factionName)) {\\n        if (breakToMainLoop()) return ns.print('INFO: Interrupting corporation work to check on high-level priorities.');\\n        // Determine the next promotion we're striving for (the sooner we get promoted, the faster we can earn company rep)\\n        const getTier = job => Math.min(job.reqRep.filter(r => r <= currentReputation).length, job.reqHack.filter(h => h <= player.skills.hacking).length, job.reqCha.filter(c => c <= player.skills.charisma).length) - 1;\\n        // It's generally best to hop back-and-forth between it and software engineer career paths (rep gain is about the same, but better money from software)\\n        const qualifyingItTier = getTier(itJob), qualifyingSoftwareTier = getTier(softwareJob);\\n        const bestJobTier = Math.max(qualifyingItTier, qualifyingSoftwareTier); // Go with whatever job promotes us higher\\n        const bestRoleName = qualifyingItTier > qualifyingSoftwareTier ? \\\"it\\\" : \\\"software\\\"; // If tied for qualifying tier, go for software\\n        if (currentJobTier < bestJobTier || currentRole != bestRoleName) { // We are ready for a promotion, ask for one!\\n            if (await tryApplyToCompany(ns, companyName, bestRoleName))\\n                log(ns, `Successfully applied to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion`, false, 'success');\\n            else if (currentJobTier !== -1) // Unless we just restarted \\\"work-for-factions\\\" and lost track of our current job, this is an error\\n                log(ns, `Application to \\\"${companyName}\\\" for a '${bestRoleName}' Job or Promotion failed.`, false, 'error');\\n            currentJobTier = bestJobTier; // API to apply for a job immediately gives us the highest tier we qualify for\\n            currentRole = bestRoleName;\\n            player = await getPlayerInfo(ns); // Update player.jobs info after attempted promotion\\n        }\\n        const currentJob = player.jobs[companyName];\\n        const nextJobTier = currentRole == \\\"it\\\" ? currentJobTier : currentJobTier + 1;\\n        const nextJobName = currentRole == \\\"it\\\" || nextJobTier >= itJob.reqRep.length ? \\\"software\\\" : \\\"it\\\";\\n        const nextJob = nextJobName == \\\"it\\\" ? itJob : softwareJob;\\n        const requiredHack = nextJob.reqHack[nextJobTier] === 0 ? 0 : nextJob.reqHack[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredCha = nextJob.reqCha[nextJobTier] === 0 ? 0 : nextJob.reqCha[nextJobTier] + statModifier; // Stat modifier only applies to non-zero reqs\\n        const requiredRep = nextJob.reqRep[nextJobTier]; // No modifier on rep requirements\\n        let status = `Next promotion ('${nextJobName}' #${nextJobTier}) at Hack:${requiredHack} Cha:${requiredCha} Rep:${requiredRep?.toLocaleString('en')}` +\\n            (repRequiredForFaction > nextJob.reqRep[nextJobTier] ? '' : `, but we won't need it, because we'll sooner hit ${repRequiredForFaction.toLocaleString('en')} reputation to unlock company faction \\\"${factionName}\\\"!`);\\n        // Monitor that we are still performing the expected work\\n        let currentWork = await getCurrentWorkInfo(ns);\\n        // We should only study at university if every other requirement is met but Charisma\\n        // (assume daemon is grinding hack XP as fast as it can, so no point in studying for that)\\n        if (currentReputation >= requiredRep && player.skills.hacking >= requiredHack && player.skills.charisma < requiredCha && !options['no-studying']) {\\n            status = `Studying at ZB university until Cha reaches ${requiredCha}...\\\\n` + status;\\n            // TODO: See if we can re-use the function \\\"monitorStudies\\\" here instead of duplicating a lot of the same code.\\n            let classType = currentWork.classType;\\n            if (isStudying && !(classType && classType.toLowerCase().includes('leadership'))) {\\n                log(ns, `Leadership studies were interrupted. classType=\\\"${classType}\\\" Restarting...`, false, 'warning');\\n                isStudying = false; // If something external has interrupted our studies, take note\\n                ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep studying\\n            }\\n            if (!isStudying) { // Study at ZB university if CHA is the limiter.\\n                if (await studyForCharisma(ns, shouldFocus))\\n                    [isWorking, isStudying] = [false, true];\\n            }\\n            if (requiredCha - player.skills.charisma > 10) { // Try to spend hacknet-node hashes on university upgrades while we've got a ways to study to make it go faster\\n                let spentHashes = await trySpendHashes(ns, \\\"Improve Studying\\\");\\n                if (spentHashes > 0) {\\n                    log(ns, 'Bought a \\\"Improve Studying\\\" upgrade.', false, 'success');\\n                    await studyForCharisma(ns, shouldFocus); // We must restart studying for the upgrade to take effect.\\n                }\\n            }\\n        } else if (isStudying) { // If we no longer need to study and we currently are, turn off study mode and get back to work!\\n            isStudying = false;\\n            continue; // Restart the loop so we refresh our promotion index and apply for a promotion before working more\\n        }\\n        await tryBuyReputation(ns);\\n\\n        // Regardless of the earlier promotion logic, always try for a promotion to make sure we don't miss a promotion due to buggy logic \\n        if (await tryApplyToCompany(ns, companyName, currentRole)) {\\n            player = await getPlayerInfo(ns); // Find out what our new job is\\n            log(ns, `Unexpected '${currentRole}' promotion from ${currentJob} to \\\"${player.jobs[companyName]}. Promotion logic must be off...\\\"`, false, 'warning');\\n        }\\n\\n        // If not studying, ensure we are working for this company\\n        if (!isStudying && (!isWorking || currentWork.companyName != companyName)) {\\n            if (isWorking) { // Log a warning if we discovered that work we previously began was disrupted\\n                log(ns, `Work for company ${companyName} was interrupted (Now: ${JSON.stringify(currentWork)}). Restarting...`, false, 'warning');\\n                isWorking = false;\\n                ns.tail(); // Force a tail window open to help the user kill this script if they accidentally closed the tail window and don't want to keep working\\n            }\\n            if (await getNsDataThroughFile(ns, `ns.singularity.workForCompany(ns.args[0], ns.args[1])`, null, [companyName, shouldFocus])) {\\n                isWorking = true;\\n                if (shouldFocus) ns.tail(); // Keep a tail window open if we're stealing focus\\n            } else {\\n                log(ns, `Something went wrong, failed to start working for company \\\"${companyName}\\\".`, false, 'error');\\n                break;\\n            }\\n        }\\n        if (lastStatus != status || (Date.now() - lastStatusUpdateTime) > statusUpdateInterval) {\\n            lastStatus = status;\\n            lastStatusUpdateTime = Date.now();\\n            if (!backdoored) { // Check if an external script has backdoored this company's server yet. If so, it affects our ETA. (Don't need to check again once we discover it is)\\n                backdoored = await checkForBackdoor(ns, companyName);\\n                if (backdoored) repRequiredForFaction -= 100_000;\\n            }\\n            // Measure rep gain rate to give an ETA\\n            const repGainRate = !isWorking ? 0 : await measureCompanyRepGainRate(ns, companyName);\\n            const eta = !isWorking ? \\\"?\\\" : formatDuration(1000 * ((requiredRep || repRequiredForFaction) - currentReputation) / repGainRate);\\n            player = await getPlayerInfo(ns);\\n            ns.print(`Currently a \\\"${player.jobs[companyName]}\\\" ('${currentRole}' #${currentJobTier}) for \\\"${companyName}\\\" earning ${formatNumberShort(repGainRate)} rep/sec. ` +\\n                (hasFocusPenalty && !shouldFocus ? `(after 20% non-focus Penalty)` : '') + `\\\\n` +\\n                `${status}\\\\nCurrent player stats are Hack:${player.skills.hacking} ${player.skills.hacking >= (requiredHack || 0) ? '✓' : '✗'} ` +\\n                `Cha:${player.skills.charisma} ${player.skills.charisma >= (requiredCha || 0) ? '✓' : '✗'} ` +\\n                `Rep:${Math.round(currentReputation).toLocaleString('en')} ${currentReputation >= (requiredRep || repRequiredForFaction) ? '✓' : `✗ (ETA: ${eta})`}`);\\n        }\\n        await ns.sleep(loopSleepInterval); // Sleep now and wake up periodically to check our stats / reputation progress\\n        player = await getPlayerInfo(ns); // Update player after sleeping, before our next loop\\n    }\\n    // Return true if we succeeded, false otherwise.\\n    if (currentReputation >= repRequiredForFaction) {\\n        ns.print(`Attained ${repRequiredForFaction.toLocaleString('en')} rep with \\\"${companyName}\\\".`);\\n        if (!player.factions.includes(factionName) && waitForInvite)\\n            return await waitForFactionInvite(ns, factionName);\\n        return true;\\n    }\\n    ns.print(`Stopped working for \\\"${companyName}\\\" repRequiredForFaction: ${repRequiredForFaction.toLocaleString('en')} ` +\\n        `currentReputation: ${Math.round(currentReputation).toLocaleString('en')} inFaction: ${player.factions.includes(factionName)}`);\\n    return false;\\n}\",\"filename\":\"work-for-factions.js\",\"server\":\"home\"}}],[\"Remote/grow-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/grow-target.js\",\"server\":\"home\"}}],[\"Remote/hack-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a hack. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: disable toast warnings, 7: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const disableToastWarnings = ns.args.length > 6 ? ns.args[6] : false;\\n    const loop = ns.args.length > 7 ? ns.args[7] : false;\\n    let cycleTime = expectedDuration * 4;\\n    if (cycleTime < 100) cycleTime = Math.max(1, Math.min(5, cycleTime * 2)); // For fast hacking loops, inject a delay on hack in case grow/weaken are running a bit slow.\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.hack(ns.args[0], { stock: manipulateStock }) && !disableToastWarnings)\\n            ns.toast(`Warning, hack stole 0 money. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/hack-target.js\",\"server\":\"home\"}}],[\"Remote/manualhack-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a manual hack. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock (N/A ignored), 6: disable toast warnings, 7: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const disableToastWarnings = ns.args.length > 6 ? ns.args[6] : false;\\n    const loop = ns.args.length > 7 ? ns.args[7] : false;\\n    let cycleTime = expectedDuration * 4;\\n    if (cycleTime < 100) cycleTime = Math.max(1, Math.min(5, cycleTime * 2)); // For fast hacking loops, inject a delay on hack in case grow/weaken are running a bit slow.\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.singularity.manualHack() && !disableToastWarnings)\\n            ns.toast(`Warning, hack stole 0 money. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/manualhack-target.js\",\"server\":\"home\"}}],[\"Remote/share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.share()\\n}\",\"filename\":\"Remote/share.js\",\"server\":\"home\"}}],[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"home\"}}],[\"Tasks/backdoor-all-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getNsDataThroughFile, getFilePath, log } from './helpers.js'\\n\\nconst spawnDelay = 50; // Delay to allow time for `installBackdoor` to start running before a background script connects back to 'home'\\n\\n/** @param {NS} ns \\n * Scan all servers, backdoor anything that can be backdoored, and leave a file to indicate it's been done\\n * Requires: SF-4.1 **/\\nexport let main = async ns => {\\n    let anyConnected = false;\\n    try {\\n        let servers = [\\\"home\\\"],\\n            routes = { home: [\\\"home\\\"] },\\n            myHackingLevel = ns.getHackingLevel();\\n        // Scan all servers and keep track of the path to get to them\\n        ns.disableLog(\\\"scan\\\");\\n        for (let i = 0, j; i < servers.length; i++)\\n            for (j of ns.scan(servers[i]))\\n                if (!servers.includes(j)) servers.push(j), routes[j] = routes[servers[i]].slice(), routes[j].push(j);\\n        // Filter out servers that cannot or should not be hacked / backdoored\\n        ns.disableLog(\\\"getServerRequiredHackingLevel\\\");\\n        let hackableServers = servers.filter(s => s != \\\"home\\\" && !s.includes(\\\"hacknet-\\\") && !s.includes(\\\"daemon\\\")) /*or whatever you name your purchased servers*/\\n        ns.print(`${hackableServers.length} not-owned servers on the network.`);\\n        ns.print(`${hackableServers.filter(s => ns.hasRootAccess(s)).length} servers are currently rooted.`);\\n        ns.print(`${hackableServers.filter(s => myHackingLevel > ns.getServerRequiredHackingLevel(s)).length} servers are within our hack level (${myHackingLevel}).`);\\n        ns.print(`${hackableServers.filter(s => myHackingLevel > ns.getServerRequiredHackingLevel(s) && ns.hasRootAccess(s)).length} rooted servers are within our hack level (${myHackingLevel})`);\\n\\n        let toBackdoor = await getNsDataThroughFile(ns, `ns.args.filter(s => !ns.getServer(s).backdoorInstalled)`, '/Temp/servers-to-backdoor.txt', hackableServers);\\n        let count = toBackdoor.length;\\n        ns.print(`${count} servers have yet to be backdoored.`);\\n        if (count == 0) return;\\n\\n        ns.print(`${toBackdoor.filter(s => ns.hasRootAccess(s)).length} of ${count} servers to backdoor are currently rooted.`);\\n        toBackdoor = toBackdoor.filter(s => myHackingLevel > ns.getServerRequiredHackingLevel(s));\\n        ns.print(`${toBackdoor.length} of ${count} servers to backdoor are within our hack level (${myHackingLevel}).`);\\n        toBackdoor = toBackdoor.filter(s => ns.hasRootAccess(s));\\n        ns.print(`${toBackdoor.length} of ${count} servers to be backdoored are rooted and within our hack level (${myHackingLevel})`);\\n\\n        let scriptPath = getFilePath('/Tasks/backdoor-all-servers.js.backdoor-one.js');\\n        let currentScripts = ns.ps().filter(s => s.filename == scriptPath).map(s => s.args[0]);\\n\\n        for (const server of toBackdoor) {\\n            if (currentScripts.find(x => x == server)) {\\n                log(ns, `INFO: Server already beeing backdoored: ${server}`);\\n                continue;\\n            }\\n            ns.print(`Hopping to ${server}`);\\n            anyConnected = true;\\n            for (let hop of routes[server])\\n                ns.singularity.connect(hop);\\n            if (server === \\\"w0r1d_d43m0n\\\") {\\n                ns.alert(\\\"Ready to hack w0r1d_d43m0n!\\\");\\n                while (true) await ns.sleep(10000); // Sleep forever so the script isn't run multiple times to create multiple overlapping alerts\\n            }\\n            ns.print(`Installing backdoor on \\\"${server}\\\"...`);\\n            // Kick off a separate script that will run backdoor before we connect to home.\\n            var pid = ns.run(scriptPath, 1, server);\\n            if (pid === 0)\\n                return ns.print(`Couldn't initiate a new backdoor of \\\"${server}\\\"\\\" (insufficient RAM?). Will try again later.`);\\n            await ns.sleep(spawnDelay); // Wait some time for the external backdoor script to initiate its backdoor of the current connected server\\n            ns.singularity.connect(\\\"home\\\");\\n        }\\n    } catch (err) {\\n        ns.tprint(String(err));\\n    } finally {\\n        if (anyConnected)\\n            ns.singularity.connect(\\\"home\\\");\\n    }\\n};\",\"filename\":\"Tasks/backdoor-all-servers.js\",\"server\":\"home\"}}],[\"Tasks/backdoor-all-servers.js.backdoor-one.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let target = ns.args.length > 0 ? ns.args[0] : '(unspecified server)';\\n    try {\\n        await ns.singularity.installBackdoor();\\n        ns.toast(`Backdoored ${target}`, 'success');\\n    }\\n    catch (err) {\\n        ns.tprint(`Error while running backdoor (intended for ${target}): ${String(err)}`);\\n        throw (err);\\n    }\\n}\",\"filename\":\"Tasks/backdoor-all-servers.js.backdoor-one.js\",\"server\":\"home\"}}],[\"Tasks/contractor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFilePath, getNsDataThroughFile, disableLogs, scanAllServers } from './helpers.js'\\nconst scriptSolver = getFilePath(\\\"/Tasks/contractor.js.solver.js\\\");\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    disableLogs(ns, [\\\"scan\\\"]);\\n    ns.print(\\\"Getting server list...\\\");\\n    const servers = scanAllServers(ns);\\n    ns.print(`Got ${servers.length} servers. Searching for contracts on each...`);\\n    // Retrieve all contracts and convert them to objects with the required information to solve\\n    const contractsDb = servers.map(hostname => ({ hostname, contracts: ns.ls(hostname, '.cct') }))\\n        .filter(o => o.contracts.length > 0)\\n        .map(o => o.contracts.map(contract => ({ contract, hostname: o.hostname }))).flat();\\n    if (contractsDb.length == 0)\\n        return ns.print(\\\"Found no contracts to solve.\\\");\\n\\n    // Spawn temporary scripts to gather the remainder of contract data required for solving\\n    ns.print(`Found ${contractsDb.length} contracts to solve. Gathering contract data via separate scripts...\\\"`);\\n    const serializedContractDb = JSON.stringify(contractsDb);\\n    let contractsDictCommand = async (command, tempName) => await getNsDataThroughFile(ns,\\n        `Object.fromEntries(JSON.parse(ns.args[0]).map(c => [c.contract, ${command}]))`, tempName, [serializedContractDb]);\\n    let dictContractTypes = await contractsDictCommand('ns.codingcontract.getContractType(c.contract, c.hostname)', '/Temp/contract-types.txt');\\n    let dictContractData = await contractsDictCommand('ns.codingcontract.getData(c.contract, c.hostname)', '/Temp/contract-data.txt');\\n    contractsDb.forEach(c => c.type = dictContractTypes[c.contract]);\\n    contractsDb.forEach(c => c.data = dictContractData[c.contract]);\\n\\n    // Let this script die to free up ram, and start up a new script (after a delay) that will solve all these contracts using the minimum ram footprint of 11.6 GB\\n    ns.run(getFilePath('/Tasks/run-with-delay.js'), 1, scriptSolver, 1, JSON.stringify(contractsDb));\\n}\",\"filename\":\"Tasks/contractor.js\",\"server\":\"home\"}}],[\"Tasks/contractor.js.solver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const fUnsolvedContracts = '/Temp/unsolved-contracts.txt'; // A global, persistent array of contracts we couldn't solve, so we don't repeatedly log about them.\\n\\n//Silly human, you can't import a typescript module into a javascript \\n//import { codingContractTypesMetadata } from 'https://raw.githubusercontent.com/danielyxie/bitburner/master/src/data/codingcontracttypes.ts'\\n\\n// This contract solver has the bare-minimum footprint of 1.6 GB (base) + 10 GB (ns.codingcontract.attempt)\\n// It does this by requiring all contract information being gathered in advance and passed in as a JSON blob argument.\\n// Solvers are mostly taken from source code at https://raw.githubusercontent.com/danielyxie/bitburner/master/src/data/codingcontracttypes.ts\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    if (ns.args.length < 1)\\n        ns.tprint('Contractor solver was incorrectly invoked without arguments.')\\n    let contractsDb = JSON.parse(ns.args[0]);\\n    const fContents = ns.read(fUnsolvedContracts);\\n    const notified = fContents ? JSON.parse(fContents) : [];\\n    for (const contractInfo of contractsDb) {\\n        const answer = findAnswer(contractInfo)\\n        let notice = null;\\n        if (answer != null) {\\n            let solvingResult = false;\\n            try {\\n                solvingResult = ns.codingcontract.attempt(answer, contractInfo.contract, contractInfo.hostname, { returnReward: true })\\n                if (solvingResult) {\\n                    const message = `Solved ${contractInfo.contract} on ${contractInfo.hostname} (${contractInfo.type}). Reward: ${solvingResult}`;\\n                    ns.toast(message, 'success');\\n                    ns.tprint(message);\\n                } else {\\n                    notice = `ERROR: Wrong answer for contract type \\\"${contractInfo.type}\\\" (${contractInfo.contract} on ${contractInfo.hostname}):` +\\n                        `\\\\nIncorrect Answer Given: ${JSON.stringify(answer)}`;\\n                }\\n            } catch (err) {\\n                let errorMessage = typeof err === 'string' ? err : err.message || JSON.stringify(err);\\n                if (err?.stack) errorMessage += '\\\\n' + err.stack;\\n                notice = `ERROR: Attemt to solve contract raised an error. (Answer Given: ${JSON.stringify(answer)})` +\\n                    `\\\\nWhile unlikely, this could happen if the contract vanished before we had a chance to solve it:\\\\n\\\"${errorMessage}\\\"`;\\n            }\\n        } else {\\n            notice = `WARNING: No solver available for contract type \\\"${contractInfo.type}\\\"`;\\n        }\\n        if (notice) {\\n            if (!notified.includes(contractInfo.contract)) {\\n                ns.tprint(notice + `\\\\nContract Info: ${JSON.stringify(contractInfo)}`)\\n                ns.toast(notice, 'warning');\\n                notified.push(contractInfo.contract)\\n            }\\n            ns.print(notice + `\\\\nContract Info: ${JSON.stringify(contractInfo)}`);\\n        }\\n        await ns.sleep(10)\\n    }\\n    // Keep tabs of failed contracts\\n    if (notified.length > 0)\\n        await ns.write(fUnsolvedContracts, JSON.stringify(notified), \\\"w\\\");\\n}\\n\\nfunction findAnswer(contract) {\\n    const codingContractSolution = codingContractTypesMetadata.find((codingContractTypeMetadata) => codingContractTypeMetadata.name === contract.type)\\n    return codingContractSolution ? codingContractSolution.solver(contract.data) : null;\\n}\\n\\nfunction convert2DArrayToString(arr) {\\n    const components = []\\n    arr.forEach(function (e) {\\n        let s = e.toString()\\n        s = ['[', s, ']'].join('')\\n        components.push(s)\\n    })\\n    return components.join(',').replace(/\\\\s/g, '')\\n}\\n\\n// Based on https://github.com/danielyxie/bitburner/blob/master/src/data/codingcontracttypes.ts\\nconst codingContractTypesMetadata = [{\\n    name: 'Find Largest Prime Factor',\\n    solver: function (data) {\\n        let fac = 2\\n        let n = data\\n        while (n > (fac - 1) * (fac - 1)) {\\n            while (n % fac === 0) {\\n                n = Math.round(n / fac)\\n            }\\n            ++fac\\n        }\\n        return n === 1 ? fac - 1 : n\\n    },\\n},\\n{\\n    name: 'Subarray with Maximum Sum',\\n    solver: function (data) {\\n        const nums = data.slice()\\n        for (let i = 1; i < nums.length; i++) {\\n            nums[i] = Math.max(nums[i], nums[i] + nums[i - 1])\\n        }\\n        return Math.max.apply(Math, nums)\\n    },\\n},\\n{\\n    name: 'Total Ways to Sum',\\n    solver: function (data) {\\n        const ways = [1]\\n        ways.length = data + 1\\n        ways.fill(0, 1)\\n        for (let i = 1; i < data; ++i) {\\n            for (let j = i; j <= data; ++j) {\\n                ways[j] += ways[j - i]\\n            }\\n        }\\n        return ways[data]\\n    },\\n},\\n{\\n    name: 'Total Ways to Sum II',\\n    solver: function (data) {\\n        const n = data[0];\\n        const s = data[1];\\n        const ways = [1];\\n        ways.length = n + 1;\\n        ways.fill(0, 1);\\n        for (let i = 0; i < s.length; i++) {\\n            for (let j = s[i]; j <= n; j++) {\\n                ways[j] += ways[j - s[i]];\\n            }\\n        }\\n        return ways[n];\\n    },\\n},\\n{\\n    name: 'Spiralize Matrix',\\n    solver: function (data) {\\n        const spiral = []\\n        const m = data.length\\n        const n = data[0].length\\n        let u = 0\\n        let d = m - 1\\n        let l = 0\\n        let r = n - 1\\n        let k = 0\\n        while (true) {\\n            // Up\\n            for (let col = l; col <= r; col++) {\\n                spiral[k] = data[u][col]\\n                ++k\\n            }\\n            if (++u > d) {\\n                break\\n            }\\n            // Right\\n            for (let row = u; row <= d; row++) {\\n                spiral[k] = data[row][r]\\n                ++k\\n            }\\n            if (--r < l) {\\n                break\\n            }\\n            // Down\\n            for (let col = r; col >= l; col--) {\\n                spiral[k] = data[d][col]\\n                ++k\\n            }\\n            if (--d < u) {\\n                break\\n            }\\n            // Left\\n            for (let row = d; row >= u; row--) {\\n                spiral[k] = data[row][l]\\n                ++k\\n            }\\n            if (++l > r) {\\n                break\\n            }\\n        }\\n\\n        return spiral\\n    },\\n},\\n{\\n    name: 'Array Jumping Game',\\n    solver: function (data) {\\n        const n = data.length\\n        let i = 0\\n        for (let reach = 0; i < n && i <= reach; ++i) {\\n            reach = Math.max(i + data[i], reach)\\n        }\\n        const solution = i === n\\n        return solution ? 1 : 0\\n    },\\n},\\n{\\n    name: 'Array Jumping Game II',\\n    solver: function (data) {\\n        if (data[0] == 0)\\n            return '0';\\n        const n = data.length;\\n        let reach = 0;\\n        let jumps = 0;\\n        let lastJump = -1;\\n        while (reach < n - 1) {\\n            let jumpedFrom = -1;\\n            for (let i = reach; i > lastJump; i--) {\\n                if (i + data[i] > reach) {\\n                    reach = i + data[i];\\n                    jumpedFrom = i;\\n                }\\n            }\\n            if (jumpedFrom === -1) {\\n                jumps = 0;\\n                break;\\n            }\\n            lastJump = jumpedFrom;\\n            jumps++;\\n        }\\n        return jumps;\\n    },\\n},\\n{\\n    name: 'Merge Overlapping Intervals',\\n    solver: function (data) {\\n        const intervals = data.slice()\\n        intervals.sort(function (a, b) {\\n            return a[0] - b[0]\\n        })\\n        const result = []\\n        let start = intervals[0][0]\\n        let end = intervals[0][1]\\n        for (const interval of intervals) {\\n            if (interval[0] <= end) {\\n                end = Math.max(end, interval[1])\\n            } else {\\n                result.push([start, end])\\n                start = interval[0]\\n                end = interval[1]\\n            }\\n        }\\n        result.push([start, end])\\n        const sanitizedResult = convert2DArrayToString(result)\\n        return sanitizedResult\\n    },\\n},\\n{\\n    name: 'Generate IP Addresses',\\n    solver: function (data) {\\n        const ret = []\\n        for (let a = 1; a <= 3; ++a) {\\n            for (let b = 1; b <= 3; ++b) {\\n                for (let c = 1; c <= 3; ++c) {\\n                    for (let d = 1; d <= 3; ++d) {\\n                        if (a + b + c + d === data.length) {\\n                            const A = parseInt(data.substring(0, a), 10)\\n                            const B = parseInt(data.substring(a, a + b), 10)\\n                            const C = parseInt(data.substring(a + b, a + b + c), 10)\\n                            const D = parseInt(data.substring(a + b + c, a + b + c + d), 10)\\n                            if (A <= 255 && B <= 255 && C <= 255 && D <= 255) {\\n                                const ip = [A.toString(), '.', B.toString(), '.', C.toString(), '.', D.toString()].join('')\\n                                if (ip.length === data.length + 3) {\\n                                    ret.push(ip)\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return ret.toString(); // Answer expected is the string representation of this array\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader I',\\n    solver: function (data) {\\n        let maxCur = 0\\n        let maxSoFar = 0\\n        for (let i = 1; i < data.length; ++i) {\\n            maxCur = Math.max(0, (maxCur += data[i] - data[i - 1]))\\n            maxSoFar = Math.max(maxCur, maxSoFar)\\n        }\\n        return maxSoFar.toString()\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader II',\\n    solver: function (data) {\\n        let profit = 0\\n        for (let p = 1; p < data.length; ++p) {\\n            profit += Math.max(data[p] - data[p - 1], 0)\\n        }\\n        return profit.toString()\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader III',\\n    solver: function (data) {\\n        let hold1 = Number.MIN_SAFE_INTEGER\\n        let hold2 = Number.MIN_SAFE_INTEGER\\n        let release1 = 0\\n        let release2 = 0\\n        for (const price of data) {\\n            release2 = Math.max(release2, hold2 + price)\\n            hold2 = Math.max(hold2, release1 - price)\\n            release1 = Math.max(release1, hold1 + price)\\n            hold1 = Math.max(hold1, price * -1)\\n        }\\n        return release2.toString()\\n    },\\n},\\n{\\n    name: 'Algorithmic Stock Trader IV',\\n    solver: function (data) {\\n        const k = data[0]\\n        const prices = data[1]\\n        const len = prices.length\\n        if (len < 2) {\\n            return 0\\n        }\\n        if (k > len / 2) {\\n            let res = 0\\n            for (let i = 1; i < len; ++i) {\\n                res += Math.max(prices[i] - prices[i - 1], 0)\\n            }\\n            return res\\n        }\\n        const hold = []\\n        const rele = []\\n        hold.length = k + 1\\n        rele.length = k + 1\\n        for (let i = 0; i <= k; ++i) {\\n            hold[i] = Number.MIN_SAFE_INTEGER\\n            rele[i] = 0\\n        }\\n        let cur\\n        for (let i = 0; i < len; ++i) {\\n            cur = prices[i]\\n            for (let j = k; j > 0; --j) {\\n                rele[j] = Math.max(rele[j], hold[j] + cur)\\n                hold[j] = Math.max(hold[j], rele[j - 1] - cur)\\n            }\\n        }\\n        return rele[k]\\n    },\\n},\\n{\\n    name: 'Minimum Path Sum in a Triangle',\\n    solver: function (data) {\\n        const n = data.length\\n        const dp = data[n - 1].slice()\\n        for (let i = n - 2; i > -1; --i) {\\n            for (let j = 0; j < data[i].length; ++j) {\\n                dp[j] = Math.min(dp[j], dp[j + 1]) + data[i][j]\\n            }\\n        }\\n        return dp[0]\\n    },\\n},\\n{\\n    name: 'Unique Paths in a Grid I',\\n    solver: function (data) {\\n        const n = data[0] // Number of rows\\n        const m = data[1] // Number of columns\\n        const currentRow = []\\n        currentRow.length = n\\n        for (let i = 0; i < n; i++) {\\n            currentRow[i] = 1\\n        }\\n        for (let row = 1; row < m; row++) {\\n            for (let i = 1; i < n; i++) {\\n                currentRow[i] += currentRow[i - 1]\\n            }\\n        }\\n        return currentRow[n - 1]\\n    },\\n},\\n{\\n    name: 'Unique Paths in a Grid II',\\n    solver: function (data) {\\n        const obstacleGrid = []\\n        obstacleGrid.length = data.length\\n        for (let i = 0; i < obstacleGrid.length; ++i) {\\n            obstacleGrid[i] = data[i].slice()\\n        }\\n        for (let i = 0; i < obstacleGrid.length; i++) {\\n            for (let j = 0; j < obstacleGrid[0].length; j++) {\\n                if (obstacleGrid[i][j] == 1) {\\n                    obstacleGrid[i][j] = 0\\n                } else if (i == 0 && j == 0) {\\n                    obstacleGrid[0][0] = 1\\n                } else {\\n                    obstacleGrid[i][j] = (i > 0 ? obstacleGrid[i - 1][j] : 0) + (j > 0 ? obstacleGrid[i][j - 1] : 0)\\n                }\\n            }\\n        }\\n        return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1]\\n    },\\n},\\n{\\n    name: 'Shortest Path in a Grid',\\n    solver: function (data) {\\n        //slightly adapted and simplified to get rid of MinHeap usage, and construct a valid path from potential candidates   \\n        //MinHeap replaced by simple array acting as queue (breadth first search)  \\n        const width = data[0].length;\\n        const height = data.length;\\n        const dstY = height - 1;\\n        const dstX = width - 1;\\n\\n        const distance = new Array(height);\\n        //const prev: [[number, number] | undefined][] = new Array(height);\\n        const queue = [];\\n\\n        for (let y = 0; y < height; y++) {\\n            distance[y] = new Array(width).fill(Infinity);\\n            //prev[y] = new Array(width).fill(undefined) as [undefined];\\n        }\\n\\n        function validPosition(y, x) {\\n            return y >= 0 && y < height && x >= 0 && x < width && data[y][x] == 0;\\n        }\\n\\n        // List in-bounds and passable neighbors\\n        function* neighbors(y, x) {\\n            if (validPosition(y - 1, x)) yield [y - 1, x]; // Up\\n            if (validPosition(y + 1, x)) yield [y + 1, x]; // Down\\n            if (validPosition(y, x - 1)) yield [y, x - 1]; // Left\\n            if (validPosition(y, x + 1)) yield [y, x + 1]; // Right\\n        }\\n\\n        // Prepare starting point\\n        distance[0][0] = 0;\\n\\n        //## Original version\\n        // queue.push([0, 0], 0);\\n        // // Take next-nearest position and expand potential paths from there\\n        // while (queue.size > 0) {\\n        //   const [y, x] = queue.pop() as [number, number];\\n        //   for (const [yN, xN] of neighbors(y, x)) {\\n        //     const d = distance[y][x] + 1;\\n        //     if (d < distance[yN][xN]) {\\n        //       if (distance[yN][xN] == Infinity)\\n        //         // Not reached previously\\n        //         queue.push([yN, xN], d);\\n        //       // Found a shorter path\\n        //       else queue.changeWeight(([yQ, xQ]) => yQ == yN && xQ == xN, d);\\n        //       //prev[yN][xN] = [y, x];\\n        //       distance[yN][xN] = d;\\n        //     }\\n        //   }\\n        // }\\n\\n        //Simplified version. d < distance[yN][xN] should never happen for BFS if d != infinity, so we skip changeweight and simplify implementation\\n        //algo always expands shortest path, distance != infinity means a <= lenght path reaches it, only remaining case to solve is infinity    \\n        queue.push([0, 0]);\\n        while (queue.length > 0) {\\n            const [y, x] = queue.shift()\\n            for (const [yN, xN] of neighbors(y, x)) {\\n                if (distance[yN][xN] == Infinity) {\\n                    queue.push([yN, xN])\\n                    distance[yN][xN] = distance[y][x] + 1\\n                }\\n            }\\n        }\\n\\n        // No path at all?\\n        if (distance[dstY][dstX] == Infinity) return \\\"\\\";\\n\\n        //trace a path back to start\\n        let path = \\\"\\\"\\n        let [yC, xC] = [dstY, dstX]\\n        while (xC != 0 || yC != 0) {\\n            const dist = distance[yC][xC];\\n            for (const [yF, xF] of neighbors(yC, xC)) {\\n                if (distance[yF][xF] == dist - 1) {\\n                    path = (xC == xF ? (yC == yF + 1 ? \\\"D\\\" : \\\"U\\\") : (xC == xF + 1 ? \\\"R\\\" : \\\"L\\\")) + path;\\n                    [yC, xC] = [yF, xF]\\n                    break\\n                }\\n            }\\n        }\\n\\n        return path;\\n    }\\n},\\n{\\n    name: 'Sanitize Parentheses in Expression',\\n    solver: function (data) {\\n        let left = 0\\n        let right = 0\\n        const res = []\\n        for (let i = 0; i < data.length; ++i) {\\n            if (data[i] === '(') {\\n                ++left\\n            } else if (data[i] === ')') {\\n                left > 0 ? --left : ++right\\n            }\\n        }\\n\\n        function dfs(pair, index, left, right, s, solution, res) {\\n            if (s.length === index) {\\n                if (left === 0 && right === 0 && pair === 0) {\\n                    for (let i = 0; i < res.length; i++) {\\n                        if (res[i] === solution) {\\n                            return\\n                        }\\n                    }\\n                    res.push(solution)\\n                }\\n                return\\n            }\\n            if (s[index] === '(') {\\n                if (left > 0) {\\n                    dfs(pair, index + 1, left - 1, right, s, solution, res)\\n                }\\n                dfs(pair + 1, index + 1, left, right, s, solution + s[index], res)\\n            } else if (s[index] === ')') {\\n                if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, res)\\n                if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], res)\\n            } else {\\n                dfs(pair, index + 1, left, right, s, solution + s[index], res)\\n            }\\n        }\\n        dfs(0, 0, left, right, data, '', res)\\n\\n        return res\\n    },\\n},\\n{\\n    name: 'Find All Valid Math Expressions',\\n    solver: function (data) {\\n        const num = data[0]\\n        const target = data[1]\\n\\n        function helper(res, path, num, target, pos, evaluated, multed) {\\n            if (pos === num.length) {\\n                if (target === evaluated) {\\n                    res.push(path)\\n                }\\n                return\\n            }\\n            for (let i = pos; i < num.length; ++i) {\\n                if (i != pos && num[pos] == '0') {\\n                    break\\n                }\\n                const cur = parseInt(num.substring(pos, i + 1))\\n                if (pos === 0) {\\n                    helper(res, path + cur, num, target, i + 1, cur, cur)\\n                } else {\\n                    helper(res, path + '+' + cur, num, target, i + 1, evaluated + cur, cur)\\n                    helper(res, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur)\\n                    helper(res, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur)\\n                }\\n            }\\n        }\\n\\n        if (num == null || num.length === 0) {\\n            return []\\n        }\\n        const result = []\\n        helper(result, '', num, target, 0, 0, 0)\\n        return result\\n    },\\n},\\n{\\n    //Taken from https://github.com/danielyxie/bitburner/blob/dev/src/utils/HammingCodeTools.ts and converted to js by Discord: H3draut3r#6722\\n    name: 'HammingCodes: Integer to Encoded Binary',\\n    solver: function (value) {\\n        // Calculates the needed amount of parityBits 'without' the \\\"overall\\\"-Parity\\n        const HammingSumOfParity = lengthOfDBits => lengthOfDBits == 0 ? 0 : lengthOfDBits < 3 ? lengthOfDBits + 1 :\\n            Math.ceil(Math.log2(lengthOfDBits * 2)) <= Math.ceil(Math.log2(1 + lengthOfDBits + Math.ceil(Math.log2(lengthOfDBits)))) ?\\n                Math.ceil(Math.log2(lengthOfDBits) + 1) : Math.ceil(Math.log2(lengthOfDBits));\\n        const data = value.toString(2).split(\\\"\\\"); // first, change into binary string, then create array with 1 bit per index\\n        const sumParity = HammingSumOfParity(data.length); // get the sum of needed parity bits (for later use in encoding)\\n        const count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\n        // function count for specific entries in the array, for later use\\n        const build = [\\\"x\\\", \\\"x\\\", ...data.splice(0, 1)]; // init the \\\"pre-build\\\"\\n        for (let i = 2; i < sumParity; i++)\\n            build.push(\\\"x\\\", ...data.splice(0, Math.pow(2, i) - 1)); // add new paritybits and the corresponding data bits (pre-building array)\\n        // Get the index numbers where the parity bits \\\"x\\\" are placed\\n        const parityBits = build.map((e, i) => [e, i]).filter(([e, _]) => e == \\\"x\\\").map(([_, i]) => i);\\n        for (const index of parityBits) {\\n            const tempcount = index + 1; // set the \\\"stepsize\\\" for the parityBit\\n            const temparray = []; // temporary array to store the extracted bits\\n            const tempdata = [...build]; // only work with a copy of the build\\n            while (tempdata[index] !== undefined) {\\n                // as long as there are bits on the starting index, do \\\"cut\\\"\\n                const temp = tempdata.splice(index, tempcount * 2); // cut stepsize*2 bits, then...\\n                temparray.push(...temp.splice(0, tempcount)); // ... cut the result again and keep the first half\\n            }\\n            temparray.splice(0, 1); // remove first bit, which is the parity one\\n            build[index] = (count(temparray, \\\"1\\\") % 2).toString(); // count with remainder of 2 and\\\"toString\\\" to store the parityBit\\n        } // parity done, now the \\\"overall\\\"-parity is set\\n        build.unshift((count(build, \\\"1\\\") % 2).toString()); // has to be done as last element\\n        return build.join(\\\"\\\"); // return the build as string\\n    },\\n},\\n{\\n    name: 'HammingCodes: Encoded Binary to Integer',\\n    solver: function (data) {\\n        //check for altered bit and decode\\n        const build = data.split(\\\"\\\"); // ye, an array for working, again\\n        const testArray = []; //for the \\\"truthtable\\\". if any is false, the data has an altered bit, will check for and fix it\\n        const sumParity = Math.ceil(Math.log2(data.length)); // sum of parity for later use\\n        const count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\n        // the count.... again ;)\\n        let overallParity = build.splice(0, 1).join(\\\"\\\"); // store first index, for checking in next step and fix the build properly later on\\n        testArray.push(overallParity == (count(build, \\\"1\\\") % 2).toString() ? true : false); // first check with the overall parity bit\\n        for (let i = 0; i < sumParity; i++) {\\n            // for the rest of the remaining parity bits we also \\\"check\\\"\\n            const tempIndex = Math.pow(2, i) - 1; // get the parityBits Index\\n            const tempStep = tempIndex + 1; // set the stepsize\\n            const tempData = [...build]; // get a \\\"copy\\\" of the build-data for working\\n            const tempArray = []; // init empty array for \\\"testing\\\"\\n            while (tempData[tempIndex] != undefined) {\\n                // extract from the copied data until the \\\"starting\\\" index is undefined\\n                const temp = [...tempData.splice(tempIndex, tempStep * 2)]; // extract 2*stepsize\\n                tempArray.push(...temp.splice(0, tempStep)); // and cut again for keeping first half\\n            }\\n            const tempParity = tempArray.shift(); // and again save the first index separated for checking with the rest of the data\\n            testArray.push(tempParity == (count(tempArray, \\\"1\\\") % 2).toString() ? true : false);\\n            // is the tempParity the calculated data? push answer into the 'truthtable'\\n        }\\n        let fixIndex = 0; // init the \\\"fixing\\\" index and start with 0\\n        for (let i = 1; i < sumParity + 1; i++) {\\n            // simple binary adding for every boolean in the testArray, starting from 2nd index of it\\n            fixIndex += testArray[i] ? 0 : Math.pow(2, i) / 2;\\n        }\\n        build.unshift(overallParity); // now we need the \\\"overall\\\" parity back in it's place\\n        // try fix the actual encoded binary string if there is an error\\n        if (fixIndex > 0 && testArray[0] == false) { // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit           \\n            build[fixIndex] = build[fixIndex] == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\n        } else if (testArray[0] == false) { // otherwise, if the the overallparity is the only wrong, fix that one           \\n            overallParity = overallParity == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\n        } else if (testArray[0] == true && testArray.some((truth) => truth == false)) {\\n            return 0; // ERROR: There's some strange going on... 2 bits are altered? How? This should not happen\\n        }\\n        // oof.. halfway through... we fixed an possible altered bit, now \\\"extract\\\" the parity-bits from the build\\n        for (let i = sumParity; i >= 0; i--) {\\n            // start from the last parity down the 2nd index one\\n            build.splice(Math.pow(2, i), 1);\\n        }\\n        build.splice(0, 1); // remove the overall parity bit and we have our binary value\\n        return parseInt(build.join(\\\"\\\"), 2); // parse the integer with redux 2 and we're done!\\n    },\\n},\\n{\\n    name: 'Proper 2-Coloring of a Graph',\\n    solver: function (data) {\\n        // convert from edges to nodes\\n        const nodes = new Array(data[0]).fill(0).map(() => [])\\n        for (const e of data[1]) {\\n            nodes[e[0]].push(e[1])\\n            nodes[e[1]].push(e[0])\\n        }\\n        // solution graph starts out undefined and fills in with 0s and 1s\\n        const solution = new Array(data[0]).fill(undefined)\\n        let oddCycleFound = false\\n        // recursive function for DFS\\n        const traverse = (index, color) => {\\n            if (oddCycleFound) {\\n                // leave immediately if an invalid cycle was found\\n                return\\n            }\\n            if (solution[index] === color) {\\n                // node was already hit and is correctly colored\\n                return\\n            }\\n            if (solution[index] === (color ^ 1)) {\\n                // node was already hit and is incorrectly colored: graph is uncolorable\\n                oddCycleFound = true\\n                return\\n            }\\n            solution[index] = color\\n            for (const n of nodes[index]) {\\n                traverse(n, color ^ 1)\\n            }\\n        }\\n        // repeat run for as long as undefined nodes are found, in case graph isn't fully connected\\n        while (!oddCycleFound && solution.some(e => e === undefined)) {\\n            traverse(solution.indexOf(undefined), 0)\\n        }\\n        if (oddCycleFound) return \\\"[]\\\"; // TODO: Bug #3755 in bitburner requires a string literal. Will this be fixed?\\n        return solution\\n    },\\n},\\n{\\n    name: \\\"Compression I: RLE Compression\\\",\\n    solver: function (data) {\\n        //original code doesn't generate an answer, but validates it, fallback to this one-liner\\n        return data.replace(/([\\\\w])\\\\1{0,8}/g, (group, chr) => group.length + chr)\\n    }\\n},\\n{\\n    name: \\\"Compression II: LZ Decompression\\\",\\n    solver: function (compr) {\\n        let plain = \\\"\\\";\\n\\n        for (let i = 0; i < compr.length;) {\\n            const literal_length = compr.charCodeAt(i) - 0x30;\\n\\n            if (literal_length < 0 || literal_length > 9 || i + 1 + literal_length > compr.length) {\\n                return null;\\n            }\\n\\n            plain += compr.substring(i + 1, i + 1 + literal_length);\\n            i += 1 + literal_length;\\n\\n            if (i >= compr.length) {\\n                break;\\n            }\\n            const backref_length = compr.charCodeAt(i) - 0x30;\\n\\n            if (backref_length < 0 || backref_length > 9) {\\n                return null;\\n            } else if (backref_length === 0) {\\n                ++i;\\n            } else {\\n                if (i + 1 >= compr.length) {\\n                    return null;\\n                }\\n\\n                const backref_offset = compr.charCodeAt(i + 1) - 0x30;\\n                if ((backref_length > 0 && (backref_offset < 1 || backref_offset > 9)) || backref_offset > plain.length) {\\n                    return null;\\n                }\\n\\n                for (let j = 0; j < backref_length; ++j) {\\n                    plain += plain[plain.length - backref_offset];\\n                }\\n\\n                i += 2;\\n            }\\n        }\\n\\n        return plain;\\n    }\\n},\\n{\\n    name: \\\"Compression III: LZ Compression\\\",\\n    solver: function (plain) {\\n        let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\n        let new_state = Array.from(Array(10), () => Array(10));\\n\\n        function set(state, i, j, str) {\\n            const current = state[i][j];\\n            if (current == null || str.length < current.length) {\\n                state[i][j] = str;\\n            } else if (str.length === current.length && Math.random() < 0.5) {\\n                // if two strings are the same length, pick randomly so that\\n                // we generate more possible inputs to Compression II\\n                state[i][j] = str;\\n            }\\n        }\\n\\n        // initial state is a literal of length 1\\n        cur_state[0][1] = \\\"\\\";\\n\\n        for (let i = 1; i < plain.length; ++i) {\\n            for (const row of new_state) {\\n                row.fill(null);\\n            }\\n            const c = plain[i];\\n\\n            // handle literals\\n            for (let length = 1; length <= 9; ++length) {\\n                const string = cur_state[0][length];\\n                if (string == null) {\\n                    continue;\\n                }\\n\\n                if (length < 9) {\\n                    // extend current literal\\n                    set(new_state, 0, length + 1, string);\\n                } else {\\n                    // start new literal\\n                    set(new_state, 0, 1, string + \\\"9\\\" + plain.substring(i - 9, i) + \\\"0\\\");\\n                }\\n\\n                for (let offset = 1; offset <= Math.min(9, i); ++offset) {\\n                    if (plain[i - offset] === c) {\\n                        // start new backreference\\n                        set(new_state, offset, 1, string + length + plain.substring(i - length, i));\\n                    }\\n                }\\n            }\\n\\n            // handle backreferences\\n            for (let offset = 1; offset <= 9; ++offset) {\\n                for (let length = 1; length <= 9; ++length) {\\n                    const string = cur_state[offset][length];\\n                    if (string == null) {\\n                        continue;\\n                    }\\n\\n                    if (plain[i - offset] === c) {\\n                        if (length < 9) {\\n                            // extend current backreference\\n                            set(new_state, offset, length + 1, string);\\n                        } else {\\n                            // start new backreference\\n                            set(new_state, offset, 1, string + \\\"9\\\" + offset + \\\"0\\\");\\n                        }\\n                    }\\n\\n                    // start new literal\\n                    set(new_state, 0, 1, string + length + offset);\\n\\n                    // end current backreference and start new backreference\\n                    for (let new_offset = 1; new_offset <= Math.min(9, i); ++new_offset) {\\n                        if (plain[i - new_offset] === c) {\\n                            set(new_state, new_offset, 1, string + length + offset + \\\"0\\\");\\n                        }\\n                    }\\n                }\\n            }\\n\\n            const tmp_state = new_state;\\n            new_state = cur_state;\\n            cur_state = tmp_state;\\n        }\\n\\n        let result = null;\\n\\n        for (let len = 1; len <= 9; ++len) {\\n            let string = cur_state[0][len];\\n            if (string == null) {\\n                continue;\\n            }\\n\\n            string += len + plain.substring(plain.length - len, plain.length);\\n            if (result == null || string.length < result.length) {\\n                result = string;\\n            } else if (string.length == result.length && Math.random() < 0.5) {\\n                result = string;\\n            }\\n        }\\n\\n        for (let offset = 1; offset <= 9; ++offset) {\\n            for (let len = 1; len <= 9; ++len) {\\n                let string = cur_state[offset][len];\\n                if (string == null) {\\n                    continue;\\n                }\\n\\n                string += len + \\\"\\\" + offset;\\n                if (result == null || string.length < result.length) {\\n                    result = string;\\n                } else if (string.length == result.length && Math.random() < 0.5) {\\n                    result = string;\\n                }\\n            }\\n        }\\n\\n        return result ?? \\\"\\\";\\n    }\\n},\\n{\\n    name: 'Encryption I: Caesar Cipher',\\n    solver: function (data) {\\n        // data = [plaintext, shift value]\\n        // build char array, shifting via map and join to final results\\n        const cipher = [...data[0]]\\n            .map((a) => (a === \\\" \\\" ? a : String.fromCharCode(((a.charCodeAt(0) - 65 - data[1] + 26) % 26) + 65)))\\n            .join(\\\"\\\");\\n        return cipher;\\n    }\\n},\\n\\n{\\n    name: \\\"Encryption II: Vigenère Cipher\\\",\\n    solver: function (data) {\\n        // data = [plaintext, keyword]\\n        // build char array, shifting via map and corresponding keyword letter and join to final results\\n        const cipher = [...data[0]]\\n            .map((a, i) => {\\n                return a === \\\" \\\"\\n                    ? a\\n                    : String.fromCharCode(((a.charCodeAt(0) - 2 * 65 + data[1].charCodeAt(i % data[1].length)) % 26) + 65);\\n            })\\n            .join(\\\"\\\");\\n        return cipher;\\n    }\\n}\\n\\n]\",\"filename\":\"Tasks/contractor.js.solver.js\",\"server\":\"home\"}}],[\"Tasks/crack-host.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Blindly try to open all ports and crack the specified target, regardless of owned tools. */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    try { ns.brutessh(target); } catch { }\\n    try { ns.ftpcrack(target); } catch { }\\n    try { ns.relaysmtp(target); } catch { }\\n    try { ns.httpworm(target); } catch { }\\n    try { ns.sqlinject(target); } catch { }\\n    try { ns.nuke(target); } catch { }\\n}\",\"filename\":\"Tasks/crack-host.js\",\"server\":\"home\"}}],[\"Tasks/program-manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * the purpose of the program-manager is to buy all the programs\\n * from the darkweb we can afford so we don't have to do it manually\\n * or write them ourselves. Like tor-manager, this script dies a natural death\\n * once all programs are bought. **/\\nexport async function main(ns) {\\n    const programNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n    const interval = 2000;\\n\\n    const keepRunning = ns.args.length > 0 && ns.args[0] == \\\"-c\\\";\\n    if (!keepRunning)\\n        ns.print(`program-manager will run once. Run with argument \\\"-c\\\" to run continuously.`)\\n\\n    do {\\n        let foundMissingProgram = false;\\n        for (const prog of programNames) {\\n            if (!ns.fileExists(prog, \\\"home\\\") && ns.singularity.purchaseProgram(prog))\\n                ns.toast(`Purchased ${prog}`, 'success');\\n            else if (keepRunning)\\n                foundMissingProgram = true;\\n        }\\n        if (keepRunning && foundMissingProgram)\\n            await ns.sleep(interval);\\n    } while (keepRunning && foundMissingProgram);\\n}\",\"filename\":\"Tasks/program-manager.js\",\"server\":\"home\"}}],[\"Tasks/ram-manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney, formatRam, getConfiguration, getNsDataThroughFile, log } from './helpers.js'\\n\\nconst max_ram = 2 ** 30;\\nconst argsSchema = [\\n    ['budget', 0.2], // Spend up to this much of current cash on ram upgrades per tick (Default is high, because these are permanent for the rest of the BN)\\n    ['reserve', null], // Reserve this much cash before determining spending budgets (defaults to contents of reserve.txt if not specified)\\n];\\n\\nexport function autocomplete(data, _) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const options = getConfiguration(ns, argsSchema);\\n    if (!options) return; // Invalid options, or ran in --help mode.\\n    const reserve = (options['reserve'] != null ? options['reserve'] : Number(ns.read(\\\"reserve.txt\\\") || 0));\\n    const money = await getNsDataThroughFile(ns, `ns.getServerMoneyAvailable(ns.args[0])`, null, [\\\"home\\\"]);\\n    let spendable = Math.min(money - reserve, money * options.budget);\\n    if (isNaN(spendable))\\n        return log(ns, `ERROR: One of the arguments could not be parsed as a number: ${JSON.stringify(options)}`, true, 'error');\\n    // Quickly buy as many upgrades as we can within the budget\\n    do {\\n        let cost = await getNsDataThroughFile(ns, `ns.singularity.getUpgradeHomeRamCost()`);\\n        let currentRam = await getNsDataThroughFile(ns, `ns.getServerMaxRam(ns.args[0])`, null, [\\\"home\\\"]);\\n        if (cost >= Number.MAX_VALUE || currentRam == max_ram)\\n            return log(ns, `INFO: We're at max home RAM (${formatRam(currentRam)})`);\\n        const nextRam = currentRam * 2;\\n        const upgradeDesc = `home RAM from ${formatRam(currentRam)} to ${formatRam(nextRam)} (cost: ${formatMoney(cost)})`;\\n        if (spendable < cost)\\n            return log(ns, `Money we're allowed to spend (${formatMoney(spendable)}) is less than the cost (${formatMoney(cost)}) to upgrade ${upgradeDesc}`);\\n        if (!(await getNsDataThroughFile(ns, `ns.singularity.upgradeHomeRam()`)))\\n            return log(ns, `ERROR: Failed to upgrade ${upgradeDesc} thinking we could afford it ` +\\n                `(cash: ${formatMoney(money)} budget: ${formatMoney(spendable)})`, true, 'error');\\n        // Otherwise, we've successfully upgraded home ram.\\n        log(ns, `SUCCESS: Upgraded ${upgradeDesc}`, true, 'success');\\n        const newMaxRam = await getNsDataThroughFile(ns, `ns.getServerMaxRam(ns.args[0])`, null, [\\\"home\\\"]);\\n        if (nextRam != newMaxRam)\\n            log(ns, `WARNING: Expected to upgrade ${upgradeDesc}, but new home ram is ${newMaxRam}`, true, 'warning');\\n        // Only loop again if we successfully upgraded home ram, to see if we can upgrade further\\n        spendable -= cost;\\n        await ns.sleep(100); // On the off-chance we have an infinite loop bug, this makes us killable.\\n    } while (spendable > 0)\\n}\",\"filename\":\"Tasks/ram-manager.js\",\"server\":\"home\"}}],[\"Tasks/run-with-delay.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns\\n * Similar to ns.spawn, but can be run for cheaper (1GB for ns.run vs 2GB for ns.spawn), the delay can be shorter,\\n * and you have the option to *not* shut down the current script, but instead continue execution.\\n **/\\nexport async function main(ns) {\\n    var scriptpath = ns.args[0]; // Name of script to run is arg 0\\n    var delay = ns.args[1]; // Delay time is arg 1\\n    // Any additional args are forwarded to the script being run\\n    var forwardedArgs = ns.args.length > 2 ? ns.args.slice(2) : [];\\n    await ns.sleep(delay || 100);\\n    var pid = ns.run(scriptpath, 1, ...forwardedArgs);\\n    if (!pid)\\n        ns.tprint(`Failed to spawn \\\"${scriptpath}\\\" with args: ${forwardedArgs} (bad file name or insufficient RAM?)`);\\n}\",\"filename\":\"Tasks/run-with-delay.js\",\"server\":\"home\"}}],[\"Tasks/tor-manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * the purpose of tor-manager is to buy the TOR router ASAP\\n * so that another script can buy the port breakers. This script\\n * dies a natural death once tor is bought. **/\\nexport async function main(ns) {\\n    const interval = 2000;\\n\\n    var keepRunning = ns.args.length > 0 && ns.args[0] == \\\"-c\\\";\\n    if (!keepRunning)\\n        ns.print(`tor-manager will run once. Run with argument \\\"-c\\\" to run continuously.`)\\n\\n    let hasTor = () => ns.scan(\\\"home\\\").includes(\\\"darkweb\\\");\\n    if (hasTor())\\n        return ns.print('Player already has Tor');\\n    do {\\n        if (hasTor()) {\\n            ns.toast(`Purchased the Tor router!`, 'success');\\n            break;\\n        }\\n        ns.singularity.purchaseTor();\\n        if (keepRunning)\\n            await ns.sleep(interval);\\n    }\\n    while (keepRunning);\\n}\",\"filename\":\"Tasks/tor-manager.js\",\"server\":\"home\"}}],[\"Tasks/write-file.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns\\n * A way to write a new file from some args data **/\\nexport function main(ns) {\\n    if (ns.args.length == 0) return ns.tprint(\\\"You must run this script with the arguments to pass to ns.write\\\")\\n    if (ns.args.length == 2) // Default to \\\"w\\\" (overwrite mode)\\n        ns.args.push(\\\"w\\\")\\n    return ns.write(...ns.args);\\n}\",\"filename\":\"Tasks/write-file.js\",\"server\":\"home\"}}],[\"TPS.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  ram = 128;\\n  hostname = \\\"128\\\";\\n    purchaseServer(hostname + i, ram);\\n  }\\n}\",\"filename\":\"TPS.js\",\"server\":\"home\"}}],[\"Temp/getPlayer.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getPlayer.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getPlayer.txt.js\",\"server\":\"home\"}}],[\"Temp/getResetInfo.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.getResetInfo()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getResetInfo.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getResetInfo.txt.js\",\"server\":\"home\"}}],[\"Temp/owned-source-files.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/owned-source-files.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/owned-source-files.txt.js\",\"server\":\"home\"}}],[\"Temp/reset-info.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.getResetInfo()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/reset-info.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/reset-info.txt.js\",\"server\":\"home\"}}],[\"Temp/script-costs.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(s => [s, ns.getScriptRam(s, 'home')]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/script-costs.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/script-costs.txt.js\",\"server\":\"home\"}}],[\"Temp/files-exist.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.args.slice(1).map(f => ns.fileExists(f, ns.args[0]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/files-exist.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/files-exist.txt.js\",\"server\":\"home\"}}],[\"Temp/scanAllServers.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllServers } from 'helpers.js'\\nexport async function main(ns) { let r;try{r=JSON.stringify(\\n    scanAllServers(ns)\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/scanAllServers.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/scanAllServers.txt.js\",\"server\":\"home\"}}],[\"Temp/getServerRequiredHackingLevel-all.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(server => [server, ns.getServerRequiredHackingLevel(server)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getServerRequiredHackingLevel-all.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getServerRequiredHackingLevel-all.txt.js\",\"server\":\"home\"}}],[\"Temp/getServerNumPortsRequired-all.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(server => [server, ns.getServerNumPortsRequired(server)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getServerNumPortsRequired-all.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getServerNumPortsRequired-all.txt.js\",\"server\":\"home\"}}],[\"Temp/getServerGrowth-all.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(server => [server, ns.getServerGrowth(server)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getServerGrowth-all.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getServerGrowth-all.txt.js\",\"server\":\"home\"}}],[\"Temp/getServer-all.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(server => [server, ns.getServer(server)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getServer-all.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getServer-all.txt.js\",\"server\":\"home\"}}],[\"Temp/getServerMinSecurityLevel-all.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(server => [server, ns.getServerMinSecurityLevel(server)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getServerMinSecurityLevel-all.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getServerMinSecurityLevel-all.txt.js\",\"server\":\"home\"}}],[\"Temp/getServerMaxMoney-all.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(server => [server, ns.getServerMaxMoney(server)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getServerMaxMoney-all.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getServerMaxMoney-all.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-hasTIXAPIAccess.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.hasTIXAPIAccess()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-hasTIXAPIAccess.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-hasTIXAPIAccess.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-has4SDataTIXAPI.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.has4SDataTIXAPI()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-has4SDataTIXAPI.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-has4SDataTIXAPI.txt.js\",\"server\":\"home\"}}],[\"Temp/ps-other-instances.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/ps-other-instances.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/ps-other-instances.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-symbols.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    (() => { try { return ns.stock.getSymbols(); } catch { return null; } })()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-symbols.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-symbols.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getAskPrice-all.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    (() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getAskPrice(sym)])); } catch { return null; } })()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getAskPrice-all.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getAskPrice-all.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getBidPrice-all.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    (() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getBidPrice(sym)])); } catch { return null; } })()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getBidPrice-all.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getBidPrice-all.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getPosition-all.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    (() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getPosition(sym)])); } catch { return null; } })()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getPosition-all.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getPosition-all.txt.js\",\"server\":\"home\"}}],[\"Temp/gang-stats.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.gang.inGang() ? ns.gang.getGangInformation() : false\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/gang-stats.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/gang-stats.txt.js\",\"server\":\"home\"}}],[\"Temp/getServers.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.args.map(ns.getServer)\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getServers.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getServers.txt.js\",\"server\":\"home\"}}],[\"Temp/getSharePower.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.getSharePower()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getSharePower.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getSharePower.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getMaxShares.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getMaxShares(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getMaxShares.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getMaxShares.txt.js\",\"server\":\"home\"}}],[\"Temp/stockmarket-summary-is-running.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.scriptRunning('/Temp/stockmarket-summary-tail.js', ns.getHostname())\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stockmarket-summary-is-running.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stockmarket-summary-is-running.txt.js\",\"server\":\"home\"}}],[\"Temp/stockmarket-summary-tail.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { ns.disableLog('sleep'); ns.tail(); let lastRead = '';\\n        while (true) { \\n            let read = ns.read('/Temp/stockmarket-summary.txt');\\n            if (lastRead != read) ns.print(lastRead = read);\\n            await ns.sleep(1000); \\n        } }\",\"filename\":\"Temp/stockmarket-summary-tail.js\",\"server\":\"home\"}}],[\"Temp/stock-getAskPrice.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getAskPrice(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getAskPrice.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getAskPrice.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getBidPrice.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getBidPrice(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getBidPrice.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getBidPrice.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getPosition.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getPosition(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getPosition.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getPosition.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-has4SData.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.has4SData()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-has4SData.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-has4SData.txt.js\",\"server\":\"home\"}}],[\"Temp/copy-scripts.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.scp(ns.args.slice(2), ns.args[0], ns.args[1])\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/copy-scripts.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/copy-scripts.txt.js\",\"server\":\"home\"}}],[\"Temp/getPurchasedServerLimit.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.getPurchasedServerLimit()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getPurchasedServerLimit.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getPurchasedServerLimit.txt.js\",\"server\":\"home\"}}],[\"Temp/getPurchasedServerMaxRam.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.getPurchasedServerMaxRam()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getPurchasedServerMaxRam.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getPurchasedServerMaxRam.txt.js\",\"server\":\"home\"}}],[\"Temp/host-costs.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries([...Array(30).keys()].map(i => [i, ns.getPurchasedServerCost(2**i)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/host-costs.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/host-costs.txt.js\",\"server\":\"home\"}}],[\"Temp/getPurchasedServers.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.getPurchasedServers()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getPurchasedServers.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getPurchasedServers.txt.js\",\"server\":\"home\"}}],[\"Temp/rooted-servers.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scanAllServers } from 'helpers.js'\\nexport async function main(ns) { let r;try{r=JSON.stringify(\\n    scanAllServers(ns).filter(s => ns.hasRootAccess(s))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/rooted-servers.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/rooted-servers.txt.js\",\"server\":\"home\"}}],[\"Temp/getServerMoneyAvailable.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.getServerMoneyAvailable(ns.args[0])\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/getServerMoneyAvailable.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/getServerMoneyAvailable.txt.js\",\"server\":\"home\"}}],[\"Temp/purchaseServer.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.purchaseServer(ns.args[0], ns.args[1])\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/purchaseServer.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/purchaseServer.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-buyStock.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.buyStock(ns.args[0], ns.args[1])\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-buyStock.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-buyStock.txt.js\",\"server\":\"home\"}}],[\"Temp/singularity-getCurrentWork.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.singularity.getCurrentWork()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/singularity-getCurrentWork.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/singularity-getCurrentWork.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-sellStock.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.sellStock(ns.args[0], ns.args[1])\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-sellStock.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-sellStock.txt.js\",\"server\":\"home\"}}],[\"Temp/contract-types.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(JSON.parse(ns.args[0]).map(c => [c.contract, ns.codingcontract.getContractType(c.contract, c.hostname)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/contract-types.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/contract-types.txt.js\",\"server\":\"home\"}}],[\"Temp/contract-data.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(JSON.parse(ns.args[0]).map(c => [c.contract, ns.codingcontract.getData(c.contract, c.hostname)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/contract-data.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/contract-data.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-purchase4SMarketData.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.purchase4SMarketData()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-purchase4SMarketData.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-purchase4SMarketData.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-purchase4SMarketDataTixApi.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.stock.purchase4SMarketDataTixApi()\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-purchase4SMarketDataTixApi.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-purchase4SMarketDataTixApi.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getVolatility.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getVolatility(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getVolatility.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getVolatility.txt.js\",\"server\":\"home\"}}],[\"Temp/stock-getForecast.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    Object.fromEntries(ns.args.map(sym => [sym, ns.stock.getForecast(sym)]))\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/stock-getForecast.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/stock-getForecast.txt.js\",\"server\":\"home\"}}],[\"Temp/upgradePurchasedServer.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.upgradePurchasedServer(ns.args[0], ns.args[1])\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/upgradePurchasedServer.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/upgradePurchasedServer.txt.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"reserve.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"reserve.txt\",\"text\":\"0\"}}],[\"Temp/getPlayer.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getPlayer.txt\",\"text\":\"{\\\"hp\\\":{\\\"current\\\":10,\\\"max\\\":10},\\\"skills\\\":{\\\"hacking\\\":75,\\\"strength\\\":1,\\\"defense\\\":1,\\\"dexterity\\\":1,\\\"agility\\\":1,\\\"charisma\\\":1,\\\"intelligence\\\":0},\\\"exp\\\":{\\\"hacking\\\":3038.750119239721,\\\"strength\\\":0,\\\"defense\\\":0,\\\"dexterity\\\":0,\\\"agility\\\":0,\\\"charisma\\\":0,\\\"intelligence\\\":0},\\\"mults\\\":{\\\"hacking_chance\\\":1.0926376290427293,\\\"hacking_speed\\\":1.1041946133362044,\\\"hacking_money\\\":1.0406072657549803,\\\"hacking_grow\\\":1.0406072657549803,\\\"hacking\\\":1.2275783762295065,\\\"strength\\\":1.2487287189059764,\\\"defense\\\":1.2487287189059764,\\\"dexterity\\\":1.442281670336403,\\\"agility\\\":1.0926376290427295,\\\"charisma\\\":1.3736015907965742,\\\"hacking_exp\\\":1.1446679923304783,\\\"strength_exp\\\":1.1446679923304783,\\\"defense_exp\\\":1.1446679923304783,\\\"dexterity_exp\\\":1.1446679923304783,\\\"agility_exp\\\":1.1446679923304783,\\\"charisma_exp\\\":1.1446679923304783,\\\"company_rep\\\":1.7376060123576664,\\\"faction_rep\\\":1.3163681911800502,\\\"crime_money\\\":1.0406072657549803,\\\"crime_success\\\":1.0406072657549803,\\\"hacknet_node_money\\\":2.624509081165225,\\\"hacknet_node_purchase_cost\\\":0.7351476634606986,\\\"hacknet_node_ram_cost\\\":0.9609773378571222,\\\"hacknet_node_core_cost\\\":0.9609773378571222,\\\"hacknet_node_level_cost\\\":0.8168307371785539,\\\"work_money\\\":1.1446679923304783,\\\"bladeburner_max_stamina\\\":1,\\\"bladeburner_stamina_gain\\\":1,\\\"bladeburner_analysis\\\":1,\\\"bladeburner_success_chance\\\":1},\\\"city\\\":\\\"Aevum\\\",\\\"numPeopleKilled\\\":0,\\\"money\\\":305504.8539333636,\\\"location\\\":\\\"Travel Agency\\\",\\\"totalPlaytime\\\":284486000,\\\"jobs\\\":{},\\\"factions\\\":[],\\\"entropy\\\":0}\"}}],[\"Temp/getResetInfo.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getResetInfo.txt\",\"text\":\"{\\\"lastAugReset\\\":1686309375263,\\\"lastNodeReset\\\":-1,\\\"currentNode\\\":1}\"}}],[\"Temp/owned-source-files.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/owned-source-files.txt\",\"text\":\"{}\"}}],[\"Temp/reset-info.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/reset-info.txt\",\"text\":\"{\\\"lastAugReset\\\":1686309375263,\\\"lastNodeReset\\\":-1,\\\"currentNode\\\":1}\"}}],[\"Temp/script-costs.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/script-costs.txt\",\"text\":\"{\\\"stats.js\\\":2.9,\\\"stockmaster.js\\\":2.6,\\\"hacknet-upgrade-manager.js\\\":6.1,\\\"spend-hacknet-hashes.js\\\":5.6,\\\"sleeve.js\\\":2.6,\\\"gangs.js\\\":2.65,\\\"work-for-factions.js\\\":2.6,\\\"bladeburner.js\\\":2.6,\\\"/Tasks/tor-manager.js\\\":33.8,\\\"/Tasks/program-manager.js\\\":33.7,\\\"/Tasks/contractor.js\\\":3,\\\"/Tasks/ram-manager.js\\\":2.6,\\\"faction-manager.js\\\":2.6,\\\"host-manager.js\\\":2.7,\\\"/Tasks/backdoor-all-servers.js\\\":35.2,\\\"/Remote/weak-target.js\\\":1.75,\\\"/Remote/grow-target.js\\\":1.75,\\\"/Remote/hack-target.js\\\":1.7,\\\"/Remote/manualhack-target.js\\\":33.6,\\\"/Remote/share.js\\\":4}\"}}],[\"Temp/files-exist.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/files-exist.txt\",\"text\":\"[true,false,false,false,false]\"}}],[\"Temp/scanAllServers.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/scanAllServers.txt\",\"text\":\"[\\\"home\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"max-hardware\\\",\\\"hong-fang-tea\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"nectar-net\\\",\\\"silver-helix\\\",\\\"crush-fitness\\\",\\\"I.I.I.I\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"zer0\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"syscore\\\",\\\"zb-institute\\\",\\\"millenium-fitness\\\",\\\"global-pharm\\\",\\\"omnia\\\",\\\"zeus-med\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"applied-energetics\\\",\\\"stormtech\\\",\\\"kuai-gong\\\",\\\"blade\\\",\\\"omnitek\\\",\\\"clarkinc\\\",\\\"megacorp\\\",\\\"microdyne\\\",\\\"vitalife\\\",\\\"defcomm\\\",\\\"aevum-police\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"deltaone\\\",\\\"solaris\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"zb-def\\\",\\\"run4theh111z\\\",\\\"fulcrumtech\\\",\\\"titan-labs\\\",\\\"helios\\\",\\\".\\\",\\\"nwo\\\",\\\"The-Cave\\\",\\\"b-and-a\\\",\\\"fulcrumassets\\\",\\\"ecorp\\\",\\\"4sigma\\\",\\\"powerhouse-fitness\\\",\\\"aerocorp\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"phantasy\\\",\\\"computek\\\",\\\"summit-uni\\\",\\\"alpha-ent\\\",\\\"rho-construction\\\",\\\"the-hub\\\",\\\"catalyst\\\",\\\"neo-net\\\",\\\"johnson-ortho\\\",\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"n00dles\\\"]\"}}],[\"Temp/getServerRequiredHackingLevel-all.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getServerRequiredHackingLevel-all.txt\",\"text\":\"{\\\"home\\\":1,\\\"iron-gym\\\":100,\\\"harakiri-sushi\\\":40,\\\"max-hardware\\\":80,\\\"hong-fang-tea\\\":30,\\\"joesguns\\\":10,\\\"sigma-cosmetics\\\":5,\\\"nectar-net\\\":20,\\\"silver-helix\\\":150,\\\"crush-fitness\\\":253,\\\"I.I.I.I\\\":361,\\\"rothman-uni\\\":381,\\\"netlink\\\":422,\\\"zer0\\\":75,\\\"omega-net\\\":204,\\\"avmnite-02h\\\":216,\\\"syscore\\\":612,\\\"zb-institute\\\":767,\\\"millenium-fitness\\\":502,\\\"global-pharm\\\":793,\\\"omnia\\\":851,\\\"zeus-med\\\":840,\\\"icarus\\\":881,\\\"taiyang-digital\\\":937,\\\"infocomm\\\":925,\\\"applied-energetics\\\":850,\\\"stormtech\\\":946,\\\"kuai-gong\\\":1196,\\\"blade\\\":1149,\\\"omnitek\\\":961,\\\"clarkinc\\\":1055,\\\"megacorp\\\":1115,\\\"microdyne\\\":858,\\\"vitalife\\\":824,\\\"defcomm\\\":1011,\\\"aevum-police\\\":420,\\\"lexo-corp\\\":747,\\\"snap-fitness\\\":734,\\\"deltaone\\\":843,\\\"solaris\\\":756,\\\"nova-med\\\":785,\\\"univ-energy\\\":864,\\\"zb-def\\\":803,\\\"run4theh111z\\\":514,\\\"fulcrumtech\\\":981,\\\"titan-labs\\\":820,\\\"helios\\\":880,\\\".\\\":518,\\\"nwo\\\":957,\\\"The-Cave\\\":925,\\\"b-and-a\\\":1144,\\\"fulcrumassets\\\":1231,\\\"ecorp\\\":1380,\\\"4sigma\\\":974,\\\"powerhouse-fitness\\\":1053,\\\"aerocorp\\\":883,\\\"galactic-cyber\\\":853,\\\"unitalife\\\":792,\\\"phantasy\\\":100,\\\"computek\\\":330,\\\"summit-uni\\\":441,\\\"alpha-ent\\\":586,\\\"rho-construction\\\":515,\\\"the-hub\\\":305,\\\"catalyst\\\":431,\\\"neo-net\\\":50,\\\"johnson-ortho\\\":266,\\\"foodnstuff\\\":1,\\\"CSEC\\\":52,\\\"n00dles\\\":1}\"}}],[\"Temp/getServerNumPortsRequired-all.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getServerNumPortsRequired-all.txt\",\"text\":\"{\\\"home\\\":5,\\\"iron-gym\\\":1,\\\"harakiri-sushi\\\":0,\\\"max-hardware\\\":1,\\\"hong-fang-tea\\\":0,\\\"joesguns\\\":0,\\\"sigma-cosmetics\\\":0,\\\"nectar-net\\\":0,\\\"silver-helix\\\":2,\\\"crush-fitness\\\":2,\\\"I.I.I.I\\\":3,\\\"rothman-uni\\\":3,\\\"netlink\\\":3,\\\"zer0\\\":1,\\\"omega-net\\\":2,\\\"avmnite-02h\\\":2,\\\"syscore\\\":4,\\\"zb-institute\\\":5,\\\"millenium-fitness\\\":3,\\\"global-pharm\\\":4,\\\"omnia\\\":5,\\\"zeus-med\\\":5,\\\"icarus\\\":5,\\\"taiyang-digital\\\":5,\\\"infocomm\\\":5,\\\"applied-energetics\\\":4,\\\"stormtech\\\":5,\\\"kuai-gong\\\":5,\\\"blade\\\":5,\\\"omnitek\\\":5,\\\"clarkinc\\\":5,\\\"megacorp\\\":5,\\\"microdyne\\\":5,\\\"vitalife\\\":5,\\\"defcomm\\\":5,\\\"aevum-police\\\":4,\\\"lexo-corp\\\":4,\\\"snap-fitness\\\":4,\\\"deltaone\\\":5,\\\"solaris\\\":5,\\\"nova-med\\\":4,\\\"univ-energy\\\":4,\\\"zb-def\\\":4,\\\"run4theh111z\\\":4,\\\"fulcrumtech\\\":5,\\\"titan-labs\\\":5,\\\"helios\\\":5,\\\".\\\":4,\\\"nwo\\\":5,\\\"The-Cave\\\":5,\\\"b-and-a\\\":5,\\\"fulcrumassets\\\":5,\\\"ecorp\\\":5,\\\"4sigma\\\":5,\\\"powerhouse-fitness\\\":5,\\\"aerocorp\\\":5,\\\"galactic-cyber\\\":5,\\\"unitalife\\\":4,\\\"phantasy\\\":2,\\\"computek\\\":3,\\\"summit-uni\\\":3,\\\"alpha-ent\\\":4,\\\"rho-construction\\\":3,\\\"the-hub\\\":2,\\\"catalyst\\\":3,\\\"neo-net\\\":1,\\\"johnson-ortho\\\":2,\\\"foodnstuff\\\":0,\\\"CSEC\\\":1,\\\"n00dles\\\":0}\"}}],[\"Temp/getServerGrowth-all.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getServerGrowth-all.txt\",\"text\":\"{\\\"home\\\":1,\\\"iron-gym\\\":20,\\\"harakiri-sushi\\\":40,\\\"max-hardware\\\":30,\\\"hong-fang-tea\\\":20,\\\"joesguns\\\":20,\\\"sigma-cosmetics\\\":10,\\\"nectar-net\\\":25,\\\"silver-helix\\\":30,\\\"crush-fitness\\\":28,\\\"I.I.I.I\\\":1,\\\"rothman-uni\\\":37,\\\"netlink\\\":58,\\\"zer0\\\":40,\\\"omega-net\\\":39,\\\"avmnite-02h\\\":1,\\\"syscore\\\":62,\\\"zb-institute\\\":76,\\\"millenium-fitness\\\":39,\\\"global-pharm\\\":84,\\\"omnia\\\":63,\\\"zeus-med\\\":74,\\\"icarus\\\":93,\\\"taiyang-digital\\\":80,\\\"infocomm\\\":68,\\\"applied-energetics\\\":75,\\\"stormtech\\\":91,\\\"kuai-gong\\\":92,\\\"blade\\\":62,\\\"omnitek\\\":96,\\\"clarkinc\\\":60,\\\"megacorp\\\":99,\\\"microdyne\\\":70,\\\"vitalife\\\":70,\\\"defcomm\\\":60,\\\"aevum-police\\\":30,\\\"lexo-corp\\\":59,\\\"snap-fitness\\\":42,\\\"deltaone\\\":70,\\\"solaris\\\":80,\\\"nova-med\\\":81,\\\"univ-energy\\\":83,\\\"zb-def\\\":68,\\\"run4theh111z\\\":1,\\\"fulcrumtech\\\":86,\\\"titan-labs\\\":77,\\\"helios\\\":75,\\\".\\\":1,\\\"nwo\\\":76,\\\"The-Cave\\\":1,\\\"b-and-a\\\":80,\\\"fulcrumassets\\\":1,\\\"ecorp\\\":99,\\\"4sigma\\\":93,\\\"powerhouse-fitness\\\":50,\\\"aerocorp\\\":58,\\\"galactic-cyber\\\":71,\\\"unitalife\\\":79,\\\"phantasy\\\":35,\\\"computek\\\":54,\\\"summit-uni\\\":44,\\\"alpha-ent\\\":51,\\\"rho-construction\\\":58,\\\"the-hub\\\":55,\\\"catalyst\\\":48,\\\"neo-net\\\":25,\\\"johnson-ortho\\\":44,\\\"foodnstuff\\\":5,\\\"CSEC\\\":1,\\\"n00dles\\\":3000}\"}}],[\"Temp/getServer-all.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getServer-all.txt\",\"text\":\"{\\\"home\\\":{\\\"hostname\\\":\\\"home\\\",\\\"ip\\\":\\\"68.1.6.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":true,\\\"ramUsed\\\":7.3,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Home PC\\\",\\\"purchasedByPlayer\\\":true,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1},\\\"iron-gym\\\":{\\\"hostname\\\":\\\"iron-gym\\\",\\\"ip\\\":\\\"29.0.4.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Iron Gym Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":30,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":20000000,\\\"moneyMax\\\":500000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":20},\\\"harakiri-sushi\\\":{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"ip\\\":\\\"30.6.0.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":15,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":4000000,\\\"moneyMax\\\":100000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":40,\\\"serverGrowth\\\":40},\\\"max-hardware\\\":{\\\"hostname\\\":\\\"max-hardware\\\",\\\"ip\\\":\\\"22.2.5.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Max Hardware Store\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":15,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":10000000,\\\"moneyMax\\\":250000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":80,\\\"serverGrowth\\\":30},\\\"hong-fang-tea\\\":{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"ip\\\":\\\"64.3.9.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HongFang Teahouse\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":15,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":3000000,\\\"moneyMax\\\":75000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":30,\\\"serverGrowth\\\":20},\\\"joesguns\\\":{\\\"hostname\\\":\\\"joesguns\\\",\\\"ip\\\":\\\"80.1.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Joe's Guns\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":15,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":2500000,\\\"moneyMax\\\":62500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":10,\\\"serverGrowth\\\":20},\\\"sigma-cosmetics\\\":{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"ip\\\":\\\"66.8.6.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Sigma Cosmetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":10,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":2300000,\\\"moneyMax\\\":57500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":5,\\\"serverGrowth\\\":10},\\\"nectar-net\\\":{\\\"hostname\\\":\\\"nectar-net\\\",\\\"ip\\\":\\\"62.6.0.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Nectar Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":20,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":2750000,\\\"moneyMax\\\":68750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":20,\\\"serverGrowth\\\":25},\\\"silver-helix\\\":{\\\"hostname\\\":\\\"silver-helix\\\",\\\"ip\\\":\\\"60.9.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Silver Helix\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":30,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":45000000,\\\"moneyMax\\\":1125000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":150,\\\"serverGrowth\\\":30},\\\"crush-fitness\\\":{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"ip\\\":\\\"37.3.5.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Crush Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":40,\\\"hackDifficulty\\\":40,\\\"minDifficulty\\\":13,\\\"moneyAvailable\\\":56343953,\\\"moneyMax\\\":1408598825,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":253,\\\"serverGrowth\\\":28},\\\"I.I.I.I\\\":{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"ip\\\":\\\"59.6.0.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"I.I.I.I\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":361,\\\"serverGrowth\\\":1},\\\"rothman-uni\\\":{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"ip\\\":\\\"28.1.3.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Rothman University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":49,\\\"hackDifficulty\\\":49,\\\"minDifficulty\\\":16,\\\"moneyAvailable\\\":175661138,\\\"moneyMax\\\":4391528450,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":381,\\\"serverGrowth\\\":37},\\\"netlink\\\":{\\\"hostname\\\":\\\"netlink\\\",\\\"ip\\\":\\\"78.4.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"NetLink Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":80,\\\"hackDifficulty\\\":80,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":275000000,\\\"moneyMax\\\":6875000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":422,\\\"serverGrowth\\\":58},\\\"zer0\\\":{\\\"hostname\\\":\\\"zer0\\\",\\\"ip\\\":\\\"97.9.3.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"ZER0 Nightclub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":25,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":7500000,\\\"moneyMax\\\":187500000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":75,\\\"serverGrowth\\\":40},\\\"omega-net\\\":{\\\"hostname\\\":\\\"omega-net\\\",\\\"ip\\\":\\\"89.6.2.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omega Software\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":28,\\\"hackDifficulty\\\":28,\\\"minDifficulty\\\":9,\\\"moneyAvailable\\\":67098546,\\\"moneyMax\\\":1677463650,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":204,\\\"serverGrowth\\\":39},\\\"avmnite-02h\\\":{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"ip\\\":\\\"83.6.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"NiteSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":216,\\\"serverGrowth\\\":1},\\\"syscore\\\":{\\\"hostname\\\":\\\"syscore\\\",\\\"ip\\\":\\\"28.7.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"SysCore Securities\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":78,\\\"hackDifficulty\\\":78,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":493548338,\\\"moneyMax\\\":12338708450,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":612,\\\"serverGrowth\\\":62},\\\"zb-institute\\\":{\\\"hostname\\\":\\\"zb-institute\\\",\\\"ip\\\":\\\"16.5.1.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"ZB Institute of Technology\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":67,\\\"hackDifficulty\\\":67,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":856114941,\\\"moneyMax\\\":21402873525,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":767,\\\"serverGrowth\\\":76},\\\"millenium-fitness\\\":{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"ip\\\":\\\"82.2.3.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Millenium Fitness Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":49,\\\"hackDifficulty\\\":49,\\\"minDifficulty\\\":16,\\\"moneyAvailable\\\":250000000,\\\"moneyMax\\\":6250000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":502,\\\"serverGrowth\\\":39},\\\"global-pharm\\\":{\\\"hostname\\\":\\\"global-pharm\\\",\\\"ip\\\":\\\"78.7.1.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Global Pharmaceuticals\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":1703117497,\\\"moneyMax\\\":42577937425,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":793,\\\"serverGrowth\\\":84},\\\"omnia\\\":{\\\"hostname\\\":\\\"omnia\\\",\\\"ip\\\":\\\"83.1.9.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omnia Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":86,\\\"hackDifficulty\\\":86,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":963245585,\\\"moneyMax\\\":24081139625,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":851,\\\"serverGrowth\\\":63},\\\"zeus-med\\\":{\\\"hostname\\\":\\\"zeus-med\\\",\\\"ip\\\":\\\"87.7.1.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Zeus Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":86,\\\"hackDifficulty\\\":86,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":1300753828,\\\"moneyMax\\\":32518845700,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":840,\\\"serverGrowth\\\":74},\\\"icarus\\\":{\\\"hostname\\\":\\\"icarus\\\",\\\"ip\\\":\\\"22.7.6.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Icarus Microsystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":93,\\\"hackDifficulty\\\":93,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":991057403,\\\"moneyMax\\\":24776435075,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":881,\\\"serverGrowth\\\":93},\\\"taiyang-digital\\\":{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"ip\\\":\\\"93.9.9.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Taiyang Digital\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":833051054,\\\"moneyMax\\\":20826276350,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":937,\\\"serverGrowth\\\":80},\\\"infocomm\\\":{\\\"hostname\\\":\\\"infocomm\\\",\\\"ip\\\":\\\"36.2.2.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"InfoComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":76,\\\"hackDifficulty\\\":76,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":634021577,\\\"moneyMax\\\":15850539425,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":925,\\\"serverGrowth\\\":68},\\\"applied-energetics\\\":{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"ip\\\":\\\"70.8.8.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Applied Energetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":896362320,\\\"moneyMax\\\":22409058000,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":850,\\\"serverGrowth\\\":75},\\\"stormtech\\\":{\\\"hostname\\\":\\\"stormtech\\\",\\\"ip\\\":\\\"73.9.5.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Storm Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":78,\\\"hackDifficulty\\\":78,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":1139820842,\\\"moneyMax\\\":28495521050,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":946,\\\"serverGrowth\\\":91},\\\"kuai-gong\\\":{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"ip\\\":\\\"50.3.9.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"KuaiGong International\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":97,\\\"hackDifficulty\\\":97,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":22316835756,\\\"moneyMax\\\":557920893900,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1196,\\\"serverGrowth\\\":92},\\\"blade\\\":{\\\"hostname\\\":\\\"blade\\\",\\\"ip\\\":\\\"40.6.2.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Blade Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":96,\\\"hackDifficulty\\\":96,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":39583731524,\\\"moneyMax\\\":989593288100,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1149,\\\"serverGrowth\\\":62},\\\"omnitek\\\":{\\\"hostname\\\":\\\"omnitek\\\",\\\"ip\\\":\\\"55.1.1.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":256,\\\"organizationName\\\":\\\"OmniTek Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":97,\\\"hackDifficulty\\\":97,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":15984375182,\\\"moneyMax\\\":399609379550,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":961,\\\"serverGrowth\\\":96},\\\"clarkinc\\\":{\\\"hostname\\\":\\\"clarkinc\\\",\\\"ip\\\":\\\"37.4.4.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Clarke Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":62,\\\"hackDifficulty\\\":62,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":24335235271,\\\"moneyMax\\\":608380881775,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1055,\\\"serverGrowth\\\":60},\\\"megacorp\\\":{\\\"hostname\\\":\\\"megacorp\\\",\\\"ip\\\":\\\"56.5.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"MegaCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":51198572192,\\\"moneyMax\\\":1279964304800,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1115,\\\"serverGrowth\\\":99},\\\"microdyne\\\":{\\\"hostname\\\":\\\"microdyne\\\",\\\"ip\\\":\\\"6.1.2.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Microdyne Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":73,\\\"hackDifficulty\\\":73,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":695994145,\\\"moneyMax\\\":17399853625,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":858,\\\"serverGrowth\\\":70},\\\"vitalife\\\":{\\\"hostname\\\":\\\"vitalife\\\",\\\"ip\\\":\\\"32.0.1.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"VitaLife\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":85,\\\"hackDifficulty\\\":85,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":706955818,\\\"moneyMax\\\":17673895450,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":824,\\\"serverGrowth\\\":70},\\\"defcomm\\\":{\\\"hostname\\\":\\\"defcomm\\\",\\\"ip\\\":\\\"53.4.2.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DefComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":92,\\\"hackDifficulty\\\":92,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":908661876,\\\"moneyMax\\\":22716546900,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1011,\\\"serverGrowth\\\":60},\\\"aevum-police\\\":{\\\"hostname\\\":\\\"aevum-police\\\",\\\"ip\\\":\\\"94.7.7.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Aevum Police Headquarters\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":80,\\\"hackDifficulty\\\":80,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":283538625,\\\"moneyMax\\\":7088465625,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":420,\\\"serverGrowth\\\":30},\\\"lexo-corp\\\":{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"ip\\\":\\\"49.9.7.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"LexoCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":749395656,\\\"moneyMax\\\":18734891400,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":747,\\\"serverGrowth\\\":59},\\\"snap-fitness\\\":{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"ip\\\":\\\"92.3.3.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Snap Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":41,\\\"hackDifficulty\\\":41,\\\"minDifficulty\\\":14,\\\"moneyAvailable\\\":450000000,\\\"moneyMax\\\":11250000000,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":734,\\\"serverGrowth\\\":42},\\\"deltaone\\\":{\\\"hostname\\\":\\\"deltaone\\\",\\\"ip\\\":\\\"11.4.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DeltaOne\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":1499773216,\\\"moneyMax\\\":37494330400,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":843,\\\"serverGrowth\\\":70},\\\"solaris\\\":{\\\"hostname\\\":\\\"solaris\\\",\\\"ip\\\":\\\"93.0.6.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Solaris Space Systems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":831403767,\\\"moneyMax\\\":20785094175,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":756,\\\"serverGrowth\\\":80},\\\"nova-med\\\":{\\\"hostname\\\":\\\"nova-med\\\",\\\"ip\\\":\\\"87.6.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Nova Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":66,\\\"hackDifficulty\\\":66,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":1221661162,\\\"moneyMax\\\":30541529050,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":785,\\\"serverGrowth\\\":81},\\\"univ-energy\\\":{\\\"hostname\\\":\\\"univ-energy\\\",\\\"ip\\\":\\\"62.6.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Universal Energy\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":83,\\\"hackDifficulty\\\":83,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":1143866111,\\\"moneyMax\\\":28596652775,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":864,\\\"serverGrowth\\\":83},\\\"zb-def\\\":{\\\"hostname\\\":\\\"zb-def\\\",\\\"ip\\\":\\\"35.3.6.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ZB Defense Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":59,\\\"hackDifficulty\\\":59,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":1064221725,\\\"moneyMax\\\":26605543125,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":803,\\\"serverGrowth\\\":68},\\\"run4theh111z\\\":{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"ip\\\":\\\"87.7.8.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"The Runners\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":514,\\\"serverGrowth\\\":1},\\\"fulcrumtech\\\":{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"ip\\\":\\\"7.5.5.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":512,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":91,\\\"hackDifficulty\\\":91,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":1448145189,\\\"moneyMax\\\":36203629725,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":981,\\\"serverGrowth\\\":86},\\\"titan-labs\\\":{\\\"hostname\\\":\\\"titan-labs\\\",\\\"ip\\\":\\\"79.8.6.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Titan Laboratories\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":756578269,\\\"moneyMax\\\":18914456725,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":820,\\\"serverGrowth\\\":77},\\\"helios\\\":{\\\"hostname\\\":\\\"helios\\\",\\\"ip\\\":\\\"30.6.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Helios Labs\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":90,\\\"hackDifficulty\\\":90,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":711392080,\\\"moneyMax\\\":17784802000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":880,\\\"serverGrowth\\\":75},\\\".\\\":{\\\"hostname\\\":\\\".\\\",\\\"ip\\\":\\\"60.4.1.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\".\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":518,\\\"serverGrowth\\\":1},\\\"nwo\\\":{\\\"hostname\\\":\\\"nwo\\\",\\\"ip\\\":\\\"55.1.6.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"NWO\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":24807862243,\\\"moneyMax\\\":620196556075,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":957,\\\"serverGrowth\\\":76},\\\"The-Cave\\\":{\\\"hostname\\\":\\\"The-Cave\\\",\\\"ip\\\":\\\"96.5.6.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Helios\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":925,\\\"serverGrowth\\\":1},\\\"b-and-a\\\":{\\\"hostname\\\":\\\"b-and-a\\\",\\\"ip\\\":\\\"14.3.3.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Bachman & Associates\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":77,\\\"hackDifficulty\\\":77,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":22673316306,\\\"moneyMax\\\":566832907650,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1144,\\\"serverGrowth\\\":80},\\\"fulcrumassets\\\":{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"ip\\\":\\\"31.0.3.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":1000000,\\\"moneyMax\\\":25000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1231,\\\"serverGrowth\\\":1},\\\"ecorp\\\":{\\\"hostname\\\":\\\"ecorp\\\",\\\"ip\\\":\\\"43.6.5.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ECorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":54748488674,\\\"moneyMax\\\":1368712216850,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1380,\\\"serverGrowth\\\":99},\\\"4sigma\\\":{\\\"hostname\\\":\\\"4sigma\\\",\\\"ip\\\":\\\"20.2.5.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Four Sigma\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":62,\\\"hackDifficulty\\\":62,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":23553455639,\\\"moneyMax\\\":588836390975,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":974,\\\"serverGrowth\\\":93},\\\"powerhouse-fitness\\\":{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"ip\\\":\\\"13.0.7.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Powerhouse Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":61,\\\"hackDifficulty\\\":61,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":900000000,\\\"moneyMax\\\":22500000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1053,\\\"serverGrowth\\\":50},\\\"aerocorp\\\":{\\\"hostname\\\":\\\"aerocorp\\\",\\\"ip\\\":\\\"62.2.3.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"AeroCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":80,\\\"hackDifficulty\\\":80,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":1106845657,\\\"moneyMax\\\":27671141425,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":883,\\\"serverGrowth\\\":58},\\\"galactic-cyber\\\":{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"ip\\\":\\\"28.4.1.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Galactic Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":57,\\\"hackDifficulty\\\":57,\\\"minDifficulty\\\":19,\\\"moneyAvailable\\\":825767783,\\\"moneyMax\\\":20644194575,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":853,\\\"serverGrowth\\\":71},\\\"unitalife\\\":{\\\"hostname\\\":\\\"unitalife\\\",\\\"ip\\\":\\\"14.6.5.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"UnitaLife Group\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":1040666032,\\\"moneyMax\\\":26016650800,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":792,\\\"serverGrowth\\\":79},\\\"phantasy\\\":{\\\"hostname\\\":\\\"phantasy\\\",\\\"ip\\\":\\\"77.9.2.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Phantasy Club\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":20,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":24000000,\\\"moneyMax\\\":600000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":35},\\\"computek\\\":{\\\"hostname\\\":\\\"computek\\\",\\\"ip\\\":\\\"90.9.0.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"CompuTek\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":59,\\\"hackDifficulty\\\":59,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":234084800,\\\"moneyMax\\\":5852120000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":330,\\\"serverGrowth\\\":54},\\\"summit-uni\\\":{\\\"hostname\\\":\\\"summit-uni\\\",\\\"ip\\\":\\\"87.4.8.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Summit University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":51,\\\"hackDifficulty\\\":51,\\\"minDifficulty\\\":17,\\\"moneyAvailable\\\":344634337,\\\"moneyMax\\\":8615858425,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":441,\\\"serverGrowth\\\":44},\\\"alpha-ent\\\":{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"ip\\\":\\\"12.1.1.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Alpha Enterprises\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":65,\\\"hackDifficulty\\\":65,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":617232627,\\\"moneyMax\\\":15430815675,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":586,\\\"serverGrowth\\\":51},\\\"rho-construction\\\":{\\\"hostname\\\":\\\"rho-construction\\\",\\\"ip\\\":\\\"45.2.7.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Rho Construction\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":51,\\\"hackDifficulty\\\":51,\\\"minDifficulty\\\":17,\\\"moneyAvailable\\\":655081225,\\\"moneyMax\\\":16377030625,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":515,\\\"serverGrowth\\\":58},\\\"the-hub\\\":{\\\"hostname\\\":\\\"the-hub\\\",\\\"ip\\\":\\\"98.3.4.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"The Hub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":42,\\\"hackDifficulty\\\":42,\\\"minDifficulty\\\":14,\\\"moneyAvailable\\\":180488968,\\\"moneyMax\\\":4512224200,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":305,\\\"serverGrowth\\\":55},\\\"catalyst\\\":{\\\"hostname\\\":\\\"catalyst\\\",\\\"ip\\\":\\\"69.2.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Catalyst Ventures\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":410008639,\\\"moneyMax\\\":10250215975,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":431,\\\"serverGrowth\\\":48},\\\"neo-net\\\":{\\\"hostname\\\":\\\"neo-net\\\",\\\"ip\\\":\\\"48.2.8.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Neo Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":25,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":5000000,\\\"moneyMax\\\":125000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":50,\\\"serverGrowth\\\":25},\\\"johnson-ortho\\\":{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"ip\\\":\\\"73.5.0.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Johnson Orthopedics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":58,\\\"hackDifficulty\\\":58,\\\"minDifficulty\\\":19,\\\"moneyAvailable\\\":83728839,\\\"moneyMax\\\":2093220975,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":266,\\\"serverGrowth\\\":44},\\\"foodnstuff\\\":{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"ip\\\":\\\"74.8.4.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"FoodNStuff\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":10,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":2000000,\\\"moneyMax\\\":50000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":5},\\\"CSEC\\\":{\\\"hostname\\\":\\\"CSEC\\\",\\\"ip\\\":\\\"80.8.4.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"CyberSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":52,\\\"serverGrowth\\\":1},\\\"n00dles\\\":{\\\"hostname\\\":\\\"n00dles\\\",\\\"ip\\\":\\\"51.2.1.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":4,\\\"organizationName\\\":\\\"Noodle Bar\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":70000,\\\"moneyMax\\\":1750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":3000}}\"}}],[\"Temp/getServerMinSecurityLevel-all.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getServerMinSecurityLevel-all.txt\",\"text\":\"{\\\"home\\\":1,\\\"iron-gym\\\":10,\\\"harakiri-sushi\\\":5,\\\"max-hardware\\\":5,\\\"hong-fang-tea\\\":5,\\\"joesguns\\\":5,\\\"sigma-cosmetics\\\":3,\\\"nectar-net\\\":7,\\\"silver-helix\\\":10,\\\"crush-fitness\\\":13,\\\"I.I.I.I\\\":1,\\\"rothman-uni\\\":16,\\\"netlink\\\":27,\\\"zer0\\\":8,\\\"omega-net\\\":9,\\\"avmnite-02h\\\":1,\\\"syscore\\\":26,\\\"zb-institute\\\":22,\\\"millenium-fitness\\\":16,\\\"global-pharm\\\":26,\\\"omnia\\\":29,\\\"zeus-med\\\":29,\\\"icarus\\\":31,\\\"taiyang-digital\\\":23,\\\"infocomm\\\":25,\\\"applied-energetics\\\":20,\\\"stormtech\\\":26,\\\"kuai-gong\\\":32,\\\"blade\\\":32,\\\"omnitek\\\":32,\\\"clarkinc\\\":21,\\\"megacorp\\\":33,\\\"microdyne\\\":24,\\\"vitalife\\\":28,\\\"defcomm\\\":31,\\\"aevum-police\\\":27,\\\"lexo-corp\\\":25,\\\"snap-fitness\\\":14,\\\"deltaone\\\":25,\\\"solaris\\\":26,\\\"nova-med\\\":22,\\\"univ-energy\\\":28,\\\"zb-def\\\":20,\\\"run4theh111z\\\":1,\\\"fulcrumtech\\\":30,\\\"titan-labs\\\":25,\\\"helios\\\":30,\\\".\\\":1,\\\"nwo\\\":33,\\\"The-Cave\\\":1,\\\"b-and-a\\\":26,\\\"fulcrumassets\\\":33,\\\"ecorp\\\":33,\\\"4sigma\\\":21,\\\"powerhouse-fitness\\\":20,\\\"aerocorp\\\":27,\\\"galactic-cyber\\\":19,\\\"unitalife\\\":25,\\\"phantasy\\\":7,\\\"computek\\\":20,\\\"summit-uni\\\":17,\\\"alpha-ent\\\":22,\\\"rho-construction\\\":17,\\\"the-hub\\\":14,\\\"catalyst\\\":20,\\\"neo-net\\\":8,\\\"johnson-ortho\\\":19,\\\"foodnstuff\\\":3,\\\"CSEC\\\":1,\\\"n00dles\\\":1}\"}}],[\"Temp/getServerMaxMoney-all.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getServerMaxMoney-all.txt\",\"text\":\"{\\\"home\\\":0,\\\"iron-gym\\\":500000000,\\\"harakiri-sushi\\\":100000000,\\\"max-hardware\\\":250000000,\\\"hong-fang-tea\\\":75000000,\\\"joesguns\\\":62500000,\\\"sigma-cosmetics\\\":57500000,\\\"nectar-net\\\":68750000,\\\"silver-helix\\\":1125000000,\\\"crush-fitness\\\":1408598825,\\\"I.I.I.I\\\":0,\\\"rothman-uni\\\":4391528450,\\\"netlink\\\":6875000000,\\\"zer0\\\":187500000,\\\"omega-net\\\":1677463650,\\\"avmnite-02h\\\":0,\\\"syscore\\\":12338708450,\\\"zb-institute\\\":21402873525,\\\"millenium-fitness\\\":6250000000,\\\"global-pharm\\\":42577937425,\\\"omnia\\\":24081139625,\\\"zeus-med\\\":32518845700,\\\"icarus\\\":24776435075,\\\"taiyang-digital\\\":20826276350,\\\"infocomm\\\":15850539425,\\\"applied-energetics\\\":22409058000,\\\"stormtech\\\":28495521050,\\\"kuai-gong\\\":557920893900,\\\"blade\\\":989593288100,\\\"omnitek\\\":399609379550,\\\"clarkinc\\\":608380881775,\\\"megacorp\\\":1279964304800,\\\"microdyne\\\":17399853625,\\\"vitalife\\\":17673895450,\\\"defcomm\\\":22716546900,\\\"aevum-police\\\":7088465625,\\\"lexo-corp\\\":18734891400,\\\"snap-fitness\\\":11250000000,\\\"deltaone\\\":37494330400,\\\"solaris\\\":20785094175,\\\"nova-med\\\":30541529050,\\\"univ-energy\\\":28596652775,\\\"zb-def\\\":26605543125,\\\"run4theh111z\\\":0,\\\"fulcrumtech\\\":36203629725,\\\"titan-labs\\\":18914456725,\\\"helios\\\":17784802000,\\\".\\\":0,\\\"nwo\\\":620196556075,\\\"The-Cave\\\":0,\\\"b-and-a\\\":566832907650,\\\"fulcrumassets\\\":25000000,\\\"ecorp\\\":1368712216850,\\\"4sigma\\\":588836390975,\\\"powerhouse-fitness\\\":22500000000,\\\"aerocorp\\\":27671141425,\\\"galactic-cyber\\\":20644194575,\\\"unitalife\\\":26016650800,\\\"phantasy\\\":600000000,\\\"computek\\\":5852120000,\\\"summit-uni\\\":8615858425,\\\"alpha-ent\\\":15430815675,\\\"rho-construction\\\":16377030625,\\\"the-hub\\\":4512224200,\\\"catalyst\\\":10250215975,\\\"neo-net\\\":125000000,\\\"johnson-ortho\\\":2093220975,\\\"foodnstuff\\\":50000000,\\\"CSEC\\\":0,\\\"n00dles\\\":1750000}\"}}],[\"Temp/analyze-hack.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/analyze-hack.txt\",\"text\":\"[{\\\"hostname\\\":\\\"n00dles\\\",\\\"gainRate\\\":1750000,\\\"expRate\\\":1},{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"gainRate\\\":57500000,\\\"expRate\\\":0.3333333333333333},{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"gainRate\\\":50000000,\\\"expRate\\\":0.3333333333333333},{\\\"hostname\\\":\\\"max-hardware\\\",\\\"gainRate\\\":250000000,\\\"expRate\\\":0.2},{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"gainRate\\\":100000000,\\\"expRate\\\":0.2},{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"gainRate\\\":75000000,\\\"expRate\\\":0.2},{\\\"hostname\\\":\\\"joesguns\\\",\\\"gainRate\\\":62500000,\\\"expRate\\\":0.2},{\\\"hostname\\\":\\\"phantasy\\\",\\\"gainRate\\\":600000000,\\\"expRate\\\":0.14285714285714285},{\\\"hostname\\\":\\\"nectar-net\\\",\\\"gainRate\\\":68750000,\\\"expRate\\\":0.14285714285714285},{\\\"hostname\\\":\\\"zer0\\\",\\\"gainRate\\\":187500000,\\\"expRate\\\":0.125},{\\\"hostname\\\":\\\"neo-net\\\",\\\"gainRate\\\":125000000,\\\"expRate\\\":0.125},{\\\"hostname\\\":\\\"omega-net\\\",\\\"gainRate\\\":1677463650,\\\"expRate\\\":0.1111111111111111},{\\\"hostname\\\":\\\"silver-helix\\\",\\\"gainRate\\\":1125000000,\\\"expRate\\\":0.1},{\\\"hostname\\\":\\\"iron-gym\\\",\\\"gainRate\\\":500000000,\\\"expRate\\\":0.1},{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"gainRate\\\":1408598825,\\\"expRate\\\":0.07692307692307693},{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"gainRate\\\":11250000000,\\\"expRate\\\":0.07142857142857142},{\\\"hostname\\\":\\\"the-hub\\\",\\\"gainRate\\\":4512224200,\\\"expRate\\\":0.07142857142857142},{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"gainRate\\\":6250000000,\\\"expRate\\\":0.0625},{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"gainRate\\\":4391528450,\\\"expRate\\\":0.0625},{\\\"hostname\\\":\\\"rho-construction\\\",\\\"gainRate\\\":16377030625,\\\"expRate\\\":0.058823529411764705},{\\\"hostname\\\":\\\"summit-uni\\\",\\\"gainRate\\\":8615858425,\\\"expRate\\\":0.058823529411764705},{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"gainRate\\\":20644194575,\\\"expRate\\\":0.05263157894736842},{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"gainRate\\\":2093220975,\\\"expRate\\\":0.05263157894736842},{\\\"hostname\\\":\\\"zb-def\\\",\\\"gainRate\\\":26605543125,\\\"expRate\\\":0.05},{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"gainRate\\\":22500000000,\\\"expRate\\\":0.05},{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"gainRate\\\":22409058000,\\\"expRate\\\":0.05},{\\\"hostname\\\":\\\"catalyst\\\",\\\"gainRate\\\":10250215975,\\\"expRate\\\":0.05},{\\\"hostname\\\":\\\"computek\\\",\\\"gainRate\\\":5852120000,\\\"expRate\\\":0.05},{\\\"hostname\\\":\\\"clarkinc\\\",\\\"gainRate\\\":608380881775,\\\"expRate\\\":0.047619047619047616},{\\\"hostname\\\":\\\"4sigma\\\",\\\"gainRate\\\":588836390975,\\\"expRate\\\":0.047619047619047616},{\\\"hostname\\\":\\\"nova-med\\\",\\\"gainRate\\\":30541529050,\\\"expRate\\\":0.045454545454545456},{\\\"hostname\\\":\\\"zb-institute\\\",\\\"gainRate\\\":21402873525,\\\"expRate\\\":0.045454545454545456},{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"gainRate\\\":15430815675,\\\"expRate\\\":0.045454545454545456},{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"gainRate\\\":20826276350,\\\"expRate\\\":0.043478260869565216},{\\\"hostname\\\":\\\"microdyne\\\",\\\"gainRate\\\":17399853625,\\\"expRate\\\":0.041666666666666664},{\\\"hostname\\\":\\\"deltaone\\\",\\\"gainRate\\\":37494330400,\\\"expRate\\\":0.04},{\\\"hostname\\\":\\\"unitalife\\\",\\\"gainRate\\\":26016650800,\\\"expRate\\\":0.04},{\\\"hostname\\\":\\\"titan-labs\\\",\\\"gainRate\\\":18914456725,\\\"expRate\\\":0.04},{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"gainRate\\\":18734891400,\\\"expRate\\\":0.04},{\\\"hostname\\\":\\\"infocomm\\\",\\\"gainRate\\\":15850539425,\\\"expRate\\\":0.04},{\\\"hostname\\\":\\\"b-and-a\\\",\\\"gainRate\\\":566832907650,\\\"expRate\\\":0.038461538461538464},{\\\"hostname\\\":\\\"global-pharm\\\",\\\"gainRate\\\":42577937425,\\\"expRate\\\":0.038461538461538464},{\\\"hostname\\\":\\\"stormtech\\\",\\\"gainRate\\\":28495521050,\\\"expRate\\\":0.038461538461538464},{\\\"hostname\\\":\\\"solaris\\\",\\\"gainRate\\\":20785094175,\\\"expRate\\\":0.038461538461538464},{\\\"hostname\\\":\\\"syscore\\\",\\\"gainRate\\\":12338708450,\\\"expRate\\\":0.038461538461538464},{\\\"hostname\\\":\\\"aerocorp\\\",\\\"gainRate\\\":27671141425,\\\"expRate\\\":0.037037037037037035},{\\\"hostname\\\":\\\"aevum-police\\\",\\\"gainRate\\\":7088465625,\\\"expRate\\\":0.037037037037037035},{\\\"hostname\\\":\\\"netlink\\\",\\\"gainRate\\\":6875000000,\\\"expRate\\\":0.037037037037037035},{\\\"hostname\\\":\\\"univ-energy\\\",\\\"gainRate\\\":28596652775,\\\"expRate\\\":0.03571428571428571},{\\\"hostname\\\":\\\"vitalife\\\",\\\"gainRate\\\":17673895450,\\\"expRate\\\":0.03571428571428571},{\\\"hostname\\\":\\\"zeus-med\\\",\\\"gainRate\\\":32518845700,\\\"expRate\\\":0.034482758620689655},{\\\"hostname\\\":\\\"omnia\\\",\\\"gainRate\\\":24081139625,\\\"expRate\\\":0.034482758620689655},{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"gainRate\\\":36203629725,\\\"expRate\\\":0.03333333333333333},{\\\"hostname\\\":\\\"helios\\\",\\\"gainRate\\\":17784802000,\\\"expRate\\\":0.03333333333333333},{\\\"hostname\\\":\\\"icarus\\\",\\\"gainRate\\\":24776435075,\\\"expRate\\\":0.03225806451612903},{\\\"hostname\\\":\\\"defcomm\\\",\\\"gainRate\\\":22716546900,\\\"expRate\\\":0.03225806451612903},{\\\"hostname\\\":\\\"blade\\\",\\\"gainRate\\\":989593288100,\\\"expRate\\\":0.03125},{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"gainRate\\\":557920893900,\\\"expRate\\\":0.03125},{\\\"hostname\\\":\\\"omnitek\\\",\\\"gainRate\\\":399609379550,\\\"expRate\\\":0.03125},{\\\"hostname\\\":\\\"ecorp\\\",\\\"gainRate\\\":1368712216850,\\\"expRate\\\":0.030303030303030304},{\\\"hostname\\\":\\\"megacorp\\\",\\\"gainRate\\\":1279964304800,\\\"expRate\\\":0.030303030303030304},{\\\"hostname\\\":\\\"nwo\\\",\\\"gainRate\\\":620196556075,\\\"expRate\\\":0.030303030303030304},{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"gainRate\\\":25000000,\\\"expRate\\\":0.030303030303030304}]\"}}],[\"Temp/stock-hasTIXAPIAccess.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-hasTIXAPIAccess.txt\",\"text\":\"true\"}}],[\"Temp/stock-has4SDataTIXAPI.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-has4SDataTIXAPI.txt\",\"text\":\"true\"}}],[\"Temp/ps-other-instances.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/ps-other-instances.txt\",\"text\":\"[8316]\"}}],[\"Temp/stock-symbols.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-symbols.txt\",\"text\":\"[\\\"ECP\\\",\\\"MGCP\\\",\\\"BLD\\\",\\\"CLRK\\\",\\\"OMTK\\\",\\\"FSIG\\\",\\\"KGI\\\",\\\"FLCM\\\",\\\"STM\\\",\\\"DCOMM\\\",\\\"HLS\\\",\\\"VITA\\\",\\\"ICRS\\\",\\\"UNV\\\",\\\"AERO\\\",\\\"OMN\\\",\\\"SLRS\\\",\\\"GPH\\\",\\\"NVMD\\\",\\\"WDS\\\",\\\"LXO\\\",\\\"RHOC\\\",\\\"APHE\\\",\\\"SYSC\\\",\\\"CTK\\\",\\\"NTLK\\\",\\\"OMGA\\\",\\\"FNS\\\",\\\"JGN\\\",\\\"SGC\\\",\\\"CTYS\\\",\\\"MDYN\\\",\\\"TITN\\\"]\"}}],[\"Temp/stock-getAskPrice-all.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getAskPrice-all.txt\",\"text\":\"{\\\"ECP\\\":23252.457472078077,\\\"MGCP\\\":28282.24255208682,\\\"BLD\\\":15152.157332148512,\\\"CLRK\\\":10129.17623604771,\\\"OMTK\\\":40428.11968547137,\\\"FSIG\\\":54918.33286150105,\\\"KGI\\\":24359.898357607668,\\\"FLCM\\\":29464.230367198095,\\\"STM\\\":24011.96750058489,\\\"DCOMM\\\":11287.51039069677,\\\"HLS\\\":12654.368994443012,\\\"VITA\\\":11509.775144768137,\\\"ICRS\\\":16228.90550309219,\\\"UNV\\\":26444.211598963637,\\\"AERO\\\":16758.687886483265,\\\"OMN\\\":9308.07202278236,\\\"SLRS\\\":14841.921343959477,\\\"GPH\\\":18685.848700214683,\\\"NVMD\\\":17551.116270716513,\\\"WDS\\\":5986.427784741867,\\\"LXO\\\":8109.9448858184305,\\\"RHOC\\\":4515.871868703883,\\\"APHE\\\":5922.939477417314,\\\"SYSC\\\":4443.883151718751,\\\"CTK\\\":1692.7711996878768,\\\"NTLK\\\":2808.104540915089,\\\"OMGA\\\":3401.991513148122,\\\"FNS\\\":1106.6442347351547,\\\"JGN\\\":366.4401738211563,\\\"SGC\\\":2877.2372114841423,\\\"CTYS\\\":1049.851148010251,\\\"MDYN\\\":30195.466455340662,\\\"TITN\\\":20047.62958671323}\"}}],[\"Temp/stock-getBidPrice-all.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getBidPrice-all.txt\",\"text\":\"{\\\"ECP\\\":23113.360019603035,\\\"MGCP\\\":28225.734574959777,\\\"BLD\\\":15001.389597500269,\\\"CLRK\\\":10048.4656684298,\\\"OMTK\\\":39945.87571308006,\\\"FSIG\\\":54808.60592271683,\\\"KGI\\\":24214.176134132453,\\\"FLCM\\\":29287.973754832008,\\\"STM\\\":23678.136770685996,\\\"DCOMM\\\":11242.450468977422,\\\"HLS\\\":12428.622074819648,\\\"VITA\\\":11418.06378903293,\\\"ICRS\\\":16067.423856295256,\\\"UNV\\\":26233.500749569503,\\\"AERO\\\":16658.436513283967,\\\"OMN\\\":9160.324847817561,\\\"SLRS\\\":14606.335290880756,\\\"GPH\\\":18536.957475511776,\\\"NVMD\\\":17272.527123562286,\\\"WDS\\\":5856.159326518009,\\\"LXO\\\":7965.26797011503,\\\"RHOC\\\":4462.004609832663,\\\"APHE\\\":5770.919313140069,\\\"SYSC\\\":4373.345323913692,\\\"CTK\\\":1659.2509779118793,\\\"NTLK\\\":2703.386216523751,\\\"OMGA\\\":3374.8840110513247,\\\"FNS\\\":1086.9023157805138,\\\"JGN\\\":358.4662036687672,\\\"SGC\\\":2797.7868742833966,\\\"CTYS\\\":1029.062016366484,\\\"MDYN\\\":29895.014052799965,\\\"TITN\\\":19967.59912928124}\"}}],[\"Temp/stock-getPosition-all.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getPosition-all.txt\",\"text\":\"{\\\"ECP\\\":[0,0,0,0],\\\"MGCP\\\":[0,0,0,0],\\\"BLD\\\":[0,0,0,0],\\\"CLRK\\\":[0,0,0,0],\\\"OMTK\\\":[0,0,0,0],\\\"FSIG\\\":[0,0,0,0],\\\"KGI\\\":[0,0,0,0],\\\"FLCM\\\":[0,0,0,0],\\\"STM\\\":[0,0,0,0],\\\"DCOMM\\\":[0,0,0,0],\\\"HLS\\\":[0,0,0,0],\\\"VITA\\\":[0,0,0,0],\\\"ICRS\\\":[0,0,0,0],\\\"UNV\\\":[0,0,0,0],\\\"AERO\\\":[0,0,0,0],\\\"OMN\\\":[0,0,0,0],\\\"SLRS\\\":[0,0,0,0],\\\"GPH\\\":[0,0,0,0],\\\"NVMD\\\":[0,0,0,0],\\\"WDS\\\":[0,0,0,0],\\\"LXO\\\":[0,0,0,0],\\\"RHOC\\\":[0,0,0,0],\\\"APHE\\\":[0,0,0,0],\\\"SYSC\\\":[0,0,0,0],\\\"CTK\\\":[0,0,0,0],\\\"NTLK\\\":[0,0,0,0],\\\"OMGA\\\":[0,0,0,0],\\\"FNS\\\":[0,0,0,0],\\\"JGN\\\":[0,0,0,0],\\\"SGC\\\":[0,0,0,0],\\\"CTYS\\\":[0,0,0,0],\\\"MDYN\\\":[0,0,0,0],\\\"TITN\\\":[0,0,0,0]}\"}}],[\"Temp/gang-stats.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/gang-stats.txt\",\"text\":\"false\"}}],[\"Temp/getServers.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getServers.txt\",\"text\":\"[{\\\"hostname\\\":\\\"home\\\",\\\"ip\\\":\\\"68.1.6.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":true,\\\"ramUsed\\\":99.25,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Home PC\\\",\\\"purchasedByPlayer\\\":true,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1},{\\\"hostname\\\":\\\"iron-gym\\\",\\\"ip\\\":\\\"29.0.4.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Iron Gym Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":30,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":20000000,\\\"moneyMax\\\":500000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":20},{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"ip\\\":\\\"30.6.0.8\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":8.945999999999996,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":4137280.9487022813,\\\"moneyMax\\\":100000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":40,\\\"serverGrowth\\\":40},{\\\"hostname\\\":\\\"max-hardware\\\",\\\"ip\\\":\\\"22.2.5.2\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Max Hardware Store\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":15,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":10000000,\\\"moneyMax\\\":250000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":80,\\\"serverGrowth\\\":30},{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"ip\\\":\\\"64.3.9.5\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HongFang Teahouse\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":14.05,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":3000000,\\\"moneyMax\\\":75000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":30,\\\"serverGrowth\\\":20},{\\\"hostname\\\":\\\"joesguns\\\",\\\"ip\\\":\\\"80.1.4.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Joe's Guns\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":14.200000000000001,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":2500000,\\\"moneyMax\\\":62500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":10,\\\"serverGrowth\\\":20},{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"ip\\\":\\\"66.8.6.6\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Sigma Cosmetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":9.050000000000002,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":2300000,\\\"moneyMax\\\":57500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":5,\\\"serverGrowth\\\":10},{\\\"hostname\\\":\\\"nectar-net\\\",\\\"ip\\\":\\\"62.6.0.0\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Nectar Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":19.049999999999997,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":2750000,\\\"moneyMax\\\":68750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":20,\\\"serverGrowth\\\":25},{\\\"hostname\\\":\\\"silver-helix\\\",\\\"ip\\\":\\\"60.9.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Silver Helix\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":30,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":45000000,\\\"moneyMax\\\":1125000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":150,\\\"serverGrowth\\\":30},{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"ip\\\":\\\"37.3.5.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Crush Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":40,\\\"hackDifficulty\\\":40,\\\"minDifficulty\\\":13,\\\"moneyAvailable\\\":56343953,\\\"moneyMax\\\":1408598825,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":253,\\\"serverGrowth\\\":28},{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"ip\\\":\\\"59.6.0.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"I.I.I.I\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":361,\\\"serverGrowth\\\":1},{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"ip\\\":\\\"28.1.3.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Rothman University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":49,\\\"hackDifficulty\\\":49,\\\"minDifficulty\\\":16,\\\"moneyAvailable\\\":175661138,\\\"moneyMax\\\":4391528450,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":381,\\\"serverGrowth\\\":37},{\\\"hostname\\\":\\\"netlink\\\",\\\"ip\\\":\\\"78.4.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"NetLink Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":80,\\\"hackDifficulty\\\":80,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":275000000,\\\"moneyMax\\\":6875000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":422,\\\"serverGrowth\\\":58},{\\\"hostname\\\":\\\"zer0\\\",\\\"ip\\\":\\\"97.9.3.3\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"ZER0 Nightclub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":25,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":7500000,\\\"moneyMax\\\":187500000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":75,\\\"serverGrowth\\\":40},{\\\"hostname\\\":\\\"omega-net\\\",\\\"ip\\\":\\\"89.6.2.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omega Software\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":28,\\\"hackDifficulty\\\":28,\\\"minDifficulty\\\":9,\\\"moneyAvailable\\\":67098546,\\\"moneyMax\\\":1677463650,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":204,\\\"serverGrowth\\\":39},{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"ip\\\":\\\"83.6.2.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"NiteSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":216,\\\"serverGrowth\\\":1},{\\\"hostname\\\":\\\"syscore\\\",\\\"ip\\\":\\\"28.7.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"SysCore Securities\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":78,\\\"hackDifficulty\\\":78,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":493548338,\\\"moneyMax\\\":12338708450,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":612,\\\"serverGrowth\\\":62},{\\\"hostname\\\":\\\"zb-institute\\\",\\\"ip\\\":\\\"16.5.1.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"ZB Institute of Technology\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":67,\\\"hackDifficulty\\\":67,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":856114941,\\\"moneyMax\\\":21402873525,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":767,\\\"serverGrowth\\\":76},{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"ip\\\":\\\"82.2.3.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Millenium Fitness Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":49,\\\"hackDifficulty\\\":49,\\\"minDifficulty\\\":16,\\\"moneyAvailable\\\":250000000,\\\"moneyMax\\\":6250000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":502,\\\"serverGrowth\\\":39},{\\\"hostname\\\":\\\"global-pharm\\\",\\\"ip\\\":\\\"78.7.1.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Global Pharmaceuticals\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":1703117497,\\\"moneyMax\\\":42577937425,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":793,\\\"serverGrowth\\\":84},{\\\"hostname\\\":\\\"omnia\\\",\\\"ip\\\":\\\"83.1.9.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omnia Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":86,\\\"hackDifficulty\\\":86,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":963245585,\\\"moneyMax\\\":24081139625,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":851,\\\"serverGrowth\\\":63},{\\\"hostname\\\":\\\"zeus-med\\\",\\\"ip\\\":\\\"87.7.1.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Zeus Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":86,\\\"hackDifficulty\\\":86,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":1300753828,\\\"moneyMax\\\":32518845700,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":840,\\\"serverGrowth\\\":74},{\\\"hostname\\\":\\\"icarus\\\",\\\"ip\\\":\\\"22.7.6.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Icarus Microsystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":93,\\\"hackDifficulty\\\":93,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":991057403,\\\"moneyMax\\\":24776435075,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":881,\\\"serverGrowth\\\":93},{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"ip\\\":\\\"93.9.9.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Taiyang Digital\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":833051054,\\\"moneyMax\\\":20826276350,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":937,\\\"serverGrowth\\\":80},{\\\"hostname\\\":\\\"infocomm\\\",\\\"ip\\\":\\\"36.2.2.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"InfoComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":76,\\\"hackDifficulty\\\":76,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":634021577,\\\"moneyMax\\\":15850539425,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":925,\\\"serverGrowth\\\":68},{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"ip\\\":\\\"70.8.8.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Applied Energetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":896362320,\\\"moneyMax\\\":22409058000,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":850,\\\"serverGrowth\\\":75},{\\\"hostname\\\":\\\"stormtech\\\",\\\"ip\\\":\\\"73.9.5.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Storm Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":78,\\\"hackDifficulty\\\":78,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":1139820842,\\\"moneyMax\\\":28495521050,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":946,\\\"serverGrowth\\\":91},{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"ip\\\":\\\"50.3.9.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"KuaiGong International\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":97,\\\"hackDifficulty\\\":97,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":22316835756,\\\"moneyMax\\\":557920893900,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1196,\\\"serverGrowth\\\":92},{\\\"hostname\\\":\\\"blade\\\",\\\"ip\\\":\\\"40.6.2.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Blade Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":96,\\\"hackDifficulty\\\":96,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":39583731524,\\\"moneyMax\\\":989593288100,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1149,\\\"serverGrowth\\\":62},{\\\"hostname\\\":\\\"omnitek\\\",\\\"ip\\\":\\\"55.1.1.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":256,\\\"organizationName\\\":\\\"OmniTek Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":97,\\\"hackDifficulty\\\":97,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":15984375182,\\\"moneyMax\\\":399609379550,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":961,\\\"serverGrowth\\\":96},{\\\"hostname\\\":\\\"clarkinc\\\",\\\"ip\\\":\\\"37.4.4.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Clarke Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":62,\\\"hackDifficulty\\\":62,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":24335235271,\\\"moneyMax\\\":608380881775,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1055,\\\"serverGrowth\\\":60},{\\\"hostname\\\":\\\"megacorp\\\",\\\"ip\\\":\\\"56.5.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"MegaCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":51198572192,\\\"moneyMax\\\":1279964304800,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1115,\\\"serverGrowth\\\":99},{\\\"hostname\\\":\\\"microdyne\\\",\\\"ip\\\":\\\"6.1.2.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Microdyne Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":73,\\\"hackDifficulty\\\":73,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":695994145,\\\"moneyMax\\\":17399853625,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":858,\\\"serverGrowth\\\":70},{\\\"hostname\\\":\\\"vitalife\\\",\\\"ip\\\":\\\"32.0.1.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"VitaLife\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":85,\\\"hackDifficulty\\\":85,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":706955818,\\\"moneyMax\\\":17673895450,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":824,\\\"serverGrowth\\\":70},{\\\"hostname\\\":\\\"defcomm\\\",\\\"ip\\\":\\\"53.4.2.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DefComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":92,\\\"hackDifficulty\\\":92,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":908661876,\\\"moneyMax\\\":22716546900,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1011,\\\"serverGrowth\\\":60},{\\\"hostname\\\":\\\"aevum-police\\\",\\\"ip\\\":\\\"94.7.7.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Aevum Police Headquarters\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":80,\\\"hackDifficulty\\\":80,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":283538625,\\\"moneyMax\\\":7088465625,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":420,\\\"serverGrowth\\\":30},{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"ip\\\":\\\"49.9.7.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"LexoCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":749395656,\\\"moneyMax\\\":18734891400,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":747,\\\"serverGrowth\\\":59},{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"ip\\\":\\\"92.3.3.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Snap Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":41,\\\"hackDifficulty\\\":41,\\\"minDifficulty\\\":14,\\\"moneyAvailable\\\":450000000,\\\"moneyMax\\\":11250000000,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":734,\\\"serverGrowth\\\":42},{\\\"hostname\\\":\\\"deltaone\\\",\\\"ip\\\":\\\"11.4.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DeltaOne\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":1499773216,\\\"moneyMax\\\":37494330400,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":843,\\\"serverGrowth\\\":70},{\\\"hostname\\\":\\\"solaris\\\",\\\"ip\\\":\\\"93.0.6.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Solaris Space Systems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":831403767,\\\"moneyMax\\\":20785094175,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":756,\\\"serverGrowth\\\":80},{\\\"hostname\\\":\\\"nova-med\\\",\\\"ip\\\":\\\"87.6.9.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Nova Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":66,\\\"hackDifficulty\\\":66,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":1221661162,\\\"moneyMax\\\":30541529050,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":785,\\\"serverGrowth\\\":81},{\\\"hostname\\\":\\\"univ-energy\\\",\\\"ip\\\":\\\"62.6.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Universal Energy\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":83,\\\"hackDifficulty\\\":83,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":1143866111,\\\"moneyMax\\\":28596652775,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":864,\\\"serverGrowth\\\":83},{\\\"hostname\\\":\\\"zb-def\\\",\\\"ip\\\":\\\"35.3.6.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ZB Defense Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":59,\\\"hackDifficulty\\\":59,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":1064221725,\\\"moneyMax\\\":26605543125,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":803,\\\"serverGrowth\\\":68},{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"ip\\\":\\\"87.7.8.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"The Runners\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":514,\\\"serverGrowth\\\":1},{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"ip\\\":\\\"7.5.5.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":512,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":91,\\\"hackDifficulty\\\":91,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":1448145189,\\\"moneyMax\\\":36203629725,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":981,\\\"serverGrowth\\\":86},{\\\"hostname\\\":\\\"titan-labs\\\",\\\"ip\\\":\\\"79.8.6.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Titan Laboratories\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":756578269,\\\"moneyMax\\\":18914456725,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":820,\\\"serverGrowth\\\":77},{\\\"hostname\\\":\\\"helios\\\",\\\"ip\\\":\\\"30.6.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Helios Labs\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":90,\\\"hackDifficulty\\\":90,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":711392080,\\\"moneyMax\\\":17784802000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":880,\\\"serverGrowth\\\":75},{\\\"hostname\\\":\\\".\\\",\\\"ip\\\":\\\"60.4.1.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\".\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":518,\\\"serverGrowth\\\":1},{\\\"hostname\\\":\\\"nwo\\\",\\\"ip\\\":\\\"55.1.6.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"NWO\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":24807862243,\\\"moneyMax\\\":620196556075,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":957,\\\"serverGrowth\\\":76},{\\\"hostname\\\":\\\"The-Cave\\\",\\\"ip\\\":\\\"96.5.6.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Helios\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":925,\\\"serverGrowth\\\":1},{\\\"hostname\\\":\\\"b-and-a\\\",\\\"ip\\\":\\\"14.3.3.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Bachman & Associates\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":77,\\\"hackDifficulty\\\":77,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":22673316306,\\\"moneyMax\\\":566832907650,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1144,\\\"serverGrowth\\\":80},{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"ip\\\":\\\"31.0.3.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":1000000,\\\"moneyMax\\\":25000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1231,\\\"serverGrowth\\\":1},{\\\"hostname\\\":\\\"ecorp\\\",\\\"ip\\\":\\\"43.6.5.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ECorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":54748488674,\\\"moneyMax\\\":1368712216850,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1380,\\\"serverGrowth\\\":99},{\\\"hostname\\\":\\\"4sigma\\\",\\\"ip\\\":\\\"20.2.5.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Four Sigma\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":62,\\\"hackDifficulty\\\":62,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":23553455639,\\\"moneyMax\\\":588836390975,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":974,\\\"serverGrowth\\\":93},{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"ip\\\":\\\"13.0.7.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Powerhouse Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":61,\\\"hackDifficulty\\\":61,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":900000000,\\\"moneyMax\\\":22500000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1053,\\\"serverGrowth\\\":50},{\\\"hostname\\\":\\\"aerocorp\\\",\\\"ip\\\":\\\"62.2.3.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"AeroCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":80,\\\"hackDifficulty\\\":80,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":1106845657,\\\"moneyMax\\\":27671141425,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":883,\\\"serverGrowth\\\":58},{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"ip\\\":\\\"28.4.1.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Galactic Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":57,\\\"hackDifficulty\\\":57,\\\"minDifficulty\\\":19,\\\"moneyAvailable\\\":825767783,\\\"moneyMax\\\":20644194575,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":853,\\\"serverGrowth\\\":71},{\\\"hostname\\\":\\\"unitalife\\\",\\\"ip\\\":\\\"14.6.5.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"UnitaLife Group\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":1040666032,\\\"moneyMax\\\":26016650800,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":792,\\\"serverGrowth\\\":79},{\\\"hostname\\\":\\\"phantasy\\\",\\\"ip\\\":\\\"77.9.2.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Phantasy Club\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":20,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":24000000,\\\"moneyMax\\\":600000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":35},{\\\"hostname\\\":\\\"computek\\\",\\\"ip\\\":\\\"90.9.0.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"CompuTek\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":59,\\\"hackDifficulty\\\":59,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":234084800,\\\"moneyMax\\\":5852120000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":330,\\\"serverGrowth\\\":54},{\\\"hostname\\\":\\\"summit-uni\\\",\\\"ip\\\":\\\"87.4.8.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Summit University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":51,\\\"hackDifficulty\\\":51,\\\"minDifficulty\\\":17,\\\"moneyAvailable\\\":344634337,\\\"moneyMax\\\":8615858425,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":441,\\\"serverGrowth\\\":44},{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"ip\\\":\\\"12.1.1.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Alpha Enterprises\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":65,\\\"hackDifficulty\\\":65,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":617232627,\\\"moneyMax\\\":15430815675,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":586,\\\"serverGrowth\\\":51},{\\\"hostname\\\":\\\"rho-construction\\\",\\\"ip\\\":\\\"45.2.7.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Rho Construction\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":51,\\\"hackDifficulty\\\":51,\\\"minDifficulty\\\":17,\\\"moneyAvailable\\\":655081225,\\\"moneyMax\\\":16377030625,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":515,\\\"serverGrowth\\\":58},{\\\"hostname\\\":\\\"the-hub\\\",\\\"ip\\\":\\\"98.3.4.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"The Hub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":42,\\\"hackDifficulty\\\":42,\\\"minDifficulty\\\":14,\\\"moneyAvailable\\\":180488968,\\\"moneyMax\\\":4512224200,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":305,\\\"serverGrowth\\\":55},{\\\"hostname\\\":\\\"catalyst\\\",\\\"ip\\\":\\\"69.2.4.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Catalyst Ventures\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":410008639,\\\"moneyMax\\\":10250215975,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":431,\\\"serverGrowth\\\":48},{\\\"hostname\\\":\\\"neo-net\\\",\\\"ip\\\":\\\"48.2.8.2\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Neo Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":25,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":5000000,\\\"moneyMax\\\":125000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":50,\\\"serverGrowth\\\":25},{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"ip\\\":\\\"73.5.0.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Johnson Orthopedics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":58,\\\"hackDifficulty\\\":58,\\\"minDifficulty\\\":19,\\\"moneyAvailable\\\":83728839,\\\"moneyMax\\\":2093220975,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":266,\\\"serverGrowth\\\":44},{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"ip\\\":\\\"74.8.4.2\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"FoodNStuff\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":3.0139999999999985,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":2005001.8564442827,\\\"moneyMax\\\":50000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":5},{\\\"hostname\\\":\\\"CSEC\\\",\\\"ip\\\":\\\"80.8.4.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":7,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"CyberSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":52,\\\"serverGrowth\\\":1},{\\\"hostname\\\":\\\"n00dles\\\",\\\"ip\\\":\\\"51.2.1.6\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":3.5,\\\"maxRam\\\":4,\\\"organizationName\\\":\\\"Noodle Bar\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1.022,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":498684.61674914026,\\\"moneyMax\\\":1750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":3000}]\"}}],[\"Temp/getSharePower.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getSharePower.txt\",\"text\":\"1\"}}],[\"Temp/stock-getMaxShares.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getMaxShares.txt\",\"text\":\"{\\\"ECP\\\":20700000,\\\"MGCP\\\":17000000,\\\"BLD\\\":21200000,\\\"CLRK\\\":29800000,\\\"OMTK\\\":8900000,\\\"FSIG\\\":7300000,\\\"KGI\\\":15600000,\\\"FLCM\\\":13600000,\\\"STM\\\":10000000,\\\"DCOMM\\\":16000000,\\\"HLS\\\":13200000,\\\"VITA\\\":17500000,\\\"ICRS\\\":9900000,\\\"UNV\\\":6900000,\\\"AERO\\\":7700000,\\\"OMN\\\":13000000,\\\"SLRS\\\":9600000,\\\"GPH\\\":7500000,\\\"NVMD\\\":6900000,\\\"WDS\\\":15100000,\\\"LXO\\\":7500000,\\\"RHOC\\\":8000000,\\\"APHE\\\":8300000,\\\"SYSC\\\":9000000,\\\"CTK\\\":22100000,\\\"NTLK\\\":4200000,\\\"OMGA\\\":3500000,\\\"FNS\\\":8200000,\\\"JGN\\\":22800000,\\\"SGC\\\":2100000,\\\"CTYS\\\":19400000,\\\"MDYN\\\":2400000,\\\"TITN\\\":4200000}\"}}],[\"Temp/stockmarket-summary-is-running.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stockmarket-summary-is-running.txt\",\"text\":\"false\"}}],[\"Temp/stock-getAskPrice.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getAskPrice.txt\",\"text\":\"{\\\"ECP\\\":23351.982370971153,\\\"MGCP\\\":31641.4655784919,\\\"BLD\\\":15697.786936757238,\\\"CLRK\\\":11825.069395266159,\\\"OMTK\\\":38959.96748431866,\\\"FSIG\\\":60813.73435521691,\\\"KGI\\\":28332.297003558462,\\\"FLCM\\\":33954.490254756594,\\\"STM\\\":22441.202315338713,\\\"DCOMM\\\":11915.940851179203,\\\"HLS\\\":13870.667313522044,\\\"VITA\\\":12262.232483988628,\\\"ICRS\\\":16411.46344885261,\\\"UNV\\\":26645.841855851737,\\\"AERO\\\":18464.0297926186,\\\"OMN\\\":9197.98626635202,\\\"SLRS\\\":16518.305555421557,\\\"GPH\\\":19986.67966317368,\\\"NVMD\\\":16845.612181047767,\\\"WDS\\\":6203.6686284673715,\\\"LXO\\\":7951.324596377658,\\\"RHOC\\\":4694.904971623962,\\\"APHE\\\":7118.543424849802,\\\"SYSC\\\":4198.735143605,\\\"CTK\\\":1748.6313540087483,\\\"NTLK\\\":3713.5415708629807,\\\"OMGA\\\":3534.299951431419,\\\"FNS\\\":1191.7029607446104,\\\"JGN\\\":291.34883607139454,\\\"SGC\\\":2564.7939744039445,\\\"CTYS\\\":1530.5612507419044,\\\"MDYN\\\":31289.968049389194,\\\"TITN\\\":20093.46029639914}\"}}],[\"Temp/stock-getBidPrice.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getBidPrice.txt\",\"text\":\"{\\\"ECP\\\":23212.289555192663,\\\"MGCP\\\":31578.245867046364,\\\"BLD\\\":15541.59005181438,\\\"CLRK\\\":11730.84573474611,\\\"OMTK\\\":38495.2362618417,\\\"FSIG\\\":60692.22839246923,\\\"KGI\\\":28162.811677515245,\\\"FLCM\\\":33751.37266599434,\\\"STM\\\":22129.209433099644,\\\"DCOMM\\\":11868.37222502679,\\\"HLS\\\":13623.222306937905,\\\"VITA\\\":12164.525452243699,\\\"ICRS\\\":16248.165305082935,\\\"UNV\\\":26433.52439086487,\\\"AERO\\\":18353.576972323775,\\\"OMN\\\":9051.986484346433,\\\"SLRS\\\":16256.110229145024,\\\"GPH\\\":19827.423251514927,\\\"NVMD\\\":16578.221511507323,\\\"WDS\\\":6068.672871962642,\\\"LXO\\\":7809.4773786028345,\\\"RHOC\\\":4638.902129020098,\\\"APHE\\\":6935.836486008643,\\\"SYSC\\\":4132.088554023968,\\\"CTK\\\":1714.0049905630306,\\\"NTLK\\\":3575.058175678689,\\\"OMGA\\\":3506.138198830372,\\\"FNS\\\":1170.4436413259752,\\\"JGN\\\":285.0089009640052,\\\"SGC\\\":2493.971261106794,\\\"CTYS\\\":1500.2531071628566,\\\"MDYN\\\":30978.625083723633,\\\"TITN\\\":20013.246882042255}\"}}],[\"Temp/stock-getPosition.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getPosition.txt\",\"text\":\"{\\\"ECP\\\":[0,0,0,0],\\\"MGCP\\\":[0,0,0,0],\\\"BLD\\\":[0,0,0,0],\\\"CLRK\\\":[0,0,0,0],\\\"OMTK\\\":[0,0,0,0],\\\"FSIG\\\":[0,0,0,0],\\\"KGI\\\":[0,0,0,0],\\\"FLCM\\\":[0,0,0,0],\\\"STM\\\":[0,0,0,0],\\\"DCOMM\\\":[0,0,0,0],\\\"HLS\\\":[0,0,0,0],\\\"VITA\\\":[0,0,0,0],\\\"ICRS\\\":[0,0,0,0],\\\"UNV\\\":[0,0,0,0],\\\"AERO\\\":[0,0,0,0],\\\"OMN\\\":[0,0,0,0],\\\"SLRS\\\":[0,0,0,0],\\\"GPH\\\":[0,0,0,0],\\\"NVMD\\\":[0,0,0,0],\\\"WDS\\\":[0,0,0,0],\\\"LXO\\\":[0,0,0,0],\\\"RHOC\\\":[0,0,0,0],\\\"APHE\\\":[0,0,0,0],\\\"SYSC\\\":[0,0,0,0],\\\"CTK\\\":[0,0,0,0],\\\"NTLK\\\":[0,0,0,0],\\\"OMGA\\\":[0,0,0,0],\\\"FNS\\\":[0,0,0,0],\\\"JGN\\\":[0,0,0,0],\\\"SGC\\\":[0,0,0,0],\\\"CTYS\\\":[0,0,0,0],\\\"MDYN\\\":[0,0,0,0],\\\"TITN\\\":[0,0,0,0]}\"}}],[\"Temp/stockmarket-summary.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stockmarket-summary.txt\",\"text\":\"Market day 43 of 75 (74% certain) Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\nFSIG  -   Prob: 31% (t42: 37%, t10: 44%) tLast⇄: 43 Vol:1.02% ER:-19.5 BP Spread:0.20% ttProfit:  2\\nMGCP  ++  Prob: 69% (t51: 78%, t10: 89%) tLast⇄:117 Vol:0.46% ER: 8.80 BP Spread:0.20% ttProfit:  3\\nFLCM  +   Prob: 66% (t51: 56%, t10: 33%) tLast⇄:117 Vol:1.20% ER: 19.0 BP Spread:0.60% ttProfit:  4\\nDCOMM -   Prob: 40% (t42: 49%, t10: 67%) tLast⇄: 43 Vol:0.64% ER:-6.62 BP Spread:0.40% ttProfit:  7\\nTITN  --  Prob: 39% (t42: 27%, t10: 22%) tLast⇄: 43 Vol:0.50% ER:-5.73 BP Spread:0.40% ttProfit:  7\\nECP   -   Prob: 31% (t42: 34%, t10: 44%) tLast⇄: 43 Vol:0.45% ER:-8.44 BP Spread:0.60% ttProfit:  8\\nKGI   ++  Prob: 60% (t51: 58%, t10: 67%) tLast⇄:117 Vol:0.76% ER: 7.86 BP Spread:0.60% ttProfit:  8\\nCTYS  ++  Prob: 64% (t51: 80%, t10: 78%) tLast⇄:117 Vol:1.61% ER: 21.9 BP Spread:1.98% ttProfit: 10\\nCLRK  +   Prob: 62% (t51: 60%, t10: 33%) tLast⇄:117 Vol:0.70% ER: 8.40 BP Spread:0.80% ttProfit: 10\\nBLD   -   Prob: 36% (t42: 44%, t10: 56%) tLast⇄: 43 Vol:0.71% ER:-9.65 BP Spread:1.00% ttProfit: 11\\nJGN   -   Prob: 44% (t51: 50%, t10: 56%) tLast⇄:117 Vol:3.00% ER:-18.0 BP Spread:2.18% ttProfit: 13\\nGPH   -   Prob: 39% (t42: 49%, t10: 44%) tLast⇄: 43 Vol:0.60% ER:-6.35 BP Spread:0.80% ttProfit: 13\\nAPHE  ++  Prob: 59% (t51: 66%, t10: 89%) tLast⇄:117 Vol:2.02% ER: 19.1 BP Spread:2.57% ttProfit: 14\\nUNV   +   Prob: 60% (t51: 60%, t10: 56%) tLast⇄:117 Vol:0.53% ER: 5.52 BP Spread:0.80% ttProfit: 15\\nVITA  ++  Prob: 57% (t51: 54%, t10: 78%) tLast⇄:117 Vol:0.79% ER: 5.48 BP Spread:0.80% ttProfit: 15\\nAERO  ++  Prob: 57% (t51: 56%, t10: 67%) tLast⇄:117 Vol:0.62% ER: 4.04 BP Spread:0.60% ttProfit: 15\\nWDS   -   Prob: 44% (t42: 46%, t10: 44%) tLast⇄: 43 Vol:2.42% ER:-13.8 BP Spread:2.18% ttProfit: 16\\nOMTK  --  Prob: 38% (t42: 22%, t10:  0%) tLast⇄: 43 Vol:0.67% ER:-8.00 BP Spread:1.19% ttProfit: 16\\nMDYN  --  Prob: 43% (t42: 39%, t10: 33%) tLast⇄: 43 Vol:0.80% ER:-5.81 BP Spread:1.00% ttProfit: 18\\nNTLK  -   Prob: 44% (t51: 54%, t10: 56%) tLast⇄:117 Vol:3.21% ER:-20.6 BP Spread:3.73% ttProfit: 19\\nSYSC  --  Prob: 45% (t42: 39%, t10: 11%) tLast⇄: 43 Vol:1.62% ER:-8.36 BP Spread:1.59% ttProfit: 20\\nICRS  ++  Prob: 58% (t51: 56%, t10: 67%) tLast⇄:117 Vol:0.60% ER: 4.53 BP Spread:1.00% ttProfit: 23\\nSTM   -   Prob: 44% (t42: 37%, t10: 44%) tLast⇄: 43 Vol:0.89% ER:-5.67 BP Spread:1.39% ttProfit: 25\\nLXO   --  Prob: 44% (t42: 44%, t10: 33%) tLast⇄: 43 Vol:1.17% ER:-7.13 BP Spread:1.78% ttProfit: 26\\nSLRS  --  Prob: 42% (t42: 54%, t10: 22%) tLast⇄: 43 Vol:0.70% ER:-5.65 BP Spread:1.59% ttProfit: 29\\nHLS   ++  Prob: 59% (t51: 64%, t10: 78%) tLast⇄:117 Vol:0.56% ER: 4.79 BP Spread:1.78% ttProfit: 38\\nNVMD  -   Prob: 45% (t42: 44%, t10: 56%) tLast⇄: 43 Vol:0.70% ER:-3.62 BP Spread:1.59% ttProfit: 45\\nOMGA  -   Prob: 49% (t51: 56%, t10: 67%) tLast⇄:117 Vol:0.96% ER:-1.27 BP Spread:0.80% ttProfit: 64\\nOMN   +   Prob: 53% (t51: 44%, t10: 33%) tLast⇄:117 Vol:0.69% ER: 2.00 BP Spread:1.59% ttProfit: 80\\nCTK   --  Prob: 47% (t51: 46%, t10: 44%) tLast⇄:117 Vol:0.91% ER:-2.38 BP Spread:1.98% ttProfit: 85\\nRHOC  ++  Prob: 52% (t51: 56%, t10: 78%) tLast⇄:117 Vol:0.70% ER: 1.09 BP Spread:1.19% ttProfit:111\\nSGC   -   Prob: 49% (t51: 48%, t10: 56%) tLast⇄:117 Vol:1.64% ER:-2.36 BP Spread:2.76% ttProfit:119\\nFNS   -   Prob: 48% (t51: 52%, t10: 78%) tLast⇄:117 Vol:0.77% ER:-1.16 BP Spread:1.78% ttProfit:156\"}}],[\"Temp/stock-probabilities.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-probabilities.txt\",\"text\":\"{\\\"FSIG\\\":{\\\"prob\\\":0.3083918792364601,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"MGCP\\\":{\\\"prob\\\":0.6914011639846329,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"FLCM\\\":{\\\"prob\\\":0.6584746166240216,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"DCOMM\\\":{\\\"prob\\\":0.3965875716300966,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"TITN\\\":{\\\"prob\\\":0.3854786704907386,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"ECP\\\":{\\\"prob\\\":0.3125042581655702,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"KGI\\\":{\\\"prob\\\":0.6034698403092714,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CTYS\\\":{\\\"prob\\\":0.6362701803720195,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CLRK\\\":{\\\"prob\\\":0.6199596219720648,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"BLD\\\":{\\\"prob\\\":0.3640544132136993,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"JGN\\\":{\\\"prob\\\":0.44001354303608836,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"GPH\\\":{\\\"prob\\\":0.39419720513629164,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"APHE\\\":{\\\"prob\\\":0.5947646676472305,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"UNV\\\":{\\\"prob\\\":0.6041880826235324,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"VITA\\\":{\\\"prob\\\":0.5693058459252925,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"AERO\\\":{\\\"prob\\\":0.5652200194636314,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"WDS\\\":{\\\"prob\\\":0.44291858065340556,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMTK\\\":{\\\"prob\\\":0.38060173707544687,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"MDYN\\\":{\\\"prob\\\":0.42742301980934205,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"NTLK\\\":{\\\"prob\\\":0.43586831977893326,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SYSC\\\":{\\\"prob\\\":0.448417370712845,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"ICRS\\\":{\\\"prob\\\":0.575423249390085,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"STM\\\":{\\\"prob\\\":0.4362390342964981,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"LXO\\\":{\\\"prob\\\":0.43906112430606986,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SLRS\\\":{\\\"prob\\\":0.41930007006671594,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"HLS\\\":{\\\"prob\\\":0.5854704848683887,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"NVMD\\\":{\\\"prob\\\":0.44825830553796453,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMGA\\\":{\\\"prob\\\":0.4867871576741682,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"OMN\\\":{\\\"prob\\\":0.5290184106502925,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"CTK\\\":{\\\"prob\\\":0.47384194047144995,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"RHOC\\\":{\\\"prob\\\":0.5155031237961528,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"SGC\\\":{\\\"prob\\\":0.48562297341377075,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0},\\\"FNS\\\":{\\\"prob\\\":0.4849454053997253,\\\"sharesLong\\\":0,\\\"sharesShort\\\":0}}\"}}],[\"Temp/stock-has4SData.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-has4SData.txt\",\"text\":\"false\"}}],[\"Temp/copy-scripts.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/copy-scripts.txt\",\"text\":\"true\"}}],[\"Temp/getPurchasedServerLimit.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getPurchasedServerLimit.txt\",\"text\":\"25\"}}],[\"Temp/getPurchasedServerMaxRam.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getPurchasedServerMaxRam.txt\",\"text\":\"1048576\"}}],[\"Temp/host-costs.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/host-costs.txt\",\"text\":\"{\\\"0\\\":55000,\\\"1\\\":110000,\\\"2\\\":220000,\\\"3\\\":440000,\\\"4\\\":880000,\\\"5\\\":1760000,\\\"6\\\":3520000,\\\"7\\\":7040000,\\\"8\\\":14080000,\\\"9\\\":28160000,\\\"10\\\":56320000,\\\"11\\\":112640000,\\\"12\\\":225280000,\\\"13\\\":450560000,\\\"14\\\":901120000,\\\"15\\\":1802240000,\\\"16\\\":3604480000,\\\"17\\\":7208960000,\\\"18\\\":14417920000,\\\"19\\\":28835840000,\\\"20\\\":57671680000,\\\"21\\\":null,\\\"22\\\":null,\\\"23\\\":null,\\\"24\\\":null,\\\"25\\\":null,\\\"26\\\":null,\\\"27\\\":null,\\\"28\\\":null,\\\"29\\\":null}\"}}],[\"Temp/getPurchasedServers.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getPurchasedServers.txt\",\"text\":\"[]\"}}],[\"Temp/rooted-servers.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/rooted-servers.txt\",\"text\":\"[\\\"home\\\",\\\"iron-gym\\\",\\\"harakiri-sushi\\\",\\\"max-hardware\\\",\\\"hong-fang-tea\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"nectar-net\\\",\\\"zer0\\\",\\\"neo-net\\\",\\\"foodnstuff\\\",\\\"CSEC\\\",\\\"n00dles\\\"]\"}}],[\"Temp/getServerMoneyAvailable.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/getServerMoneyAvailable.txt\",\"text\":\"249650.29651539976\"}}],[\"Temp/purchaseServer.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/purchaseServer.txt\",\"text\":\"\\\"daemon-23\\\"\"}}],[\"Temp/stock-buyStock.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-buyStock.txt\",\"text\":\"61448.02288878717\"}}],[\"Temp/singularity-getCurrentWork.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/singularity-getCurrentWork.txt\",\"text\":\"{\\\"type\\\":\\\"FACTION\\\",\\\"cyclesWorked\\\":132051,\\\"factionWorkType\\\":\\\"hacking\\\",\\\"factionName\\\":\\\"Tian Di Hui\\\"}\"}}],[\"Temp/stock-sellStock.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-sellStock.txt\",\"text\":\"49771.4824900356\"}}],[\"Temp/contract-types.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/contract-types.txt\",\"text\":\"{\\\"contract-685137.cct\\\":\\\"Encryption II: Vigenère Cipher\\\"}\"}}],[\"Temp/contract-data.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/contract-data.txt\",\"text\":\"{\\\"contract-685137.cct\\\":[\\\"ARRAYCACHESHELLTRASHTABLE\\\",\\\"VIRTUAL\\\"]}\"}}],[\"Temp/stock-purchase4SMarketData.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-purchase4SMarketData.txt\",\"text\":\"true\"}}],[\"Temp/stock-purchase4SMarketDataTixApi.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-purchase4SMarketDataTixApi.txt\",\"text\":\"true\"}}],[\"Temp/stock-getVolatility.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getVolatility.txt\",\"text\":\"{\\\"ECP\\\":0.0045000000000000005,\\\"MGCP\\\":0.0046,\\\"BLD\\\":0.0070999999999999995,\\\"CLRK\\\":0.006999999999999999,\\\"OMTK\\\":0.0067,\\\"FSIG\\\":0.0102,\\\"KGI\\\":0.0076,\\\"FLCM\\\":0.012,\\\"STM\\\":0.0089,\\\"DCOMM\\\":0.0064,\\\"HLS\\\":0.005600000000000001,\\\"VITA\\\":0.0079,\\\"ICRS\\\":0.006,\\\"UNV\\\":0.0053,\\\"AERO\\\":0.0062,\\\"OMN\\\":0.0069,\\\"SLRS\\\":0.006999999999999999,\\\"GPH\\\":0.006,\\\"NVMD\\\":0.006999999999999999,\\\"WDS\\\":0.0242,\\\"LXO\\\":0.011699999999999999,\\\"RHOC\\\":0.006999999999999999,\\\"APHE\\\":0.0202,\\\"SYSC\\\":0.016200000000000003,\\\"CTK\\\":0.0091,\\\"NTLK\\\":0.0321,\\\"OMGA\\\":0.0096,\\\"FNS\\\":0.0077,\\\"JGN\\\":0.03,\\\"SGC\\\":0.016399999999999998,\\\"CTYS\\\":0.0161,\\\"MDYN\\\":0.008,\\\"TITN\\\":0.005}\"}}],[\"Temp/stock-getForecast.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/stock-getForecast.txt\",\"text\":\"{\\\"ECP\\\":0.3125042581655702,\\\"MGCP\\\":0.6914011639846329,\\\"BLD\\\":0.3640544132136993,\\\"CLRK\\\":0.6199596219720648,\\\"OMTK\\\":0.38060173707544687,\\\"FSIG\\\":0.3083918792364601,\\\"KGI\\\":0.6034698403092714,\\\"FLCM\\\":0.6584746166240216,\\\"STM\\\":0.4362390342964981,\\\"DCOMM\\\":0.3965875716300966,\\\"HLS\\\":0.5854704848683887,\\\"VITA\\\":0.5693058459252925,\\\"ICRS\\\":0.575423249390085,\\\"UNV\\\":0.6041880826235324,\\\"AERO\\\":0.5652200194636314,\\\"OMN\\\":0.5290184106502925,\\\"SLRS\\\":0.41930007006671594,\\\"GPH\\\":0.39419720513629164,\\\"NVMD\\\":0.44825830553796453,\\\"WDS\\\":0.44291858065340556,\\\"LXO\\\":0.43906112430606986,\\\"RHOC\\\":0.5155031237961528,\\\"APHE\\\":0.5947646676472305,\\\"SYSC\\\":0.448417370712845,\\\"CTK\\\":0.47384194047144995,\\\"NTLK\\\":0.43586831977893326,\\\"OMGA\\\":0.4867871576741682,\\\"FNS\\\":0.4849454053997253,\\\"JGN\\\":0.44001354303608836,\\\"SGC\\\":0.48562297341377075,\\\"CTYS\\\":0.6362701803720195,\\\"MDYN\\\":0.42742301980934205,\\\"TITN\\\":0.3854786704907386}\"}}],[\"Temp/unsolved-contracts.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/unsolved-contracts.txt\",\"text\":\"[\\\"contract-448001-Sector12.cct\\\"]\"}}],[\"Temp/upgradePurchasedServer.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/upgradePurchasedServer.txt\",\"text\":\"true\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"daemon.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3038.750119239721,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.2100000000032,\"ramUsage\":3.7,\"server\":\"home\",\"scriptKey\":\"daemon.js*[]\",\"title\":\"daemon.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"stats.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":740.2100000000032,\"ramUsage\":2.9,\"server\":\"home\",\"scriptKey\":\"stats.js*[]\",\"title\":\"stats.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--show-market-summary\"],\"dataMap\":{},\"filename\":\"stockmaster.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":739.410000000003,\"ramUsage\":2.6,\"server\":\"home\",\"scriptKey\":\"stockmaster.js*[\\\"--show-market-summary\\\"]\",\"title\":\"stockmaster.js --show-market-summary\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"Temp/stockmarket-summary-tail.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":739.410000000003,\"ramUsage\":1.6,\"server\":\"home\",\"scriptKey\":\"Temp/stockmarket-summary-tail.js*[]\",\"title\":\"Temp/stockmarket-summary-tail.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"-c\",\"--max-payoff-time\",\"1h\"],\"dataMap\":{},\"filename\":\"hacknet-upgrade-manager.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":739.210000000003,\"ramUsage\":6.1,\"server\":\"home\",\"scriptKey\":\"hacknet-upgrade-manager.js*[\\\"-c\\\",\\\"--max-payoff-time\\\",\\\"1h\\\"]\",\"title\":\"hacknet-upgrade-manager.js -c --max-payoff-time 1h\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1686309954441,1686309954441,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":174.20999999999975,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"Remote/weak-target.js*[\\\"harakiri-sushi\\\",1686309954441,1686309954441,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js harakiri-sushi 1686309954441 1686309954441 0 prep 0 0\",\"threads\":45,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"43.6.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":54748488674,\"moneyMax\":1368712216850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1380,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"56.5.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51198572192,\"moneyMax\":1279964304800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1115,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"14.3.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":22673316306,\"moneyMax\":566832907650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1144,\"serverGrowth\":80,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"40.6.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":39583731524,\"moneyMax\":989593288100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1149,\"serverGrowth\":62,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"55.1.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":24807862243,\"moneyMax\":620196556075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":957,\"serverGrowth\":76,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"37.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":24335235271,\"moneyMax\":608380881775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1055,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"55.1.1.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":15984375182,\"moneyMax\":399609379550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":961,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"20.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":23553455639,\"moneyMax\":588836390975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":974,\"serverGrowth\":93,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"50.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":22316835756,\"moneyMax\":557920893900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1196,\"serverGrowth\":92,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"7.5.5.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1448145189,\"moneyMax\":36203629725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":981,\"serverGrowth\":86,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"31.0.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1231,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"73.9.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1139820842,\"moneyMax\":28495521050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":946,\"serverGrowth\":91,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"53.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":908661876,\"moneyMax\":22716546900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1011,\"serverGrowth\":60,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"36.2.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":634021577,\"moneyMax\":15850539425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":68,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"30.6.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":711392080,\"moneyMax\":17784802000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":75,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"32.0.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":706955818,\"moneyMax\":17673895450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":70,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"22.7.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":991057403,\"moneyMax\":24776435075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":881,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"62.6.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1143866111,\"moneyMax\":28596652775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":83,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"79.8.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":756578269,\"moneyMax\":18914456725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":77,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"6.1.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":695994145,\"moneyMax\":17399853625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":70,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"93.9.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":833051054,\"moneyMax\":20826276350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":937,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"28.4.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":825767783,\"moneyMax\":20644194575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":853,\"serverGrowth\":71,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"62.2.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1106845657,\"moneyMax\":27671141425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":883,\"serverGrowth\":58,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"83.1.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":963245585,\"moneyMax\":24081139625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":63,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"35.3.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":1064221725,\"moneyMax\":26605543125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":68,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"70.8.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":896362320,\"moneyMax\":22409058000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"93.0.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":831403767,\"moneyMax\":20785094175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":756,\"serverGrowth\":80,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"11.4.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1499773216,\"moneyMax\":37494330400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":70,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"78.7.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1703117497,\"moneyMax\":42577937425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":793,\"serverGrowth\":84,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"87.6.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1221661162,\"moneyMax\":30541529050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":81,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"87.7.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1300753828,\"moneyMax\":32518845700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":74,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"14.6.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1040666032,\"moneyMax\":26016650800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":79,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"49.9.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":749395656,\"moneyMax\":18734891400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":747,\"serverGrowth\":59,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"45.2.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":655081225,\"moneyMax\":16377030625,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":515,\"serverGrowth\":58,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"12.1.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":617232627,\"moneyMax\":15430815675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":586,\"serverGrowth\":51,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"94.7.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":283538625,\"moneyMax\":7088465625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":420,\"serverGrowth\":30,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"28.1.3.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":175661138,\"moneyMax\":4391528450,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":381,\"serverGrowth\":37,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"16.5.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":856114941,\"moneyMax\":21402873525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":767,\"serverGrowth\":76,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"87.4.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":344634337,\"moneyMax\":8615858425,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":441,\"serverGrowth\":44,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"28.7.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":493548338,\"moneyMax\":12338708450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":612,\"serverGrowth\":62,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"69.2.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":410008639,\"moneyMax\":10250215975,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":431,\"serverGrowth\":48,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"98.3.4.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":180488968,\"moneyMax\":4512224200,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":305,\"serverGrowth\":55,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"90.9.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":234084800,\"moneyMax\":5852120000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":330,\"serverGrowth\":54,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"78.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":422,\"serverGrowth\":58,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"73.5.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":83728839,\"moneyMax\":2093220975,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":266,\"serverGrowth\":44,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"51.2.1.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/grow-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/grow-target.js\",\"server\":\"n00dles\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"n00dles\"}}],[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.022,\"minDifficulty\":1,\"moneyAvailable\":498684.61674914026,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1686310054373,1686310054373,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000009,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"Remote/weak-target.js*[\\\"nectar-net\\\",1686310054373,1686310054373,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js nectar-net 1686310054373 1686310054373 0 prep 0 0\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"74.8.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"foodnstuff\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.0139999999999985,\"minDifficulty\":3,\"moneyAvailable\":2005001.8564442827,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1686309883655,1686309883655,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":245.01000000000073,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"Remote/weak-target.js*[\\\"hong-fang-tea\\\",1686309883655,1686309883655,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js hong-fang-tea 1686309883655 1686309883655 0 prep 0 0\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1686310054373,1686310054373,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000009,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"Remote/weak-target.js*[\\\"nectar-net\\\",1686310054373,1686310054373,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js nectar-net 1686310054373 1686310054373 0 prep 0 0\",\"threads\":6,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"66.8.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/grow-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/grow-target.js\",\"server\":\"sigma-cosmetics\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"sigma-cosmetics\"}}],[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.050000000000002,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1686310054373,1686310054373,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000009,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"Remote/weak-target.js*[\\\"nectar-net\\\",1686310054373,1686310054373,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js nectar-net 1686310054373 1686310054373 0 prep 0 0\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"80.1.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/grow-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/grow-target.js\",\"server\":\"joesguns\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"joesguns\"}}],[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.200000000000001,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",1686309794676,1686309794676,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":334.0099999999966,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"Remote/weak-target.js*[\\\"neo-net\\\",1686309794676,1686309794676,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js neo-net 1686309794676 1686309794676 0 prep 0 0\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"97.9.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"zer0\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"zer0\"}}],[\"Remote/grow-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/grow-target.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1686310054373,1686310054373,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000009,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"Remote/weak-target.js*[\\\"nectar-net\\\",1686310054373,1686310054373,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js nectar-net 1686310054373 1686310054373 0 prep 0 0\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1686310122831,1686310122831,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"Remote/weak-target.js*[\\\"zer0\\\",1686310122831,1686310122831,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js zer0 1686310122831 1686310122831 0 prep 0 0\",\"threads\":6,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"62.6.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/grow-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/grow-target.js\",\"server\":\"nectar-net\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"nectar-net\"}}],[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":19.049999999999997,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",1686309794676,1686309794676,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":334.0099999999966,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"Remote/weak-target.js*[\\\"neo-net\\\",1686309794676,1686309794676,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js neo-net 1686309794676 1686309794676 0 prep 0 0\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1686310054373,1686310054373,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000009,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"Remote/weak-target.js*[\\\"nectar-net\\\",1686310054373,1686310054373,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js nectar-net 1686310054373 1686310054373 0 prep 0 0\",\"threads\":2,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"48.2.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"neo-net\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"neo-net\"}}],[\"Remote/grow-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/grow-target.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",1686310122831,1686310122831,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000002,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"Remote/weak-target.js*[\\\"zer0\\\",1686310122831,1686310122831,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js zer0 1686310122831 1686310122831 0 prep 0 0\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"60.9.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"64.3.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"hong-fang-tea\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"hong-fang-tea\"}}],[\"Remote/grow-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/grow-target.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.05,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1686309883655,1686309883655,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":245.01000000000073,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"Remote/weak-target.js*[\\\"hong-fang-tea\\\",1686309883655,1686309883655,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js hong-fang-tea 1686309883655 1686309883655 0 prep 0 0\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1686310054373,1686310054373,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000009,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"Remote/weak-target.js*[\\\"nectar-net\\\",1686310054373,1686310054373,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js nectar-net 1686310054373 1686310054373 0 prep 0 0\",\"threads\":2,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"30.6.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"harakiri-sushi\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.945999999999996,\"minDifficulty\":5,\"moneyAvailable\":4137280.9487022813,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1686309883655,1686309883655,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":245.01000000000073,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"Remote/weak-target.js*[\\\"hong-fang-tea\\\",1686309883655,1686309883655,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js hong-fang-tea 1686309883655 1686309883655 0 prep 0 0\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"77.9.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"22.2.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"max-hardware\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1686309954441,1686309954441,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":174.20999999999975,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"Remote/weak-target.js*[\\\"harakiri-sushi\\\",1686309954441,1686309954441,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js harakiri-sushi 1686309954441 1686309954441 0 prep 0 0\",\"threads\":16,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1686310054373,1686310054373,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000009,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"Remote/weak-target.js*[\\\"nectar-net\\\",1686310054373,1686310054373,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js nectar-net 1686310054373 1686310054373 0 prep 0 0\",\"threads\":2,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"89.6.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":67098546,\"moneyMax\":1677463650,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":204,\"serverGrowth\":39,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"37.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":56343953,\"moneyMax\":1408598825,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":253,\"serverGrowth\":28,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"29.0.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"iron-gym\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",1686309954441,1686309954441,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":174.20999999999975,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"Remote/weak-target.js*[\\\"harakiri-sushi\\\",1686309954441,1686309954441,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js harakiri-sushi 1686309954441 1686309954441 0 prep 0 0\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"82.2.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":502,\"serverGrowth\":39,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"13.0.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1053,\"serverGrowth\":50,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"92.3.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":734,\"serverGrowth\":42,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"87.7.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":514,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"59.6.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":361,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"83.6.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":216,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"60.4.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":518,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"80.8.4.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"Remote/grow-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n    const sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n    const expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n    const manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    const cycleTime = expectedDuration / 3.2 * 4;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        await ns.grow(ns.args[0], { stock: manipulateStock });\\n        if (loop) await ns.sleep(cycleTime - expectedDuration);\\n    } while (loop);\\n}\",\"filename\":\"Remote/grow-target.js\",\"server\":\"CSEC\"}}],[\"helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/** Convert a command name like \\\"ns.namespace.someFunction(args, args)\\\" into\\n * a default file path for running that command \\\"/Temp/namespace-someFunction.txt\\\" */\\nfunction getDefaultCommandFileName(command, ext = '.txt') {\\n    // If prefixed with \\\"ns.\\\", strip that out\\n    let fname = command;\\n    if (fname.startsWith(\\\"ns.\\\")) fname = fname.slice(3);\\n    // Remove anything between parentheses\\n    fname = fname.replace(/ *\\\\([^)]*\\\\) */g, \\\"\\\");\\n    // Replace any dereferencing (dots) with dashes\\n    fname = fname.replace(\\\".\\\", \\\"-\\\");\\n    return `/Temp/${fname}${ext}`\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName = null, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    fName = fName || getDefaultCommandFileName(command);\\n    const fNameCommand = fName + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // TODO: Workaround for v2.3.0 deprecation. Remove when the warning is gone.\\n    // Avoid serializing ns.getPlayer() properties that generate warnings\\n    if (command === \\\"ns.getPlayer()\\\")\\n        command = `( ()=> { let player = ns.getPlayer();\\n            const excludeProperties = ['playtimeSinceLastAug', 'playtimeSinceLastBitnode', 'bitNodeN'];\\n            return Object.keys(player).reduce((pCopy, key) => {\\n                if (!excludeProperties.includes(key))\\n                   pCopy[key] = player[key];\\n                return pCopy;\\n            }, {});\\n        })()`;\\n\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{command-name}.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || getDefaultCommandFileName(command, '.js');\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const currentNode = (await fnGetNsDataThroughFile(ns, 'ns.getResetInfo()', '/Temp/reset-info.txt')).currentNode;\\n            dictSourceFiles[currentNode] = Math.max(3, dictSourceFiles[currentNode] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const stockGetAll = async (fn) => await getNsDataThroughFile(ns,\\n        `(() => { try { return Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)])); } catch { return null; } })()`,\\n        `/Temp/stock-${fn}-all.txt`, stockSymbols);\\n    const askPrices = await stockGetAll('getAskPrice');\\n    // Workaround for Bug #304: If we lost TIX access, our cache of stock symbols will still be valid, but we won't be able to get prices.\\n    if (askPrices == null) return 0; // No TIX API Access\\n    const bidPrices = await stockGetAll('getBidPrice');\\n    const positions = await stockGetAll('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"helpers.js\",\"server\":\"CSEC\"}}],[\"Remote/weak-target.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n * Wait until an appointed time and then execute a weaken. */\\nexport async function main(ns) {\\n    //args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: disable toast warnings, 6: loop]\\n    let sleepDuration = ns.args[1] - Date.now();\\n    const disableToastWarnings = ns.args.length > 5 ? ns.args[5] : false;\\n    const loop = ns.args.length > 6 ? ns.args[6] : false;\\n    if (sleepDuration > 0)\\n        await ns.sleep(sleepDuration);\\n    do {\\n        if (!await ns.weaken(ns.args[0]) && !disableToastWarnings)\\n            ns.toast(`Warning, weaken reduced 0 security. Might be a misfire. ${JSON.stringify(ns.args)}`, 'warning');\\n    } while (loop);\\n}\",\"filename\":\"Remote/weak-target.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":52,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1686310054373,1686310054373,0,\"prep\",0,0],\"dataMap\":{},\"filename\":\"Remote/weak-target.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000009,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"Remote/weak-target.js*[\\\"nectar-net\\\",1686310054373,1686310054373,0,\\\"prep\\\",0,0]\",\"title\":\"Remote/weak-target.js nectar-net 1686310054373 1686310054373 0 prep 0 0\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"96.5.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"99.2.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"70.3.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.8341,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1.9235,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":32.9718,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":74.9701,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":62.1013,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":118.0471,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":44.3526,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":23282.13596308191,\"lastPrice\":23327.293758294672,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":false,\"otlkMag\":18.749574183442977,\"otlkMagForecast\":30.863493703461597,\"cap\":347697398,\"spreadPerc\":0.3,\"shareTxForMovement\":31851,\"shareTxUntilMovement\":31851,\"totalShares\":103300000,\"maxShares\":20700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":31609.855722769134,\"lastPrice\":31547.30713328337,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":true,\"otlkMag\":19.140116398463288,\"otlkMagForecast\":69.21763623077777,\"cap\":267594606,\"spreadPerc\":0.1,\"shareTxForMovement\":82545,\"shareTxUntilMovement\":82545,\"totalShares\":85100000,\"maxShares\":17000000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":15619.68849428581,\"lastPrice\":15572.034303922583,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":13.594558678630074,\"otlkMagForecast\":36.44414215420563,\"cap\":91404340,\"spreadPerc\":0.5,\"shareTxForMovement\":81296,\"shareTxUntilMovement\":81296,\"totalShares\":105900000,\"maxShares\":21200000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":11777.957565006134,\"lastPrice\":11742.528714180853,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":11.995962197206476,\"otlkMagForecast\":61.56308185247164,\"cap\":54815123,\"spreadPerc\":0.4,\"shareTxForMovement\":80643,\"shareTxUntilMovement\":80643,\"totalShares\":149200000,\"maxShares\":29800000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":38727.60187308018,\"lastPrice\":38839.44075137537,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":11.939826292455317,\"otlkMagForecast\":38.31240030710474,\"cap\":405951550,\"spreadPerc\":0.6,\"shareTxForMovement\":79400,\"shareTxUntilMovement\":79400,\"totalShares\":44700000,\"maxShares\":8900000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":60752.981373843075,\"lastPrice\":60487.055856486404,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":false,\"otlkMag\":19.160812076353988,\"otlkMagForecast\":32.97583609862642,\"cap\":525065207,\"spreadPerc\":0.1,\"shareTxForMovement\":56353,\"shareTxUntilMovement\":56353,\"totalShares\":36600000,\"maxShares\":7300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":28247.554340536855,\"lastPrice\":28155.324485923265,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":10.346984030927137,\"otlkMagForecast\":59.71231612654985,\"cap\":274121341,\"spreadPerc\":0.3,\"shareTxForMovement\":53680,\"shareTxUntilMovement\":53680,\"totalShares\":77900000,\"maxShares\":15600000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":33852.93146037547,\"lastPrice\":34028.02693542563,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":true,\"otlkMag\":15.847461662402162,\"otlkMagForecast\":66.53213907685435,\"cap\":728469866,\"spreadPerc\":0.3,\"shareTxForMovement\":33387,\"shareTxUntilMovement\":33387,\"totalShares\":67900000,\"maxShares\":13600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":22285.20587421918,\"lastPrice\":22370.693656746887,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.89,\"b\":false,\"otlkMag\":6.376096570350192,\"otlkMagForecast\":43.12095138028726,\"cap\":411009569,\"spreadPerc\":0.7,\"shareTxForMovement\":95487,\"shareTxUntilMovement\":95487,\"totalShares\":50200000,\"maxShares\":10000000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":11892.156538102996,\"lastPrice\":11859.441937540243,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":10.34124283699034,\"otlkMagForecast\":39.864638098215536,\"cap\":243880049,\"spreadPerc\":0.2,\"shareTxForMovement\":39004,\"shareTxUntilMovement\":39004,\"totalShares\":80000000,\"maxShares\":16000000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":13746.944810229976,\"lastPrice\":13780.125973765684,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":8.547048486838872,\"otlkMagForecast\":59.092301752970116,\"cap\":68834898,\"spreadPerc\":0.9,\"shareTxForMovement\":107331,\"shareTxUntilMovement\":107331,\"totalShares\":65900000,\"maxShares\":13200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":12213.378968116163,\"lastPrice\":12171.932833489194,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":6.930584592529259,\"otlkMagForecast\":56.994806027241914,\"cap\":243618515,\"spreadPerc\":0.4,\"shareTxForMovement\":43115,\"shareTxUntilMovement\":43115,\"totalShares\":87600000,\"maxShares\":17500000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":16329.814376967774,\"lastPrice\":16287.69245244891,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":7.542324939008511,\"otlkMagForecast\":57.28367186445845,\"cap\":365828732,\"spreadPerc\":0.5,\"shareTxForMovement\":68568,\"shareTxUntilMovement\":68568,\"totalShares\":49700000,\"maxShares\":9900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":26539.683123358303,\"lastPrice\":26479.193897800615,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":true,\"otlkMag\":10.418808262353243,\"otlkMagForecast\":60.19282713334327,\"cap\":73076739,\"spreadPerc\":0.4,\"shareTxForMovement\":54704,\"shareTxUntilMovement\":54704,\"totalShares\":34300000,\"maxShares\":6900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":18408.80338247119,\"lastPrice\":18359.740211199965,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":6.522001946363149,\"otlkMagForecast\":55.811392698151614,\"cap\":242142550,\"spreadPerc\":0.3,\"shareTxForMovement\":74695,\"shareTxUntilMovement\":74695,\"totalShares\":38400000,\"maxShares\":7700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":9124.986375349226,\"lastPrice\":9152.124429848307,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":2.90184106502925,\"otlkMagForecast\":54.284844678203804,\"cap\":178830857,\"spreadPerc\":0.8,\"shareTxForMovement\":57311,\"shareTxUntilMovement\":57311,\"totalShares\":64900000,\"maxShares\":13000000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":16387.20789228329,\"lastPrice\":16436.650389550294,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":8.069992993328407,\"otlkMagForecast\":41.49477365528538,\"cap\":240682716,\"spreadPerc\":0.8,\"shareTxForMovement\":118534,\"shareTxUntilMovement\":118534,\"totalShares\":48000000,\"maxShares\":9600000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":19907.051457344303,\"lastPrice\":19855.7022319629,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":10.580279486370834,\"otlkMagForecast\":39.84329336953014,\"cap\":381839250,\"spreadPerc\":0.4,\"shareTxForMovement\":125469,\"shareTxUntilMovement\":125469,\"totalShares\":37400000,\"maxShares\":7500000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":16711.916846277545,\"lastPrice\":16661.64632987575,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":5.174169446203553,\"otlkMagForecast\":45.21276504169499,\"cap\":165396665,\"spreadPerc\":0.8,\"shareTxForMovement\":69131,\"shareTxUntilMovement\":69131,\"totalShares\":34600000,\"maxShares\":6900000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":6136.170750215007,\"lastPrice\":6072.827014677892,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.42,\"b\":false,\"otlkMag\":5.708141934659446,\"otlkMagForecast\":47.67414605080245,\"cap\":10030055,\"spreadPerc\":1.1,\"shareTxForMovement\":50882,\"shareTxUntilMovement\":50882,\"totalShares\":75500000,\"maxShares\":15100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7880.400987490247,\"lastPrice\":7920.141327029313,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.17,\"b\":false,\"otlkMag\":6.093887569393011,\"otlkMagForecast\":44.02577703897777,\"cap\":170338618,\"spreadPerc\":0.9,\"shareTxForMovement\":102580,\"shareTxUntilMovement\":102580,\"totalShares\":37500000,\"maxShares\":7500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4666.90355032203,\"lastPrice\":4652.865205491209,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":1.550312379615279,\"otlkMagForecast\":50.65361662124033,\"cap\":14556267,\"spreadPerc\":0.6,\"shareTxForMovement\":80877,\"shareTxUntilMovement\":80877,\"totalShares\":40200000,\"maxShares\":8000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":7027.189955429223,\"lastPrice\":7088.37291170207,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.02,\"b\":true,\"otlkMag\":9.476466764723046,\"otlkMagForecast\":59.46330005481739,\"cap\":95870640,\"spreadPerc\":1.3,\"shareTxForMovement\":32000,\"shareTxUntilMovement\":32000,\"totalShares\":41300000,\"maxShares\":8300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":4165.411848814484,\"lastPrice\":4194.496935163857,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.62,\"b\":false,\"otlkMag\":5.1582629287155,\"otlkMagForecast\":48.35918006118191,\"cap\":89430153,\"spreadPerc\":0.8,\"shareTxForMovement\":51750,\"shareTxUntilMovement\":51750,\"totalShares\":45000000,\"maxShares\":9000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1731.3181722858894,\"lastPrice\":1738.1088899562515,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":false,\"otlkMag\":2.6158059528550024,\"otlkMagForecast\":45.901835425384064,\"cap\":2000460,\"spreadPerc\":1,\"shareTxForMovement\":73158,\"shareTxUntilMovement\":73158,\"totalShares\":110600000,\"maxShares\":22100000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3644.299873270835,\"lastPrice\":3694.7214628724805,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.21,\"b\":false,\"otlkMag\":6.413168022106672,\"otlkMagForecast\":49.28123895174699,\"cap\":19819010,\"spreadPerc\":1.9,\"shareTxForMovement\":23623,\"shareTxUntilMovement\":23623,\"totalShares\":20900000,\"maxShares\":4200000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3520.2190751308954,\"lastPrice\":3505.7131641709866,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":false,\"otlkMag\":1.321284232583183,\"otlkMagForecast\":51.04909028005752,\"cap\":84739667,\"spreadPerc\":0.4,\"shareTxForMovement\":71871,\"shareTxUntilMovement\":71871,\"totalShares\":17600000,\"maxShares\":3500000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1181.0733010352928,\"lastPrice\":1177.1664576777164,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":1.5054594600274638,\"otlkMagForecast\":53.384092684818405,\"cap\":17530068,\"spreadPerc\":0.9,\"shareTxForMovement\":95019,\"shareTxUntilMovement\":95019,\"totalShares\":40900000,\"maxShares\":8200000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2529.382617755369,\"lastPrice\":2547.26213434797,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.64,\"b\":false,\"otlkMag\":1.4377026586229227,\"otlkMagForecast\":50.67706387168676,\"cap\":55268693,\"spreadPerc\":1.4,\"shareTxForMovement\":56723,\"shareTxUntilMovement\":56723,\"totalShares\":10700000,\"maxShares\":2100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":288.17886851769987,\"lastPrice\":291.90519395731394,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3,\"b\":false,\"otlkMag\":5.998645696391161,\"otlkMagForecast\":47.63138664816515,\"cap\":2806349,\"spreadPerc\":1.1,\"shareTxForMovement\":15719,\"shareTxUntilMovement\":15719,\"totalShares\":114100000,\"maxShares\":22800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1515.4071789523805,\"lastPrice\":1525.923228198315,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.61,\"b\":true,\"otlkMag\":13.627018037201955,\"otlkMagForecast\":64.91119986180254,\"cap\":14193626,\"spreadPerc\":1,\"shareTxForMovement\":35359,\"shareTxUntilMovement\":35359,\"totalShares\":97000000,\"maxShares\":19400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":31134.296566556415,\"lastPrice\":31027.309446039908,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.257698019065792,\"otlkMagForecast\":41.993202412345966,\"cap\":303284042,\"spreadPerc\":0.5,\"shareTxForMovement\":176042,\"shareTxUntilMovement\":176042,\"totalShares\":12000000,\"maxShares\":2400000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":20053.353589220696,\"lastPrice\":20096.570568784726,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":11.452132950926138,\"otlkMagForecast\":39.07977737984083,\"cap\":392258440,\"spreadPerc\":0.2,\"shareTxForMovement\":159349,\"shareTxUntilMovement\":159349,\"totalShares\":21000000,\"maxShares\":4200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":257,\"lastUpdate\":1686310126692,\"ticksUntilCycle\":33}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":7,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#023DDE\",\"primary\":\"#4A41C8\",\"primarydark\":\"#005299\",\"successlight\":\"#00FF00\",\"success\":\"#D1DAD1\",\"successdark\":\"#BFCABF\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#040505\",\"white\":\"#fff\",\"black\":\"#000000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#091419\",\"backgroundsecondary\":\"#000000\",\"button\":\"#000000\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":false},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"32","AllGangsSave":"","LastExportBonus":"1686224130412","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}